{"ast":null,"code":"/*\n * Copyright 2019, 2020 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Client';\nconst crypto = require('crypto');\nconst {\n  checkParameter,\n  getLogger,\n  pemToDER,\n  setConfigSetting,\n  getConfigSetting,\n  newCryptoSuite\n} = require('./Utils.js');\nconst Channel = require('./Channel');\nconst Endpoint = require('./Endpoint');\nconst Committer = require('./Committer');\nconst Endorser = require('./Endorser');\nconst Eventer = require('./Eventer');\nconst Discoverer = require('./Discoverer');\nconst IdentityContext = require('./IdentityContext');\nconst logger = getLogger(TYPE);\n\n/**\n * @classdesc\n * This class represents a Client, the central place\n * for connection and config information.\n *\n * @class\n */\nconst Client = class {\n  /**\n   * Construct a Client object.\n   *\n   * @param {string} name - The name of the client.\n   *\n   * @returns {Client} The Client instance.\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    logger.debug(`${TYPE}.constructor[${name}] - start `);\n    this.type = TYPE;\n    this.name = name;\n    this.mspid = null;\n    this._tls_mutual = {};\n    this._tls_mutual.selfGenerated = false;\n    this.endorsers = new Map();\n    this.committers = new Map();\n    this.channels = new Map();\n\n    // options for centralized management\n    this.centralizedOptions = null;\n  }\n\n  /**\n   * Construct a Client object.\n   *\n   * @param {string} name - The name of the client.\n   */\n  static newClient(name) {\n    return new Client(name);\n  }\n\n  /**\n   * Builds an {@link IdentityContext} instance with the given user.\n   * Will be used when building proposals, commits, and queries.\n   * @param {User} [user] instance\n   */\n  newIdentityContext() {\n    let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('user');\n    return new IdentityContext(user, this);\n  }\n\n  /**\n   * @typedef {Object} ConnectOptions\n   * @property {string} url The committer URL with format of 'grpc(s)://host:port'.\n   * @property {string} pem - The Endorser's TLS certificate, in PEM format,\n   *  to use with the grpcs protocol.\n   * @property {string} [clientKey] - Optional. The client private key, in PEM format,\n   *  to use with the grpcs protocol and mutual TLS. When not provided, the key\n   *  assigned to this client instance will be used.\n   * @property {string} clientCert - The public certificate, in PEM format,\n   *  to use with the grpcs protocol and mutual TLS. When not provided the cert\n   *  assigned to this client instance will be used.\n   * @property {Number} requestTimeout - The timeout to use for request on this\n   *  connection.\n   * @property {string} ssl-target-name-override - Used in test environment only,\n   *  when the server certificate's hostname (in the 'CN' field) does not match\n   *  the actual host endpoint that the server process runs at, the application\n   *  can work around the client TLS verify failure by setting this property to\n   *  the value of the server certificate's hostname\n   * @property {string} * - include any grpc options. These will be passed to\n   *  the grpc service. A grpc option must have a string key and integer or\n   *  string value.\n   */\n\n  /**\n   * Utility method to merge connection options. The tls mutual and\n   * default connection options from the config will not override any passed\n   * in settings of the same name.\n   *\n   * @param {ConnectOptions} options - The object holding the application options\n   * that will be merged on top of this client's options.\n   * @returns {object} - The object holding both the application's options\n   *  and this client's options.\n   */\n  getConnectionOptions(options) {\n    const method = `getConnectionOptions: ${this.name}`;\n    logger.debug('%s - start', method);\n\n    // start with options from the config system (mainly config/default.json)\n    let return_options = Object.assign({}, getConfigSetting('connection-options'));\n\n    // override with any centralized options\n    if (this.centralizedOptions) {\n      logger.debug('%s - adding centralized options:%s', method, this.centralizedOptions);\n      return_options = Object.assign(return_options, this.centralizedOptions);\n    } else {\n      logger.debug('%s - no centralized options', method);\n    }\n\n    // apply the tls info\n    if (this._tls_mutual.clientCert && this._tls_mutual.clientKey) {\n      return_options.clientCert = this._tls_mutual.clientCert;\n      return_options.clientKey = this._tls_mutual.clientKey;\n    }\n\n    // now finally override with any specific options for this\n    // connection\n    return_options = Object.assign(return_options, options);\n    return return_options;\n  }\n\n  /**\n   * Utility method to set the connection options required by this Client (application).\n   * These will be merged into new endpoints as this client creates new endpoints.\n   * Options provided here will override the default 'conection-options' from the\n   * config file ./config/default.json.\n   * @example {\n  \t\"grpc.max_receive_message_length\": -1,\n  \t\"grpc.max_send_message_length\": -1,\n  \t\"grpc.keepalive_time_ms\": 120000,\n  \t\t\"grpc.http2.min_time_between_pings_ms\": 120000,\n  \t\"grpc.keepalive_timeout_ms\": 20000,\n  \t\"grpc.http2.max_pings_without_data\": 0,\n  \t\"grpc.keepalive_permit_without_calls\": 1,\n  \t\"grpc-wait-for-ready-timeout\": 3000,\n  \t\"request-timeout\" : 45000\n   }\n   * @param {object} options - The options to be used by gRPC connections.\n   * @returns {Client} The Client instance.\n   */\n  setCentralizedConnectionOptions(options) {\n    const method = `setCentralizedConnectionOptions: ${this.name} `;\n    logger.debug('%s - start %s', method, JSON.stringify(options));\n    this.centralizedOptions = options;\n    return this;\n  }\n\n  /**\n   * Use this method to build an endpoint options object. This may be reused\n   * when connecting to endorsers, committers, discovers and eventers. The input\n   * opts must have an \"url\" for connecting to a fabric service.\n   * @param {ConnectOptions} options\n   */\n  newEndpoint() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const method = `newEndpoint: ${this.name}`;\n    logger.debug('%s - start', method);\n    const _options = this.getConnectionOptions(options);\n    const ssl_target_name_override = _options['ssl-target-name-override'];\n\n    // make sure we have wait for ready timeout\n    const timeout = _options['grpc-wait-for-ready-timeout'];\n    if (!timeout) {\n      _options['grpc-wait-for-ready-timeout'] = 3000; // default 3 seconds\n    } else {\n      if (Number.isInteger(timeout)) {\n        logger.debug('%s grpc-wait-for-ready-timeout set to %s', method, timeout);\n      } else {\n        throw Error(`invalid grpc-wait-for-ready-timeout :: ${timeout}`);\n      }\n    }\n\n    // make sure we have wait for request timeout\n    const requestTimeout = _options.requestTimeout;\n    if (!requestTimeout) {\n      _options.requestTimeout = 3000; // default 3 seconds\n    } else {\n      if (Number.isInteger(requestTimeout)) {\n        logger.debug('%s requestTimeout set to %s', method, requestTimeout);\n      } else {\n        throw Error(`invalid requestTimeout :: ${requestTimeout}`);\n      }\n    }\n    if (typeof ssl_target_name_override === 'string') {\n      _options['grpc.ssl_target_name_override'] = ssl_target_name_override;\n      _options['grpc.default_authority'] = ssl_target_name_override;\n      logger.debug('%s - ssl_target_name_override: %s', method, ssl_target_name_override);\n    }\n    const endpoint = new Endpoint(_options);\n    logger.debug('new endpoint url: %s', _options.url);\n    return endpoint;\n  }\n\n  /**\n   * Returns a {@link Endorser} instance with the given name.\n   * Will return a new instance. Does not check for existing instances\n   * and does not keep a reference to this instance.\n   *\n   * @param {string} name - The name of the endorser.\n   * @param {string} [mspid] - Optional. The MSP id\n   * @returns {Endorser} The endorser instance.\n   */\n  newEndorser() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let mspid = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `newEndorser: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    const endorser = new Endorser(name, this, mspid);\n    logger.debug('%s return new endorser name:%s', method, name);\n    return endorser;\n  }\n\n  /**\n   * Returns a {@link Endorser} instance with the given name.\n   * Will return an existing instance if one exist or it will\n   * create a new instance and save a reference.\n   *\n   * @param {string} name - The name of the endorser.\n   * @param {string} [mspid] - Optional. The MSP id\n   * @returns {Endorser} The endorser instance.\n   */\n  getEndorser() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let mspid = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `getEndorser: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    let endorser = this.endorsers.get(name);\n    if (!endorser) {\n      logger.debug('%s create endorser name:%s', method, name);\n      endorser = new Endorser(name, this, mspid);\n      this.endorsers.set(name, endorser);\n    } else {\n      logger.debug('%s existing endorser name:%s', method, name);\n    }\n    logger.debug('%s return endorser name:%s', method, name);\n    return endorser;\n  }\n\n  /**\n   * Will return an array of {@link Endorser} instances that have been\n   * created by this client instance. Include a MSPID to only return endorsers\n   * in a specific organization.\n   *\n   * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n   * @return {Endorser[]} the list of {@link Endorser}s.\n   */\n  getEndorsers(mspid) {\n    const method = `getEndorsers[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return Channel._getServiceEndpoints(this.endorsers.values(), 'Endorser', mspid);\n  }\n\n  /**\n   * Returns a {@link Committer} instance with the given name.\n   * Will return a new instance. Does not check for existing instances\n   * and does not keep a reference to this instance.\n   *\n   * @param {string} name - The name of the Committer.\n   * @param {string} [mspid] - Optional. The MSP id\n   * @returns {Committer} The committer instance.\n   */\n  newCommitter() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let mspid = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `newCommitter: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    const committer = new Committer(name, this, mspid);\n    logger.debug('%s return new committer name:%s', method, name);\n    return committer;\n  }\n\n  /**\n   * Returns a {@link Committer} instance with the given name.\n   * Will return an existing instance if one exist or it will\n   * create a new instance and save a reference.\n   *\n   * @param {string} name - The name of the committer.\n   * @param {string} [mspid] - Optional. The MSP id\n   * @returns {Committer} The committer instance.\n   */\n  getCommitter() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let mspid = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `getCommitter: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    let committer = this.committers.get(name);\n    if (!committer) {\n      logger.debug('%s create committer name:%s', method, name);\n      committer = new Committer(name, this, mspid);\n      this.committers.set(name, committer);\n    } else {\n      logger.debug('%s existing committer name:%s', method, name);\n    }\n    logger.debug('%s return committer name:%s', method, name);\n    return committer;\n  }\n\n  /**\n   * Will return an array of {@link Committer} instances that have been\n   * assigned to this channel instance. Include a MSPID to only return committers\n   * in a specific organization.\n   *\n   * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n   * @return {Committer[]} the list of {@link Committer}s.\n   */\n  getCommitters(mspid) {\n    const method = `getCommitters[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return Channel._getServiceEndpoints(this.committers.values(), 'Committer', mspid);\n  }\n\n  /**\n   * Returns a {@link Eventer} instance with the given name.\n   * Will return a new instance. Does not check for existing instances\n   * and does not keep a reference to this instance.\n   *\n   * @param {string} name - The name of the Eventer.\n   * @param {string} [mspid] - Optional. The MSP id\n   * @returns {Eventer} The Eventer instance.\n   */\n  newEventer() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let mspid = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `newEventer: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    const eventer = new Eventer(name, this, mspid);\n    logger.debug('%s return new Eventer name:%s', method, name);\n    return eventer;\n  }\n\n  /**\n   * Returns a {@link Discoverer} instance with the given name.\n   * Will return a new instance. Does not check for existing instances\n   * and does not keep a reference to this instance.\n   *\n   * @param {string} name - The name of the Discoverer.\n   * @param {string} [mspid] - Optional. The MSP id\n   * @returns {Discoverer} The Discoverer instance.\n   */\n  newDiscoverer() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let mspid = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `newDiscoverer: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    const discoverer = new Discoverer(name, this, mspid);\n    logger.debug('%s return new Discoverer name:%s', method, name);\n    return discoverer;\n  }\n\n  /**\n   * Returns a {@link Channel} instance with the given name.\n   * Will return a new instance. Does not check for existing instances\n   * and does not keep a reference to this instance.\n   *\n   * @param {string} name The name of the channel.\n   * @returns {Channel} The channel instance.\n   */\n  newChannel() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    const method = `newChannel: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    const channel = new Channel(name, this);\n    logger.debug('%s return new channel name:%s', method, name);\n    return channel;\n  }\n\n  /**\n   * Returns a {@link Channel} instance with the given name.\n   * Will return an existing instance or create a new one and store\n   * a reference to this instance.\n   *\n   * @param {string} name The name of the channel.\n   * @returns {Channel} The channel instance.\n   */\n  getChannel() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    const method = `getChannel: ${this.name}`;\n    logger.debug('%s start name:%s', method, name);\n    let channel = this.channels.get(name);\n    if (!channel) {\n      logger.debug('%s create channel name:%s', method, name);\n      channel = new Channel(name, this);\n      this.channels.set(name, channel);\n    } else {\n      logger.debug('%s existing channel name:%s', method, name);\n    }\n    logger.debug('%s return channel name:%s', method, name);\n    return channel;\n  }\n\n  /**\n   * Sets the mutual TLS client side certificate and key necessary to build\n   * network endpoints when working with a common connection profile (connection profile).\n   * This must be called before a endorser, committer, or channel eventhub is needed.\n   *\n   * If the tls client material has not been provided for the client, it will be\n   * generated if the user has been assigned to this client. Note that it will\n   * always use the default software cryptosuite, not the one assigned to the\n   * client.\n   *\n   * @param {string} clientCert - The pem encoded client certificate.\n   * @param {byte[]} clientKey - The client key.\n   */\n  setTlsClientCertAndKey(clientCert, clientKey) {\n    const method = `setTlsClientCertAndKey: ${this.name}`;\n    logger.debug('%s - start', method);\n    if (clientCert && clientKey) {\n      this._tls_mutual.clientCert = clientCert;\n      this._tls_mutual.clientKey = clientKey;\n      this._tls_mutual.selfGenerated = false;\n    } else {\n      logger.debug('%s - generating self-signed TLS client certificate', method);\n      // generate X509 cert pair\n      // use the default software cryptosuite, not the client assigned cryptosuite, which may be\n      // HSM, or the default has been set to HSM. FABN-830\n      const key = newCryptoSuite({\n        software: true\n      }).generateEphemeralKey();\n      this._tls_mutual.clientKey = key.toBytes();\n      this._tls_mutual.clientCert = key.generateX509Certificate('/CN=fabric-common');\n      this._tls_mutual.selfGenerated = true;\n    }\n    return this;\n  }\n\n  /**\n   * Utility method to add the mutual tls client material to a set of options.\n   * @param {ConnectOptions} options - The options object holding the connection settings\n   *  that will be updated with the mutual TLS clientCert and clientKey.\n   * @throws Will throw an error if generating the tls client material fails\n   */\n  addTlsClientCertAndKey(options) {\n    // use client cert pair if it exists and is not a self cert generated by this class\n    if (!this._tls_mutual.selfGenerated && this._tls_mutual.clientCert && this._tls_mutual.clientKey) {\n      options.clientCert = this._tls_mutual.clientCert;\n      options.clientKey = this._tls_mutual.clientKey;\n    }\n    return this;\n  }\n\n  /*\n   * Get the client certificate hash\n   * @returns {byte[]} The hash of the client certificate\n   */\n  getClientCertHash() {\n    const method = `getClientCertHash: ${this.name}`;\n    logger.debug('%s - start', method);\n    if (this._tls_mutual.clientCertHash) {\n      return this._tls_mutual.clientCertHash;\n    }\n    if (this._tls_mutual.clientCert) {\n      logger.debug('%s - using clientCert %s', method, this._tls_mutual.clientCert);\n      const der_cert = pemToDER(this._tls_mutual.clientCert);\n      this._tls_mutual.clientCertHash = computeHash(der_cert);\n    } else {\n      logger.debug('%s - no tls client cert', method);\n    }\n    return this._tls_mutual.clientCertHash;\n  }\n\n  /**\n   * return a printable representation of this object\n   */\n  toString() {\n    return `Client: {name:${this.name}}`;\n  }\n\n  /**\n   * Adds a setting to override all settings that are part of the hierarchical configuration.\n   *\n   * @param {String} name - The name of a setting\n   * @param {Object} value - The value of a setting\n   */\n  static setConfigSetting(name, value) {\n    setConfigSetting(name, value);\n  }\n\n  // make available from the client instance\n  setConfigSetting(name, value) {\n    setConfigSetting(name, value);\n  }\n\n  /**\n   * Retrieves a setting from the hierarchical configuration and if not found\n   * will return the provided default value.\n   *\n   * <br><br>\n   * The hierarchical configuration settings search order for a setting <code>aa-bb</code>:\n   * <ol>\n   * <li> memory: if the setting has been added with <pre>Client.setConfigSetting('aa-bb', 'value')</pre>\n   * <li> Command-line arguments: like <pre>node app.js --aa-bb value</pre>\n   * <li> Environment variables: <pre>AA_BB=value node app.js</pre>\n   * <li> Custom Files: all files added with <code>addConfigFile(path)</code>\n   *     will be ordered by when added, where same settings in the files added later will override those added earlier\n   * <li> The file located at <code>lib/config/default.json</code> with default settings\n   *\n   * @param {String} name - The name of a setting\n   * @param {Object} default_value - The value of a setting if not found in the hierarchical configuration\n   */\n  static getConfigSetting(name, default_value) {\n    return getConfigSetting(name, default_value);\n  }\n\n  // make available from the client instance\n  getConfigSetting(name, default_value) {\n    return getConfigSetting(name, default_value);\n  }\n  close() {\n    this.endorsers.forEach(endorser => {\n      endorser.disconnect();\n    });\n    this.endorsers.clear();\n    this.committers.forEach(committer => {\n      committer.disconnect();\n    });\n    this.committers.clear();\n    this.channels.forEach(channel => {\n      channel.close();\n    });\n    this.channels.clear();\n  }\n};\nfunction computeHash(data) {\n  const sha256 = crypto.createHash('sha256');\n  return sha256.update(data).digest();\n}\nmodule.exports = Client;","map":{"version":3,"names":["TYPE","crypto","require","checkParameter","getLogger","pemToDER","setConfigSetting","getConfigSetting","newCryptoSuite","Channel","Endpoint","Committer","Endorser","Eventer","Discoverer","IdentityContext","logger","Client","constructor","name","arguments","length","undefined","debug","type","mspid","_tls_mutual","selfGenerated","endorsers","Map","committers","channels","centralizedOptions","newClient","newIdentityContext","user","getConnectionOptions","options","method","return_options","Object","assign","clientCert","clientKey","setCentralizedConnectionOptions","JSON","stringify","newEndpoint","_options","ssl_target_name_override","timeout","Number","isInteger","Error","requestTimeout","endpoint","url","newEndorser","endorser","getEndorser","get","set","getEndorsers","_getServiceEndpoints","values","newCommitter","committer","getCommitter","getCommitters","newEventer","eventer","newDiscoverer","discoverer","newChannel","channel","getChannel","setTlsClientCertAndKey","key","software","generateEphemeralKey","toBytes","generateX509Certificate","addTlsClientCertAndKey","getClientCertHash","clientCertHash","der_cert","computeHash","toString","value","default_value","close","forEach","disconnect","clear","data","sha256","createHash","update","digest","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Client.js"],"sourcesContent":["/*\n * Copyright 2019, 2020 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Client';\n\nconst crypto = require('crypto');\n\nconst {checkParameter, getLogger, pemToDER, setConfigSetting, getConfigSetting, newCryptoSuite} = require('./Utils.js');\nconst Channel = require('./Channel');\nconst Endpoint = require('./Endpoint');\nconst Committer = require('./Committer');\nconst Endorser = require('./Endorser');\nconst Eventer = require('./Eventer');\nconst Discoverer = require('./Discoverer');\nconst IdentityContext = require('./IdentityContext');\nconst logger = getLogger(TYPE);\n\n/**\n * @classdesc\n * This class represents a Client, the central place\n * for connection and config information.\n *\n * @class\n */\nconst Client = class {\n\n\t/**\n\t * Construct a Client object.\n\t *\n\t * @param {string} name - The name of the client.\n\t *\n\t * @returns {Client} The Client instance.\n\t */\n\tconstructor(name = checkParameter('name')) {\n\t\tlogger.debug(`${TYPE}.constructor[${name}] - start `);\n\t\tthis.type = TYPE;\n\n\t\tthis.name = name;\n\t\tthis.mspid = null;\n\n\t\tthis._tls_mutual = {};\n\t\tthis._tls_mutual.selfGenerated = false;\n\n\t\tthis.endorsers = new Map();\n\t\tthis.committers = new Map();\n\t\tthis.channels = new Map();\n\n\t\t// options for centralized management\n\t\tthis.centralizedOptions = null;\n\t}\n\n\t/**\n\t * Construct a Client object.\n\t *\n\t * @param {string} name - The name of the client.\n\t */\n\tstatic newClient(name) {\n\t\treturn new Client(name);\n\t}\n\n\t/**\n\t * Builds an {@link IdentityContext} instance with the given user.\n\t * Will be used when building proposals, commits, and queries.\n\t * @param {User} [user] instance\n\t */\n\tnewIdentityContext(user = checkParameter('user')) {\n\t\treturn new IdentityContext(user, this);\n\t}\n\n\t/**\n\t * @typedef {Object} ConnectOptions\n\t * @property {string} url The committer URL with format of 'grpc(s)://host:port'.\n\t * @property {string} pem - The Endorser's TLS certificate, in PEM format,\n\t *  to use with the grpcs protocol.\n\t * @property {string} [clientKey] - Optional. The client private key, in PEM format,\n\t *  to use with the grpcs protocol and mutual TLS. When not provided, the key\n\t *  assigned to this client instance will be used.\n\t * @property {string} clientCert - The public certificate, in PEM format,\n\t *  to use with the grpcs protocol and mutual TLS. When not provided the cert\n\t *  assigned to this client instance will be used.\n\t * @property {Number} requestTimeout - The timeout to use for request on this\n\t *  connection.\n\t * @property {string} ssl-target-name-override - Used in test environment only,\n\t *  when the server certificate's hostname (in the 'CN' field) does not match\n\t *  the actual host endpoint that the server process runs at, the application\n\t *  can work around the client TLS verify failure by setting this property to\n\t *  the value of the server certificate's hostname\n\t * @property {string} * - include any grpc options. These will be passed to\n\t *  the grpc service. A grpc option must have a string key and integer or\n\t *  string value.\n\t */\n\n\t/**\n\t * Utility method to merge connection options. The tls mutual and\n\t * default connection options from the config will not override any passed\n\t * in settings of the same name.\n\t *\n\t * @param {ConnectOptions} options - The object holding the application options\n\t * that will be merged on top of this client's options.\n\t * @returns {object} - The object holding both the application's options\n\t *  and this client's options.\n\t */\n\tgetConnectionOptions(options) {\n\t\tconst method = `getConnectionOptions: ${this.name}`;\n\t\tlogger.debug('%s - start', method);\n\n\t\t// start with options from the config system (mainly config/default.json)\n\t\tlet return_options = Object.assign({}, getConfigSetting('connection-options'));\n\n\t\t// override with any centralized options\n\t\tif (this.centralizedOptions) {\n\t\t\tlogger.debug('%s - adding centralized options:%s', method, this.centralizedOptions);\n\t\t\treturn_options = Object.assign(return_options, this.centralizedOptions);\n\t\t} else {\n\t\t\tlogger.debug('%s - no centralized options', method);\n\t\t}\n\n\t\t// apply the tls info\n\t\tif (this._tls_mutual.clientCert && this._tls_mutual.clientKey) {\n\t\t\treturn_options.clientCert = this._tls_mutual.clientCert;\n\t\t\treturn_options.clientKey = this._tls_mutual.clientKey;\n\t\t}\n\n\t\t// now finally override with any specific options for this\n\t\t// connection\n\t\treturn_options = Object.assign(return_options, options);\n\n\t\treturn return_options;\n\t}\n\n\t/**\n\t * Utility method to set the connection options required by this Client (application).\n\t * These will be merged into new endpoints as this client creates new endpoints.\n\t * Options provided here will override the default 'conection-options' from the\n\t * config file ./config/default.json.\n\t * @example {\n\t\t\"grpc.max_receive_message_length\": -1,\n\t\t\"grpc.max_send_message_length\": -1,\n\t\t\"grpc.keepalive_time_ms\": 120000,\n \t\t\"grpc.http2.min_time_between_pings_ms\": 120000,\n\t\t\"grpc.keepalive_timeout_ms\": 20000,\n\t\t\"grpc.http2.max_pings_without_data\": 0,\n\t\t\"grpc.keepalive_permit_without_calls\": 1,\n\t\t\"grpc-wait-for-ready-timeout\": 3000,\n\t\t\"request-timeout\" : 45000\n\t }\n\t * @param {object} options - The options to be used by gRPC connections.\n\t * @returns {Client} The Client instance.\n\t */\n\tsetCentralizedConnectionOptions(options) {\n\t\tconst method = `setCentralizedConnectionOptions: ${this.name} `;\n\t\tlogger.debug('%s - start %s', method, JSON.stringify(options));\n\t\tthis.centralizedOptions = options;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Use this method to build an endpoint options object. This may be reused\n\t * when connecting to endorsers, committers, discovers and eventers. The input\n\t * opts must have an \"url\" for connecting to a fabric service.\n\t * @param {ConnectOptions} options\n\t */\n\tnewEndpoint(options = {}) {\n\t\tconst method = `newEndpoint: ${this.name}`;\n\t\tlogger.debug('%s - start', method);\n\n\t\tconst _options = this.getConnectionOptions(options);\n\t\tconst ssl_target_name_override = _options['ssl-target-name-override'];\n\n\t\t// make sure we have wait for ready timeout\n\t\tconst timeout = _options['grpc-wait-for-ready-timeout'];\n\t\tif (!timeout) {\n\t\t\t_options['grpc-wait-for-ready-timeout'] = 3000; // default 3 seconds\n\t\t} else {\n\t\t\tif (Number.isInteger(timeout)) {\n\t\t\t\tlogger.debug('%s grpc-wait-for-ready-timeout set to %s', method, timeout);\n\t\t\t} else {\n\t\t\t\tthrow Error(`invalid grpc-wait-for-ready-timeout :: ${timeout}`);\n\t\t\t}\n\t\t}\n\n\t\t// make sure we have wait for request timeout\n\t\tconst requestTimeout = _options.requestTimeout;\n\t\tif (!requestTimeout) {\n\t\t\t_options.requestTimeout = 3000; // default 3 seconds\n\t\t} else {\n\t\t\tif (Number.isInteger(requestTimeout)) {\n\t\t\t\tlogger.debug('%s requestTimeout set to %s', method, requestTimeout);\n\t\t\t} else {\n\t\t\t\tthrow Error(`invalid requestTimeout :: ${requestTimeout}`);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof ssl_target_name_override === 'string') {\n\t\t\t_options['grpc.ssl_target_name_override'] = ssl_target_name_override;\n\t\t\t_options['grpc.default_authority'] = ssl_target_name_override;\n\t\t\tlogger.debug('%s - ssl_target_name_override: %s', method, ssl_target_name_override);\n\t\t}\n\t\tconst endpoint = new Endpoint(_options);\n\t\tlogger.debug('new endpoint url: %s', _options.url);\n\n\t\treturn endpoint;\n\t}\n\n\t/**\n\t * Returns a {@link Endorser} instance with the given name.\n\t * Will return a new instance. Does not check for existing instances\n\t * and does not keep a reference to this instance.\n\t *\n\t * @param {string} name - The name of the endorser.\n\t * @param {string} [mspid] - Optional. The MSP id\n\t * @returns {Endorser} The endorser instance.\n\t */\n\tnewEndorser(name = checkParameter('name'), mspid) {\n\t\tconst method = `newEndorser: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tconst endorser = new Endorser(name, this, mspid);\n\n\t\tlogger.debug('%s return new endorser name:%s', method, name);\n\t\treturn endorser;\n\t}\n\n\t/**\n\t * Returns a {@link Endorser} instance with the given name.\n\t * Will return an existing instance if one exist or it will\n\t * create a new instance and save a reference.\n\t *\n\t * @param {string} name - The name of the endorser.\n\t * @param {string} [mspid] - Optional. The MSP id\n\t * @returns {Endorser} The endorser instance.\n\t */\n\tgetEndorser(name = checkParameter('name'), mspid) {\n\t\tconst method = `getEndorser: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tlet endorser = this.endorsers.get(name);\n\t\tif (!endorser) {\n\t\t\tlogger.debug('%s create endorser name:%s', method, name);\n\t\t\tendorser = new Endorser(name, this, mspid);\n\t\t\tthis.endorsers.set(name, endorser);\n\t\t} else {\n\t\t\tlogger.debug('%s existing endorser name:%s', method, name);\n\t\t}\n\n\t\tlogger.debug('%s return endorser name:%s', method, name);\n\t\treturn endorser;\n\t}\n\n\t/**\n\t * Will return an array of {@link Endorser} instances that have been\n\t * created by this client instance. Include a MSPID to only return endorsers\n\t * in a specific organization.\n\t *\n\t * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n\t * @return {Endorser[]} the list of {@link Endorser}s.\n\t */\n\tgetEndorsers(mspid) {\n\t\tconst method = `getEndorsers[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\treturn Channel._getServiceEndpoints(this.endorsers.values(), 'Endorser', mspid);\n\t}\n\n\t/**\n\t * Returns a {@link Committer} instance with the given name.\n\t * Will return a new instance. Does not check for existing instances\n\t * and does not keep a reference to this instance.\n\t *\n\t * @param {string} name - The name of the Committer.\n\t * @param {string} [mspid] - Optional. The MSP id\n\t * @returns {Committer} The committer instance.\n\t */\n\tnewCommitter(name = checkParameter('name'), mspid) {\n\t\tconst method = `newCommitter: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tconst committer = new Committer(name, this, mspid);\n\n\t\tlogger.debug('%s return new committer name:%s', method, name);\n\t\treturn committer;\n\t}\n\n\t/**\n\t * Returns a {@link Committer} instance with the given name.\n\t * Will return an existing instance if one exist or it will\n\t * create a new instance and save a reference.\n\t *\n\t * @param {string} name - The name of the committer.\n\t * @param {string} [mspid] - Optional. The MSP id\n\t * @returns {Committer} The committer instance.\n\t */\n\tgetCommitter(name = checkParameter('name'), mspid) {\n\t\tconst method = `getCommitter: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tlet committer = this.committers.get(name);\n\t\tif (!committer) {\n\t\t\tlogger.debug('%s create committer name:%s', method, name);\n\t\t\tcommitter = new Committer(name, this, mspid);\n\t\t\tthis.committers.set(name, committer);\n\t\t} else {\n\t\t\tlogger.debug('%s existing committer name:%s', method, name);\n\t\t}\n\n\t\tlogger.debug('%s return committer name:%s', method, name);\n\t\treturn committer;\n\t}\n\n\t/**\n\t * Will return an array of {@link Committer} instances that have been\n\t * assigned to this channel instance. Include a MSPID to only return committers\n\t * in a specific organization.\n\t *\n\t * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n\t * @return {Committer[]} the list of {@link Committer}s.\n\t */\n\tgetCommitters(mspid) {\n\t\tconst method = `getCommitters[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\treturn Channel._getServiceEndpoints(this.committers.values(), 'Committer', mspid);\n\t}\n\n\t/**\n\t * Returns a {@link Eventer} instance with the given name.\n\t * Will return a new instance. Does not check for existing instances\n\t * and does not keep a reference to this instance.\n\t *\n\t * @param {string} name - The name of the Eventer.\n\t * @param {string} [mspid] - Optional. The MSP id\n\t * @returns {Eventer} The Eventer instance.\n\t */\n\tnewEventer(name = checkParameter('name'), mspid) {\n\t\tconst method = `newEventer: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tconst eventer = new Eventer(name, this, mspid);\n\n\t\tlogger.debug('%s return new Eventer name:%s', method, name);\n\t\treturn eventer;\n\t}\n\n\t/**\n\t * Returns a {@link Discoverer} instance with the given name.\n\t * Will return a new instance. Does not check for existing instances\n\t * and does not keep a reference to this instance.\n\t *\n\t * @param {string} name - The name of the Discoverer.\n\t * @param {string} [mspid] - Optional. The MSP id\n\t * @returns {Discoverer} The Discoverer instance.\n\t */\n\tnewDiscoverer(name = checkParameter('name'), mspid) {\n\t\tconst method = `newDiscoverer: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tconst discoverer = new Discoverer(name, this, mspid);\n\n\t\tlogger.debug('%s return new Discoverer name:%s', method, name);\n\t\treturn discoverer;\n\t}\n\n\t/**\n\t * Returns a {@link Channel} instance with the given name.\n\t * Will return a new instance. Does not check for existing instances\n\t * and does not keep a reference to this instance.\n\t *\n\t * @param {string} name The name of the channel.\n\t * @returns {Channel} The channel instance.\n\t */\n\tnewChannel(name = checkParameter('name')) {\n\t\tconst method = `newChannel: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tconst channel = new Channel(name, this);\n\n\t\tlogger.debug('%s return new channel name:%s', method, name);\n\t\treturn channel;\n\t}\n\n\t/**\n\t * Returns a {@link Channel} instance with the given name.\n\t * Will return an existing instance or create a new one and store\n\t * a reference to this instance.\n\t *\n\t * @param {string} name The name of the channel.\n\t * @returns {Channel} The channel instance.\n\t */\n\tgetChannel(name = checkParameter('name')) {\n\t\tconst method = `getChannel: ${this.name}`;\n\t\tlogger.debug('%s start name:%s', method, name);\n\n\t\tlet channel = this.channels.get(name);\n\t\tif (!channel) {\n\t\t\tlogger.debug('%s create channel name:%s', method, name);\n\t\t\tchannel = new Channel(name, this);\n\t\t\tthis.channels.set(name, channel);\n\t\t} else {\n\t\t\tlogger.debug('%s existing channel name:%s', method, name);\n\t\t}\n\n\t\tlogger.debug('%s return channel name:%s', method, name);\n\t\treturn channel;\n\t}\n\n\t/**\n\t * Sets the mutual TLS client side certificate and key necessary to build\n\t * network endpoints when working with a common connection profile (connection profile).\n\t * This must be called before a endorser, committer, or channel eventhub is needed.\n\t *\n\t * If the tls client material has not been provided for the client, it will be\n\t * generated if the user has been assigned to this client. Note that it will\n\t * always use the default software cryptosuite, not the one assigned to the\n\t * client.\n\t *\n\t * @param {string} clientCert - The pem encoded client certificate.\n\t * @param {byte[]} clientKey - The client key.\n\t */\n\tsetTlsClientCertAndKey(clientCert, clientKey) {\n\t\tconst method = `setTlsClientCertAndKey: ${this.name}`;\n\t\tlogger.debug('%s - start', method);\n\t\tif (clientCert && clientKey) {\n\t\t\tthis._tls_mutual.clientCert = clientCert;\n\t\t\tthis._tls_mutual.clientKey = clientKey;\n\t\t\tthis._tls_mutual.selfGenerated = false;\n\t\t} else {\n\t\t\tlogger.debug('%s - generating self-signed TLS client certificate', method);\n\t\t\t// generate X509 cert pair\n\t\t\t// use the default software cryptosuite, not the client assigned cryptosuite, which may be\n\t\t\t// HSM, or the default has been set to HSM. FABN-830\n\t\t\tconst key = newCryptoSuite({software: true}).generateEphemeralKey();\n\t\t\tthis._tls_mutual.clientKey = key.toBytes();\n\t\t\tthis._tls_mutual.clientCert = key.generateX509Certificate('/CN=fabric-common');\n\t\t\tthis._tls_mutual.selfGenerated = true;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Utility method to add the mutual tls client material to a set of options.\n\t * @param {ConnectOptions} options - The options object holding the connection settings\n\t *  that will be updated with the mutual TLS clientCert and clientKey.\n\t * @throws Will throw an error if generating the tls client material fails\n\t */\n\taddTlsClientCertAndKey(options) {\n\t\t// use client cert pair if it exists and is not a self cert generated by this class\n\t\tif (!this._tls_mutual.selfGenerated && this._tls_mutual.clientCert && this._tls_mutual.clientKey) {\n\t\t\toptions.clientCert = this._tls_mutual.clientCert;\n\t\t\toptions.clientKey = this._tls_mutual.clientKey;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/*\n\t * Get the client certificate hash\n\t * @returns {byte[]} The hash of the client certificate\n\t */\n\tgetClientCertHash() {\n\t\tconst method = `getClientCertHash: ${this.name}`;\n\t\tlogger.debug('%s - start', method);\n\t\tif (this._tls_mutual.clientCertHash) {\n\t\t\treturn this._tls_mutual.clientCertHash;\n\t\t}\n\n\t\tif (this._tls_mutual.clientCert) {\n\t\t\tlogger.debug('%s - using clientCert %s', method, this._tls_mutual.clientCert);\n\t\t\tconst der_cert = pemToDER(this._tls_mutual.clientCert);\n\t\t\tthis._tls_mutual.clientCertHash = computeHash(der_cert);\n\t\t} else {\n\t\t\tlogger.debug('%s - no tls client cert', method);\n\t\t}\n\n\t\treturn this._tls_mutual.clientCertHash;\n\t}\n\n\t/**\n\t * return a printable representation of this object\n\t */\n\ttoString() {\n\t\treturn `Client: {name:${this.name}}`;\n\t}\n\n\t/**\n\t * Adds a setting to override all settings that are part of the hierarchical configuration.\n\t *\n\t * @param {String} name - The name of a setting\n\t * @param {Object} value - The value of a setting\n\t */\n\tstatic setConfigSetting(name, value) {\n\t\tsetConfigSetting(name, value);\n\t}\n\n\t// make available from the client instance\n\tsetConfigSetting(name, value) {\n\t\tsetConfigSetting(name, value);\n\t}\n\n\t/**\n\t * Retrieves a setting from the hierarchical configuration and if not found\n\t * will return the provided default value.\n\t *\n\t * <br><br>\n\t * The hierarchical configuration settings search order for a setting <code>aa-bb</code>:\n\t * <ol>\n\t * <li> memory: if the setting has been added with <pre>Client.setConfigSetting('aa-bb', 'value')</pre>\n\t * <li> Command-line arguments: like <pre>node app.js --aa-bb value</pre>\n\t * <li> Environment variables: <pre>AA_BB=value node app.js</pre>\n\t * <li> Custom Files: all files added with <code>addConfigFile(path)</code>\n\t *     will be ordered by when added, where same settings in the files added later will override those added earlier\n\t * <li> The file located at <code>lib/config/default.json</code> with default settings\n\t *\n\t * @param {String} name - The name of a setting\n\t * @param {Object} default_value - The value of a setting if not found in the hierarchical configuration\n\t */\n\tstatic getConfigSetting(name, default_value) {\n\n\t\treturn getConfigSetting(name, default_value);\n\t}\n\n\t// make available from the client instance\n\tgetConfigSetting(name, default_value) {\n\n\t\treturn getConfigSetting(name, default_value);\n\t}\n\n\tclose() {\n\t\tthis.endorsers.forEach(endorser => {\n\t\t\tendorser.disconnect();\n\t\t});\n\t\tthis.endorsers.clear();\n\t\tthis.committers.forEach(committer => {\n\t\t\tcommitter.disconnect();\n\t\t});\n\t\tthis.committers.clear();\n\t\tthis.channels.forEach(channel => {\n\t\t\tchannel.close();\n\t\t});\n\t\tthis.channels.clear();\n\t}\n};\n\nfunction computeHash(data) {\n\tconst sha256 = crypto.createHash('sha256');\n\treturn sha256.update(data).digest();\n}\n\nmodule.exports = Client;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}