{"ast":null,"code":"/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst CryptoAlgorithms = {\n  // ECDSA Elliptic Curve Digital Signature Algorithm (key gen, import, sign, verify),\n  // at default security level.\n  // Each BCCSP may or may not support default security level. If not supported than\n  // an error will be returned.\n  ECDSA: 'ECDSA',\n  // ECDSA Elliptic Curve Digital Signature Algorithm over P-256 curve\n  ECDSAP256: 'ECDSAP256',\n  // ECDSA Elliptic Curve Digital Signature Algorithm over P-384 curve\n  ECDSAP384: 'ECDSAP384',\n  // ECDSAReRand ECDSA key re-randomization\n  ECDSAReRand: 'ECDSA_RERAND',\n  // RSA at the default security level.\n  // Each BCCSP may or may not support default security level. If not supported than\n  // an error will be returned.\n  RSA: 'RSA',\n  // RSA at 1024 bit security level.\n  RSA1024: 'RSA1024',\n  // RSA at 2048 bit security level.\n  RSA2048: 'RSA2048',\n  // RSA at 3072 bit security level.\n  RSA3072: 'RSA3072',\n  // RSA at 4096 bit security level.\n  RSA4096: 'RSA4096',\n  // AES Advanced Encryption Standard at the default security level.\n  // Each BCCSP may or may not support default security level. If not supported than\n  // an error will be returned.\n  AES: 'AES',\n  // AES Advanced Encryption Standard at 128 bit security level\n  AES128: 'AES128',\n  // AES Advanced Encryption Standard at 192 bit security level\n  AES192: 'AES192',\n  // AES Advanced Encryption Standard at 256 bit security level\n  AES256: 'AES256',\n  // HMAC keyed-hash message authentication code\n  HMAC: 'HMAC',\n  // HMACTruncated256 HMAC truncated at 256 bits.\n  HMACTruncated256: 'HMAC_TRUNCATED_256',\n  // SHA Secure Hash Algorithm using default family.\n  // Each BCCSP may or may not support default security level. If not supported than\n  // an error will be returned.\n  SHA: 'SHA',\n  // SHA256\n  SHA256: 'SHA256',\n  // SHA384\n  SHA384: 'SHA384',\n  // SHA256\n  SHA2_256: 'SHA256',\n  // SHA384\n  SHA2_384: 'SHA384',\n  // SHA3_256\n  SHA3_256: 'SHA3_256',\n  // SHA3_384\n  SHA3_384: 'SHA3_384',\n  // X509Certificate Label for X509 certificate related operation\n  X509Certificate: 'X509Certificate'\n};\nmodule.exports = CryptoAlgorithms;","map":{"version":3,"names":["CryptoAlgorithms","ECDSA","ECDSAP256","ECDSAP384","ECDSAReRand","RSA","RSA1024","RSA2048","RSA3072","RSA4096","AES","AES128","AES192","AES256","HMAC","HMACTruncated256","SHA","SHA256","SHA384","SHA2_256","SHA2_384","SHA3_256","SHA3_384","X509Certificate","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/CryptoAlgorithms.js"],"sourcesContent":["/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst CryptoAlgorithms = {\n\t// ECDSA Elliptic Curve Digital Signature Algorithm (key gen, import, sign, verify),\n\t// at default security level.\n\t// Each BCCSP may or may not support default security level. If not supported than\n\t// an error will be returned.\n\tECDSA: 'ECDSA',\n\t// ECDSA Elliptic Curve Digital Signature Algorithm over P-256 curve\n\tECDSAP256: 'ECDSAP256',\n\t// ECDSA Elliptic Curve Digital Signature Algorithm over P-384 curve\n\tECDSAP384: 'ECDSAP384',\n\t// ECDSAReRand ECDSA key re-randomization\n\tECDSAReRand: 'ECDSA_RERAND',\n\n\t// RSA at the default security level.\n\t// Each BCCSP may or may not support default security level. If not supported than\n\t// an error will be returned.\n\tRSA: 'RSA',\n\t// RSA at 1024 bit security level.\n\tRSA1024: 'RSA1024',\n\t// RSA at 2048 bit security level.\n\tRSA2048: 'RSA2048',\n\t// RSA at 3072 bit security level.\n\tRSA3072: 'RSA3072',\n\t// RSA at 4096 bit security level.\n\tRSA4096: 'RSA4096',\n\n\t// AES Advanced Encryption Standard at the default security level.\n\t// Each BCCSP may or may not support default security level. If not supported than\n\t// an error will be returned.\n\tAES: 'AES',\n\t// AES Advanced Encryption Standard at 128 bit security level\n\tAES128: 'AES128',\n\t// AES Advanced Encryption Standard at 192 bit security level\n\tAES192: 'AES192',\n\t// AES Advanced Encryption Standard at 256 bit security level\n\tAES256: 'AES256',\n\n\t// HMAC keyed-hash message authentication code\n\tHMAC: 'HMAC',\n\t// HMACTruncated256 HMAC truncated at 256 bits.\n\tHMACTruncated256: 'HMAC_TRUNCATED_256',\n\n\t// SHA Secure Hash Algorithm using default family.\n\t// Each BCCSP may or may not support default security level. If not supported than\n\t// an error will be returned.\n\tSHA: 'SHA',\n\t// SHA256\n\tSHA256: 'SHA256',\n\t// SHA384\n\tSHA384: 'SHA384',\n\t// SHA256\n\tSHA2_256: 'SHA256',\n\t// SHA384\n\tSHA2_384: 'SHA384',\n\t// SHA3_256\n\tSHA3_256: 'SHA3_256',\n\t// SHA3_384\n\tSHA3_384: 'SHA3_384',\n\n\t// X509Certificate Label for X509 certificate related operation\n\tX509Certificate: 'X509Certificate'\n};\n\nmodule.exports = CryptoAlgorithms;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,gBAAgB,GAAG;EACxB;EACA;EACA;EACA;EACAC,KAAK,EAAE,OAAO;EACd;EACAC,SAAS,EAAE,WAAW;EACtB;EACAC,SAAS,EAAE,WAAW;EACtB;EACAC,WAAW,EAAE,cAAc;EAE3B;EACA;EACA;EACAC,GAAG,EAAE,KAAK;EACV;EACAC,OAAO,EAAE,SAAS;EAClB;EACAC,OAAO,EAAE,SAAS;EAClB;EACAC,OAAO,EAAE,SAAS;EAClB;EACAC,OAAO,EAAE,SAAS;EAElB;EACA;EACA;EACAC,GAAG,EAAE,KAAK;EACV;EACAC,MAAM,EAAE,QAAQ;EAChB;EACAC,MAAM,EAAE,QAAQ;EAChB;EACAC,MAAM,EAAE,QAAQ;EAEhB;EACAC,IAAI,EAAE,MAAM;EACZ;EACAC,gBAAgB,EAAE,oBAAoB;EAEtC;EACA;EACA;EACAC,GAAG,EAAE,KAAK;EACV;EACAC,MAAM,EAAE,QAAQ;EAChB;EACAC,MAAM,EAAE,QAAQ;EAChB;EACAC,QAAQ,EAAE,QAAQ;EAClB;EACAC,QAAQ,EAAE,QAAQ;EAClB;EACAC,QAAQ,EAAE,UAAU;EACpB;EACAC,QAAQ,EAAE,UAAU;EAEpB;EACAC,eAAe,EAAE;AAClB,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGzB,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}