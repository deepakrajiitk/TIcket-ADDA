{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2020 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommitListenerSession = void 0;\nconst Logger = __importStar(require(\"../../logger\"));\nconst commiteventfactory_1 = require(\"./commiteventfactory\");\nconst logger = Logger.getLogger('CommitListenerSession');\nclass CommitListenerSession {\n  constructor(listener, eventServiceManager, endorsers, transactionId) {\n    this.endorsers = {};\n    this.eventListeners = [];\n    this.listener = listener;\n    this.eventServiceManager = eventServiceManager;\n    this.eventServices = endorsers.map(endorser => eventServiceManager.getCommitEventService(endorser));\n    this.transactionId = transactionId;\n    for (const endorser of endorsers) {\n      this.endorsers[endorser.name] = endorser;\n    }\n  }\n  async start() {\n    const startErrors = await this.registerTransactionListeners();\n    // Notify listeners of errors after all registrations are complete so listeners can remove themselves in response\n    for (const error of startErrors) {\n      this.listener(error, undefined);\n    }\n  }\n  close() {\n    for (const eventListener of this.eventListeners) {\n      eventListener.unregisterEventListener();\n    }\n  }\n  async registerTransactionListeners() {\n    const startErrors = [];\n    for (const eventService of this.eventServices) {\n      const error = await this.startEventService(eventService);\n      if (error) {\n        startErrors.push(error);\n      } else {\n        // Only register listener for event services that start successfully\n        const eventListener = this.registerTransactionListener(eventService);\n        this.eventListeners.push(eventListener);\n      }\n    }\n    return startErrors;\n  }\n  async startEventService(eventService) {\n    try {\n      await this.eventServiceManager.startEventService(eventService);\n    } catch (error) {\n      const commitError = error;\n      commitError.peer = this.getEndorserForEventService(eventService);\n      return commitError;\n    }\n  }\n  getEndorserForEventService(eventService) {\n    return this.endorsers[eventService.name];\n  }\n  registerTransactionListener(eventService) {\n    const peer = this.getEndorserForEventService(eventService);\n    const callback = (error, event) => {\n      const commitError = error ? Object.assign(error, {\n        peer\n      }) : undefined;\n      const commitEvent = event ? (0, commiteventfactory_1.newCommitEvent)(peer, event) : undefined;\n      this.notifyListener(commitError, commitEvent);\n    };\n    const registrationOptions = {\n      unregister: false\n    };\n    return eventService.registerTransactionListener(this.transactionId, callback, registrationOptions);\n  }\n  notifyListener(commitError, commitEvent) {\n    try {\n      this.listener(commitError, commitEvent);\n    } catch (error) {\n      logger.warn('Error notifying listener:', error);\n    }\n  }\n}\nexports.CommitListenerSession = CommitListenerSession;","map":{"version":3,"names":["Logger","__importStar","require","commiteventfactory_1","logger","getLogger","CommitListenerSession","constructor","listener","eventServiceManager","endorsers","transactionId","eventListeners","eventServices","map","endorser","getCommitEventService","name","start","startErrors","registerTransactionListeners","error","undefined","close","eventListener","unregisterEventListener","eventService","startEventService","push","registerTransactionListener","commitError","peer","getEndorserForEventService","callback","event","Object","assign","commitEvent","newCommitEvent","notifyListener","registrationOptions","unregister","warn","exports"],"sources":["../../../src/impl/event/commitlistenersession.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}