{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Commit';\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst logger = getLogger(TYPE);\nconst Proposal = require('./Proposal.js');\nconst fabproto6 = require('fabric-protos');\n\n/**\n * @classdesc\n * This class represents an Commit definition.\n * This class allows an application to contain all proposal attributes and\n * artifacts in one place during an endorsement commit.\n *\n * @class\n */\nclass Commit extends Proposal {\n  /**\n   * Construct a Proposal object.\n   *\n   * @param {string} chaincodeId - The chaincode this proposal will execute\n   * @param {Channel} channel - The channel of this proposal\n   * @returns {Proposal} The Proposal instance.\n   */\n  constructor() {\n    let chaincodeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('chaincodeId');\n    let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('channel');\n    let endorsement = arguments.length > 2 ? arguments[2] : undefined;\n    super(chaincodeId, channel);\n    const method = `constructor[${chaincodeId}]`;\n    logger.debug('%s - start', method);\n    this.type = TYPE;\n    this._endorsement = endorsement;\n  }\n\n  /**\n   * @typedef {Object} CommitBuildRequest\n   * @property {Endorsement} endorsement - Required. The Endorsement\n   *  that will be committed.\n   */\n  /**\n   * This method is used to build the protobuf objects of the commit.\n   * The commit must next be signed before being sent to be committed.\n   * @param {IdentityContext} [idContext] - The context is not used\n   *  and is only specified here to be consistent with other ServiceAction\n   *  build method calls.\n   * @param {CommitBuildRequest} request - The commit options of the request.\n   * @returns {byte[]} The commits payload bytes to be signed.\n   */\n  build() {\n    let idContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('idContext');\n    let request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = `build[${this.chaincodeId}]`;\n    logger.debug('%s - start - %s', method, idContext.name);\n    if (request.endorsement) {\n      this._endorsement = request.endorsement;\n    }\n    if (!this._endorsement) {\n      checkParameter('endorsement');\n    }\n    if (!this._endorsement._proposalResponses) {\n      throw Error('Proposal has not been endorsed');\n    }\n    this._reset();\n    const endorsements = [];\n    for (const proposalResponse of this._endorsement._proposalResponses) {\n      if (proposalResponse && proposalResponse.response && proposalResponse.endorsement) {\n        logger.debug('%s - proposalResponse endorsement added to commit:', method, proposalResponse.status);\n        endorsements.push(proposalResponse.endorsement);\n      } else {\n        logger.debug('%s - proposalResponse endorsement not added to commit:', method, proposalResponse.status);\n      }\n    }\n    if (endorsements.length < 1) {\n      logger.error('%s - no valid endorsements found', method);\n      throw new Error('No valid endorsements found');\n    }\n    const proposalResponse = this._endorsement._proposalResponses[0];\n    const chaincodeEndorsedAction = fabproto6.protos.ChaincodeEndorsedAction.create({\n      proposal_response_payload: proposalResponse.payload,\n      endorsements: endorsements\n    });\n\n    // the TransientMap field inside the original proposal payload is only meant for the\n    // endorsers to use from inside the chaincode. This must be taken out before sending\n    // to the committer, otherwise the transaction will be rejected by the validators when\n    // it compares the proposal hash calculated by the endorsers and returned in the\n    // proposal response, which was calculated without the TransientMap\n    const originalChaincodeProposalPayload = fabproto6.protos.ChaincodeProposalPayload.decode(this._endorsement._action.proposal.payload);\n    const chaincodeProposalPayloadNoTrans = fabproto6.protos.ChaincodeProposalPayload.create({\n      input: originalChaincodeProposalPayload.input // only set the input field, skipping the TransientMap\n    });\n\n    const chaincodeProposalPayloadNoTransBuf = fabproto6.protos.ChaincodeProposalPayload.encode(chaincodeProposalPayloadNoTrans).finish();\n    const chaincodeActionPayload = fabproto6.protos.ChaincodeActionPayload.create({\n      action: chaincodeEndorsedAction,\n      chaincode_proposal_payload: chaincodeProposalPayloadNoTransBuf\n    });\n    const chaincodeActionPayloadBuf = fabproto6.protos.ChaincodeActionPayload.encode(chaincodeActionPayload).finish();\n    const transactionAction = fabproto6.protos.TransactionAction.create({\n      header: this._endorsement._action.header.signature_header,\n      payload: chaincodeActionPayloadBuf\n    });\n    const actions = [];\n    actions.push(transactionAction);\n    const transaction = fabproto6.protos.Transaction.create({\n      actions: actions\n    });\n    const transactionBuf = fabproto6.protos.Transaction.encode(transaction).finish();\n    this._action.payload = fabproto6.common.Payload.create({\n      header: this._endorsement._action.header,\n      data: transactionBuf\n    });\n    this._payload = fabproto6.common.Payload.encode(this._action.payload).finish();\n    logger.debug('%s - end - %s', method, idContext.name);\n    return this._payload;\n  }\n\n  /**\n   * @typedef {Object} CommitSendRequest\n   * @property {Committers[]} [targets] - Optional. The Committers to send the endorsements.\n   * When not included an handler must be included.\n   * @property {ServiceHandler} - [handler] - Optional. The handler to send the endorsements.\n   * When not included, targets must be included.\n   * @property {Number} [requestTimeout] - Optional. The request timeout\n   */\n\n  /**\n   * Send the proposal responses that contain the endorsements of a transaction proposal\n   * to an committer for further processing. This is the 2nd phase of the transaction\n   * lifecycle in the fabric. The committer will globally order the transactions in the\n   * context of this channel and deliver the resulting blocks to the committing peers for\n   * validation against the chaincode's endorsement policy. When the committing peers\n   * successfully validate the transactions, it will mark the transaction as valid inside\n   * the block. After all transactions in a block have been validated, and marked either as\n   * valid or invalid (with a [reason code]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/peer/transaction.proto#L125}),\n   * the block will be appended (committed) to the channel's ledger on the peer.\n   * <br><br>\n   * This method will use the proposal responses returned from the {@link Proposal#endorse} along\n   * with the proposal that was sent for endorsement.\n   *\n   * @param {CommitSendRequest} request - {@link CommitRequest}\n   * @returns commit results\n   */\n  async send() {\n    let request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const method = `send[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    const {\n      handler,\n      targets,\n      requestTimeout\n    } = request;\n    const envelope = this.getSignedEnvelope();\n    if (handler) {\n      logger.debug('%s - calling the handler', method);\n      return await handler.commit(envelope, request);\n    } else if (targets) {\n      logger.debug('%s - sending to the targets', method);\n      const committers = this.channel.getTargetCommitters(targets);\n      if (committers.length === 0) {\n        throw new Error('Unable to find any target committers');\n      }\n      let result;\n      for (const committer of committers) {\n        const isConnected = await committer.checkConnection();\n        if (isConnected) {\n          try {\n            result = await committer.sendBroadcast(envelope, requestTimeout);\n            if (result.status === 'SUCCESS') {\n              break;\n            }\n          } catch (error) {\n            logger.error('%s - Unable to commit on %s ::%s', method, committer.name, error);\n            result = error;\n          }\n        } else {\n          result = new Error(`Committer ${committer.name} is not connected`);\n        }\n      }\n      if (result instanceof Error) {\n        throw result;\n      }\n      return result;\n    } else {\n      throw checkParameter('targets');\n    }\n  }\n\n  /**\n   * return a printable representation of this object\n   */\n  toString() {\n    return `Commit: {chaincodeId: ${this.chaincodeId}, channel: ${this.channel.name}}`;\n  }\n}\nmodule.exports = Commit;","map":{"version":3,"names":["TYPE","checkParameter","getLogger","require","logger","Proposal","fabproto6","Commit","constructor","chaincodeId","arguments","length","undefined","channel","endorsement","method","debug","type","_endorsement","build","idContext","request","name","_proposalResponses","Error","_reset","endorsements","proposalResponse","response","status","push","error","chaincodeEndorsedAction","protos","ChaincodeEndorsedAction","create","proposal_response_payload","payload","originalChaincodeProposalPayload","ChaincodeProposalPayload","decode","_action","proposal","chaincodeProposalPayloadNoTrans","input","chaincodeProposalPayloadNoTransBuf","encode","finish","chaincodeActionPayload","ChaincodeActionPayload","action","chaincode_proposal_payload","chaincodeActionPayloadBuf","transactionAction","TransactionAction","header","signature_header","actions","transaction","Transaction","transactionBuf","common","Payload","data","_payload","send","handler","targets","requestTimeout","envelope","getSignedEnvelope","commit","committers","getTargetCommitters","result","committer","isConnected","checkConnection","sendBroadcast","toString","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Commit.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Commit';\n\nconst {checkParameter, getLogger} = require('./Utils.js');\nconst logger = getLogger(TYPE);\n\nconst Proposal = require('./Proposal.js');\nconst fabproto6 = require('fabric-protos');\n\n/**\n * @classdesc\n * This class represents an Commit definition.\n * This class allows an application to contain all proposal attributes and\n * artifacts in one place during an endorsement commit.\n *\n * @class\n */\nclass Commit extends Proposal {\n\n\t/**\n\t * Construct a Proposal object.\n\t *\n\t * @param {string} chaincodeId - The chaincode this proposal will execute\n\t * @param {Channel} channel - The channel of this proposal\n\t * @returns {Proposal} The Proposal instance.\n\t */\n\tconstructor(chaincodeId = checkParameter('chaincodeId'), channel = checkParameter('channel'), endorsement) {\n\t\tsuper(chaincodeId, channel);\n\t\tconst method = `constructor[${chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tthis.type = TYPE;\n\t\tthis._endorsement = endorsement;\n\t}\n\n\t/**\n\t * @typedef {Object} CommitBuildRequest\n\t * @property {Endorsement} endorsement - Required. The Endorsement\n\t *  that will be committed.\n\t */\n\t/**\n\t * This method is used to build the protobuf objects of the commit.\n\t * The commit must next be signed before being sent to be committed.\n\t * @param {IdentityContext} [idContext] - The context is not used\n\t *  and is only specified here to be consistent with other ServiceAction\n\t *  build method calls.\n\t * @param {CommitBuildRequest} request - The commit options of the request.\n\t * @returns {byte[]} The commits payload bytes to be signed.\n\t */\n\tbuild(idContext = checkParameter('idContext'), request = {}) {\n\t\tconst method = `build[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start - %s', method, idContext.name);\n\n\t\tif (request.endorsement) {\n\t\t\tthis._endorsement = request.endorsement;\n\t\t}\n\n\t\tif (!this._endorsement) {\n\t\t\tcheckParameter('endorsement');\n\t\t}\n\n\t\tif (!this._endorsement._proposalResponses) {\n\t\t\tthrow Error('Proposal has not been endorsed');\n\t\t}\n\n\t\tthis._reset();\n\t\tconst endorsements = [];\n\t\tfor (const proposalResponse of this._endorsement._proposalResponses) {\n\t\t\tif (proposalResponse && proposalResponse.response && proposalResponse.endorsement) {\n\t\t\t\tlogger.debug('%s - proposalResponse endorsement added to commit:', method, proposalResponse.status);\n\t\t\t\tendorsements.push(proposalResponse.endorsement);\n\t\t\t} else {\n\t\t\t\tlogger.debug('%s - proposalResponse endorsement not added to commit:', method, proposalResponse.status);\n\t\t\t}\n\t\t}\n\n\t\tif (endorsements.length < 1) {\n\t\t\tlogger.error('%s - no valid endorsements found', method);\n\t\t\tthrow new Error('No valid endorsements found');\n\t\t}\n\t\tconst proposalResponse = this._endorsement._proposalResponses[0];\n\n\t\tconst chaincodeEndorsedAction = fabproto6.protos.ChaincodeEndorsedAction.create({\n\t\t\tproposal_response_payload: proposalResponse.payload,\n\t\t\tendorsements: endorsements\n\t\t});\n\n\t\t// the TransientMap field inside the original proposal payload is only meant for the\n\t\t// endorsers to use from inside the chaincode. This must be taken out before sending\n\t\t// to the committer, otherwise the transaction will be rejected by the validators when\n\t\t// it compares the proposal hash calculated by the endorsers and returned in the\n\t\t// proposal response, which was calculated without the TransientMap\n\t\tconst originalChaincodeProposalPayload = fabproto6.protos.ChaincodeProposalPayload.decode(\n\t\t\tthis._endorsement._action.proposal.payload\n\t\t);\n\t\tconst chaincodeProposalPayloadNoTrans = fabproto6.protos.ChaincodeProposalPayload.create({\n\t\t\tinput: originalChaincodeProposalPayload.input // only set the input field, skipping the TransientMap\n\t\t});\n\n\t\tconst chaincodeProposalPayloadNoTransBuf = fabproto6.protos.ChaincodeProposalPayload.encode(\n\t\t\tchaincodeProposalPayloadNoTrans\n\t\t).finish();\n\n\t\tconst chaincodeActionPayload = fabproto6.protos.ChaincodeActionPayload.create({\n\t\t\taction: chaincodeEndorsedAction,\n\t\t\tchaincode_proposal_payload: chaincodeProposalPayloadNoTransBuf\n\t\t});\n\t\tconst chaincodeActionPayloadBuf = fabproto6.protos.ChaincodeActionPayload.encode(\n\t\t\tchaincodeActionPayload\n\t\t).finish();\n\n\t\tconst transactionAction = fabproto6.protos.TransactionAction.create({\n\t\t\theader: this._endorsement._action.header.signature_header,\n\t\t\tpayload: chaincodeActionPayloadBuf\n\t\t});\n\n\t\tconst actions = [];\n\t\tactions.push(transactionAction);\n\n\t\tconst transaction = fabproto6.protos.Transaction.create({\n\t\t\tactions: actions\n\t\t});\n\t\tconst transactionBuf = fabproto6.protos.Transaction.encode(\n\t\t\ttransaction\n\t\t).finish();\n\n\t\tthis._action.payload = fabproto6.common.Payload.create({\n\t\t\theader: this._endorsement._action.header,\n\t\t\tdata: transactionBuf\n\t\t});\n\t\tthis._payload = fabproto6.common.Payload.encode(\n\t\t\tthis._action.payload\n\t\t).finish();\n\n\t\tlogger.debug('%s - end - %s', method, idContext.name);\n\t\treturn this._payload;\n\t}\n\n\t/**\n\t * @typedef {Object} CommitSendRequest\n\t * @property {Committers[]} [targets] - Optional. The Committers to send the endorsements.\n\t * When not included an handler must be included.\n\t * @property {ServiceHandler} - [handler] - Optional. The handler to send the endorsements.\n\t * When not included, targets must be included.\n\t * @property {Number} [requestTimeout] - Optional. The request timeout\n\t */\n\n\t/**\n\t * Send the proposal responses that contain the endorsements of a transaction proposal\n\t * to an committer for further processing. This is the 2nd phase of the transaction\n\t * lifecycle in the fabric. The committer will globally order the transactions in the\n\t * context of this channel and deliver the resulting blocks to the committing peers for\n\t * validation against the chaincode's endorsement policy. When the committing peers\n\t * successfully validate the transactions, it will mark the transaction as valid inside\n\t * the block. After all transactions in a block have been validated, and marked either as\n\t * valid or invalid (with a [reason code]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/peer/transaction.proto#L125}),\n\t * the block will be appended (committed) to the channel's ledger on the peer.\n\t * <br><br>\n\t * This method will use the proposal responses returned from the {@link Proposal#endorse} along\n\t * with the proposal that was sent for endorsement.\n\t *\n\t * @param {CommitSendRequest} request - {@link CommitRequest}\n\t * @returns commit results\n\t */\n\tasync send(request = {}) {\n\t\tconst method = `send[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\n\t\tconst {handler, targets, requestTimeout} = request;\n\n\t\tconst envelope = this.getSignedEnvelope();\n\n\t\tif (handler) {\n\t\t\tlogger.debug('%s - calling the handler', method);\n\t\t\treturn await handler.commit(envelope, request);\n\t\t} else if (targets) {\n\t\t\tlogger.debug('%s - sending to the targets', method);\n\t\t\tconst committers = this.channel.getTargetCommitters(targets);\n\n\t\t\tif (committers.length === 0) {\n\t\t\t\tthrow new Error('Unable to find any target committers');\n\t\t\t}\n\n\t\t\tlet result;\n\t\t\tfor (const committer of committers) {\n\t\t\t\tconst isConnected = await committer.checkConnection();\n\t\t\t\tif (isConnected) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresult = await committer.sendBroadcast(envelope, requestTimeout);\n\t\t\t\t\t\tif (result.status === 'SUCCESS') {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogger.error('%s - Unable to commit on %s ::%s', method, committer.name, error);\n\t\t\t\t\t\tresult = error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult = new Error(`Committer ${committer.name} is not connected`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result instanceof Error) {\n\t\t\t\tthrow result;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} else {\n\t\t\tthrow checkParameter('targets');\n\t\t}\n\t}\n\n\t/**\n\t * return a printable representation of this object\n\t */\n\ttoString() {\n\n\t\treturn `Commit: {chaincodeId: ${this.chaincodeId}, channel: ${this.channel.name}}`;\n\t}\n}\n\nmodule.exports = Commit;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}