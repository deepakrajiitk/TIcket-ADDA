{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'ServiceAction';\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst logger = getLogger(TYPE);\nconst IdentityContext = require('./IdentityContext.js');\nconst fabproto6 = require('fabric-protos');\n\n/**\n * @classdesc\n * This is an base class that represents an action on a fabric service.\n *\n * @class\n */\nconst ServiceAction = class {\n  /**\n   * Construct a ServiceAction base object.\n   *\n   * @returns {ServiceAction} The ServiceAction instance.\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    this.type = TYPE;\n    this.name = name;\n    logger.debug(`${TYPE}.constructor - start [${name}]`);\n  }\n  _reset() {\n    this._action = {};\n    this._action.init = false;\n    this._payload = null; // bytes\n    this._signature = null; // bytes\n  }\n\n  /**\n   * build an action that will require a signature and then be sent to the service.\n   * @abstract\n   */\n  build() {\n    throw Error('\"build\" method must be implemented');\n  }\n\n  /**\n   * Use this method with an IdentityContext that contains a User that has\n   * a Signing Identity.\n   * OR\n   * Use this method with a byte[] to set the signature\n   * when the application has done the signed externally.\n   * Use the results of the build as the bytes that will be signed.\n   * @param {IdentityContext | byte[]} param - When 'param' is a\n   * {@link IdentityContext} the signing identity of the user\n   *  will sign the current build bytes.\n   *  When the 'param' is a byte[], the bytes will be used as the final\n   *  commit signature.\n   */\n  sign() {\n    let param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('param');\n    const method = `sign[${this.type}:${this.name}]`;\n    logger.debug('%s - start', method);\n    if (!this._payload) {\n      throw Error('The send payload has not been built');\n    }\n    if (param.type === IdentityContext.TYPE) {\n      this._signature = Buffer.from(param.sign(this._payload));\n    } else if (param instanceof Buffer) {\n      this._signature = param;\n    } else {\n      throw Error('param is an unknown signer or signature type');\n    }\n    logger.debug('%s - end', method);\n    return this;\n  }\n\n  /**\n   * @abstract\n   */\n  send() {\n    throw Error('\"send\" method must be implemented');\n  }\n\n  /**\n   * return a signed proposal from the signature and the payload as bytes\n   *\n   * This method is not intended for use by an application. It will be used\n   * by the send method of the super class.\n   * @returns {object} An object with the signature and the payload bytes\n   */\n  getSignedProposal() {\n    const method = `getSignedProposal[${this.type}:${this.name}]`;\n    logger.debug('%s - start', method);\n    this._checkPayloadAndSignature();\n    return fabproto6.protos.SignedProposal.create({\n      signature: this._signature,\n      proposal_bytes: this._payload\n    });\n  }\n\n  /**\n   * return a signed envelope from the signature and the payload as bytes\n   *\n   * This method is not intended for use by an application. It will be used\n   * by the send method of the super class.\n   * @returns {object} An object with the signature and the payload bytes\n   */\n  getSignedEnvelope() {\n    const method = `getSignedEnvelope[${this.type}:${this.name}]`;\n    logger.debug(`${method} - start`);\n    this._checkPayloadAndSignature();\n    return {\n      signature: this._signature,\n      payload: this._payload\n    };\n  }\n  _checkPayloadAndSignature() {\n    if (!this._payload) {\n      throw Error('The send payload has not been built');\n    }\n    if (!this._signature) {\n      throw Error('The send payload has not been signed');\n    }\n  }\n\n  /*\n   * This function will build the common header\n   */\n  buildHeader(idContext, channelHeaderBuf) {\n    const method = 'buildHeader';\n    logger.debug('%s - start', method);\n    const signatureHeader = fabproto6.common.SignatureHeader.create({\n      creator: idContext.serializeIdentity(),\n      nonce: idContext.nonce\n    });\n    const signatureHeaderBuf = fabproto6.common.SignatureHeader.encode(signatureHeader).finish();\n    return fabproto6.common.Header.create({\n      signature_header: signatureHeaderBuf,\n      channel_header: channelHeaderBuf\n    });\n  }\n\n  /**\n   * @abstract\n   */\n  toString() {\n    throw Error('\"toString\" method must be implemented');\n  }\n};\nmodule.exports = ServiceAction;","map":{"version":3,"names":["TYPE","checkParameter","getLogger","require","logger","IdentityContext","fabproto6","ServiceAction","constructor","name","arguments","length","undefined","type","debug","_reset","_action","init","_payload","_signature","build","Error","sign","param","method","Buffer","from","send","getSignedProposal","_checkPayloadAndSignature","protos","SignedProposal","create","signature","proposal_bytes","getSignedEnvelope","payload","buildHeader","idContext","channelHeaderBuf","signatureHeader","common","SignatureHeader","creator","serializeIdentity","nonce","signatureHeaderBuf","encode","finish","Header","signature_header","channel_header","toString","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/ServiceAction.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'ServiceAction';\n\nconst {checkParameter, getLogger} = require('./Utils.js');\nconst logger = getLogger(TYPE);\nconst IdentityContext = require('./IdentityContext.js');\nconst fabproto6 = require('fabric-protos');\n\n/**\n * @classdesc\n * This is an base class that represents an action on a fabric service.\n *\n * @class\n */\nconst ServiceAction = class {\n\n\t/**\n\t * Construct a ServiceAction base object.\n\t *\n\t * @returns {ServiceAction} The ServiceAction instance.\n\t */\n\tconstructor(name = checkParameter('name')) {\n\t\tthis.type = TYPE;\n\t\tthis.name = name;\n\t\tlogger.debug(`${TYPE}.constructor - start [${name}]`);\n\t}\n\n\t_reset() {\n\t\tthis._action = {};\n\t\tthis._action.init = false;\n\t\tthis._payload = null; // bytes\n\t\tthis._signature = null; // bytes\n\t}\n\n\t/**\n\t * build an action that will require a signature and then be sent to the service.\n\t * @abstract\n\t */\n\tbuild() {\n\t\tthrow Error('\"build\" method must be implemented');\n\t}\n\n\n\t/**\n\t * Use this method with an IdentityContext that contains a User that has\n\t * a Signing Identity.\n\t * OR\n\t * Use this method with a byte[] to set the signature\n\t * when the application has done the signed externally.\n\t * Use the results of the build as the bytes that will be signed.\n\t * @param {IdentityContext | byte[]} param - When 'param' is a\n\t * {@link IdentityContext} the signing identity of the user\n\t *  will sign the current build bytes.\n\t *  When the 'param' is a byte[], the bytes will be used as the final\n\t *  commit signature.\n\t */\n\tsign(param = checkParameter('param')) {\n\t\tconst method = `sign[${this.type}:${this.name}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tif (!this._payload) {\n\t\t\tthrow Error('The send payload has not been built');\n\t\t}\n\t\tif (param.type === IdentityContext.TYPE) {\n\t\t\tthis._signature = Buffer.from(param.sign(this._payload));\n\t\t} else if (param instanceof Buffer) {\n\t\t\tthis._signature = param;\n\t\t} else {\n\t\t\tthrow Error('param is an unknown signer or signature type');\n\t\t}\n\n\t\tlogger.debug('%s - end', method);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @abstract\n\t */\n\tsend() {\n\t\tthrow Error('\"send\" method must be implemented');\n\t}\n\n\t/**\n\t * return a signed proposal from the signature and the payload as bytes\n\t *\n\t * This method is not intended for use by an application. It will be used\n\t * by the send method of the super class.\n\t * @returns {object} An object with the signature and the payload bytes\n\t */\n\tgetSignedProposal() {\n\t\tconst method = `getSignedProposal[${this.type}:${this.name}]`;\n\t\tlogger.debug('%s - start', method);\n\n\t\tthis._checkPayloadAndSignature();\n\n\t\treturn fabproto6.protos.SignedProposal.create({\n\t\t\tsignature: this._signature,\n\t\t\tproposal_bytes: this._payload\n\t\t});\n\t}\n\n\t/**\n\t * return a signed envelope from the signature and the payload as bytes\n\t *\n\t * This method is not intended for use by an application. It will be used\n\t * by the send method of the super class.\n\t * @returns {object} An object with the signature and the payload bytes\n\t */\n\tgetSignedEnvelope() {\n\t\tconst method = `getSignedEnvelope[${this.type}:${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\tthis._checkPayloadAndSignature();\n\n\t\treturn {\n\t\t\tsignature: this._signature,\n\t\t\tpayload: this._payload\n\t\t};\n\t}\n\n\t_checkPayloadAndSignature() {\n\t\tif (!this._payload) {\n\t\t\tthrow Error('The send payload has not been built');\n\t\t}\n\t\tif (!this._signature) {\n\t\t\tthrow Error('The send payload has not been signed');\n\t\t}\n\t}\n\n\t/*\n\t * This function will build the common header\n\t */\n\tbuildHeader(idContext, channelHeaderBuf) {\n\t\tconst method = 'buildHeader';\n\t\tlogger.debug('%s - start', method);\n\n\t\tconst signatureHeader = fabproto6.common.SignatureHeader.create({\n\t\t\tcreator: idContext.serializeIdentity(),\n\t\t\tnonce: idContext.nonce\n\t\t});\n\t\tconst signatureHeaderBuf = fabproto6.common.SignatureHeader.encode(signatureHeader).finish();\n\n\t\treturn fabproto6.common.Header.create({\n\t\t\tsignature_header: signatureHeaderBuf,\n\t\t\tchannel_header: channelHeaderBuf\n\t\t});\n\t}\n\n\t/**\n\t * @abstract\n\t */\n\ttoString() {\n\t\tthrow Error('\"toString\" method must be implemented');\n\t}\n};\n\nmodule.exports = ServiceAction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}