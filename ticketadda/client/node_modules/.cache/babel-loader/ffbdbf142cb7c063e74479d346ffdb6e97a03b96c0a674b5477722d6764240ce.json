{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2018, 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkImpl = void 0;\nconst contract_1 = require(\"./contract\");\nconst blockeventsource_1 = require(\"./impl/event/blockeventsource\");\nconst commitlistenersession_1 = require(\"./impl/event/commitlistenersession\");\nconst eventservicemanager_1 = require(\"./impl/event/eventservicemanager\");\nconst isolatedblocklistenersession_1 = require(\"./impl/event/isolatedblocklistenersession\");\nconst listeners_1 = require(\"./impl/event/listeners\");\nconst listenersession_1 = require(\"./impl/event/listenersession\");\nconst sharedblocklistenersession_1 = require(\"./impl/event/sharedblocklistenersession\");\nconst gatewayutils_1 = require(\"./impl/gatewayutils\");\nconst Logger = __importStar(require(\"./logger\"));\nconst logger = Logger.getLogger('Network');\nasync function listenerOptionsWithDefaults(options) {\n  var _a;\n  const defaultOptions = {\n    type: 'full'\n  };\n  const result = Object.assign(defaultOptions, options);\n  const checkpointBlock = await ((_a = options.checkpointer) === null || _a === void 0 ? void 0 : _a.getBlockNumber());\n  if (checkpointBlock) {\n    result.startBlock = checkpointBlock;\n  }\n  return result;\n}\n/**\n * <p>A Network represents the set of peers in a Fabric network.\n * Applications should get a Network instance using the\n * gateway's [getNetwork]{@link module:fabric-network.Gateway#getNetwork} method.</p>\n *\n * <p>The Network object provides the ability for applications to:</p>\n * <ul>\n *   <li>Obtain a specific smart contract deployed to the network using [getContract]{@link module:fabric-network.Network#getContract},\n *       in order to submit and evaluate transactions for that smart contract.</li>\n *   <li>Listen to new block events and replay previous block events using\n *       [addBlockListener]{@link module:fabric-network.Network#addBlockListener}.</li>\n * </ul>\n * @interface Network\n * @memberof module:fabric-network\n */\n/**\n * Get the owning Gateway connection.\n * @method Network#getGateway\n * @memberof module:fabric-network\n * @returns {module:fabric-network.Gateway} A Gateway.\n */\n/**\n * Get an instance of a contract (chaincode) on the current network.\n * @method Network#getContract\n * @memberof module:fabric-network\n * @param {string} chaincodeId - the chaincode identifier.\n * @param {string} [name] - the name of the contract.\n * @param {string[]} [collections] - the names of collections defined for this chaincode.\n * @returns {module:fabric-network.Contract} the contract.\n */\n/**\n * Get the underlying channel object representation of this network.\n * @method Network#getChannel\n * @memberof module:fabric-network\n * @returns {Channel} A channel.\n */\n/**\n * Add a listener to receive transaction commit and peer disconnect events for a set of peers. This is typically used\n * only within the implementation of a custom [transaction commit event handler]{@tutorial transaction-commit-events}.\n * @method Network#addCommitListener\n * @memberof module:fabric-network\n * @param {module:fabric-network.CommitListener} listener A transaction commit listener callback function.\n * @param {Endorser[]} peers The peers from which to receive events.\n * @param {string} transactionId A transaction ID.\n * @returns {module:fabric-network.CommitListener} The added listener.\n * @example\n * const listener: CommitListener = (error, event) => {\n *     if (error) {\n *         // Handle peer communication error\n *     } else {\n *         // Handle transaction commit event\n *     }\n * }\n * const peers = network.channel.getEndorsers();\n * await network.addCommitListener(listener, peers, transactionId);\n */\n/**\n * Remove a previously added transaction commit listener.\n * @method Network#removeCommitListener\n * @memberof module:fabric-network\n * @param {module:fabric-network.CommitListener} listener A transaction commit listener callback function.\n */\n/**\n * Add a listener to receive block events for this network. Blocks will be received in order and without duplication.\n * The default is to listen for full block events from the current block position.\n * @method Network#addBlockListener\n * @memberof module:fabric-network\n * @async\n * @param {module:fabric-network.BlockListener} listener A block listener callback function.\n * @param {module:fabric-network.ListenerOptions} [options] Listener options.\n * @returns {Promise<module:fabric-network.BlockListener>} The added listener.\n * @example\n * const listener: BlockListener = async (event) => {\n *     // Handle block event\n *\n *     // Listener may remove itself if desired\n *     if (event.blockNumber.equals(endBlock)) {\n *         network.removeBlockListener(listener);\n *     }\n * }\n * const options: ListenerOptions = {\n *     startBlock: 1\n * };\n * await network.addBlockListener(listener, options);\n */\n/**\n * Remove a previously added block listener.\n * @method Network#removeBlockListener\n * @memberof module:fabric-network\n * @param listener {module:fabric-network.BlockListener} A block listener callback function.\n */\n/**\n * A callback function that will be invoked when a block event is received.\n * @callback BlockListener\n * @memberof module:fabric-network\n * @async\n * @param {module:fabric-network.BlockEvent} event A block event.\n * @returns {Promise<void>}\n */\n/**\n * A callback function that will be invoked when either a peer communication error occurs or a transaction commit event\n * is received. Only one of the two arguments will have a value for any given invocation.\n * @callback CommitListener\n * @memberof module:fabric-network\n * @param {module:fabric-network.CommitError} [error] Peer communication error.\n * @param {module:fabric-network.CommitEvent} [event] Transaction commit event from a specific peer.\n */\n/**\n * @interface CommitError\n * @extends Error\n * @memberof module:fabric-network\n * @property {Endorser} peer The peer that raised this error.\n */\n/**\n * @interface CommitEvent\n * @extends {module:fabric-network.TransactionEvent}\n * @memberof module:fabric-network\n * @property {Endorser} peer The endorsing peer that produced this event.\n */\nclass NetworkImpl {\n  /*\n   * Network constructor for internal use only.\n   * @param {Gateway} gateway The owning gateway instance\n   * @param {Channel} channel The fabric-common channel instance\n   */\n  constructor(gateway, channel) {\n    this.contracts = new Map();\n    this.initialized = false;\n    this.commitListeners = new Map();\n    this.blockListeners = new Map();\n    const method = 'constructor';\n    logger.debug('%s - start', method);\n    this.gateway = gateway;\n    this.channel = channel;\n    this.eventServiceManager = new eventservicemanager_1.EventServiceManager(this);\n    this.realtimeFilteredBlockEventSource = new blockeventsource_1.BlockEventSource(this.eventServiceManager, {\n      type: 'filtered'\n    });\n    this.realtimeFullBlockEventSource = new blockeventsource_1.BlockEventSource(this.eventServiceManager, {\n      type: 'full'\n    });\n    this.realtimePrivateBlockEventSource = new blockeventsource_1.BlockEventSource(this.eventServiceManager, {\n      type: 'private'\n    });\n  }\n  getGateway() {\n    return this.gateway;\n  }\n  getContract(chaincodeId) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    const method = 'getContract';\n    logger.debug('%s - start - name %s', method, name);\n    if (!this.initialized) {\n      throw new Error('Unable to get contract as this network has failed to initialize');\n    }\n    const key = `${chaincodeId}:${name}`;\n    let contract = this.contracts.get(key);\n    if (!contract) {\n      contract = new contract_1.ContractImpl(this, chaincodeId, name);\n      logger.debug('%s - create new contract %s', method, chaincodeId);\n      this.contracts.set(key, contract);\n    }\n    return contract;\n  }\n  getChannel() {\n    return this.channel;\n  }\n  async addCommitListener(listener, peers, transactionId) {\n    const sessionSupplier = () => Promise.resolve(new commitlistenersession_1.CommitListenerSession(listener, this.eventServiceManager, peers, transactionId));\n    return await (0, listenersession_1.addListener)(listener, this.commitListeners, sessionSupplier);\n  }\n  removeCommitListener(listener) {\n    (0, listenersession_1.removeListener)(listener, this.commitListeners);\n  }\n  async addBlockListener(listener) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const sessionSupplier = async () => await this.newBlockListenerSession(listener, options);\n    return await (0, listenersession_1.addListener)(listener, this.blockListeners, sessionSupplier);\n  }\n  removeBlockListener(listener) {\n    (0, listenersession_1.removeListener)(listener, this.blockListeners);\n  }\n  _dispose() {\n    const method = '_dispose';\n    logger.debug('%s - start', method);\n    this.contracts.clear();\n    this.commitListeners.forEach(listener => listener.close());\n    this.commitListeners.clear();\n    this.blockListeners.forEach(listener => listener.close());\n    this.blockListeners.clear();\n    this.realtimeFilteredBlockEventSource.close();\n    this.realtimeFullBlockEventSource.close();\n    this.realtimePrivateBlockEventSource.close();\n    this.eventServiceManager.close();\n    this.channel.close();\n    this.initialized = false;\n  }\n  /**\n   * Initialize this network instance\n   * @private\n   */\n  async _initialize(discover) {\n    const method = '_initialize';\n    logger.debug('%s - start', method);\n    if (this.initialized) {\n      return;\n    }\n    await this._initializeInternalChannel(discover);\n    this.initialized = true;\n    // Must be created after channel initialization to ensure discovery has located the peers\n    const queryOptions = this.gateway.getOptions().queryHandlerOptions;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.queryHandler = queryOptions.strategy(this);\n    logger.debug('%s - end', method);\n  }\n  /**\n   * initialize the channel if it hasn't been done\n   * @private\n   */\n  async _initializeInternalChannel(options) {\n    const method = '_initializeInternalChannel';\n    logger.debug('%s - start', method);\n    if (options === null || options === void 0 ? void 0 : options.enabled) {\n      logger.debug('%s - initialize with discovery', method);\n      let targets;\n      logger.debug('%s - user has not specified discovery targets, check channel and client', method);\n      // maybe the channel has connected endorsers with the mspid\n      const mspId = this.gateway.getIdentity().mspId;\n      targets = this.channel.getEndorsers(mspId);\n      if (!targets || targets.length < 1) {\n        // then check the client for connected peers associated with the mspid\n        targets = this.channel.client.getEndorsers(mspId);\n      }\n      if (!targets || targets.length < 1) {\n        // get any peer\n        targets = this.channel.client.getEndorsers();\n      }\n      if (!targets || targets.length < 1) {\n        throw Error('No discovery targets found');\n      } else {\n        logger.debug('%s - using channel/client targets', method);\n      }\n      // should have targets by now, create the discoverers from the endorsers\n      const discoverers = [];\n      for (const peer of targets) {\n        const discoverer = this.channel.client.newDiscoverer(peer.name, peer.mspid);\n        discoverer.setEndpoint(peer.endpoint);\n        discoverers.push(discoverer);\n      }\n      this.discoveryService = this.channel.newDiscoveryService(this.channel.name);\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const idx = this.gateway.identityContext;\n      // do the three steps\n      this.discoveryService.build(idx);\n      this.discoveryService.sign(idx);\n      logger.debug('%s - will discover asLocalhost:%s', method, options.asLocalhost);\n      await this.discoveryService.send({\n        asLocalhost: options.asLocalhost,\n        targets: discoverers\n      });\n      // now we can work with the discovery results\n      // or get a handler later from the discoverService\n      // to be used on endorsement, queries, and commits\n      logger.debug('%s - discovery complete - channel is populated', method);\n    }\n    logger.debug('%s - end', method);\n  }\n  async newBlockListenerSession(listener, options) {\n    options = await listenerOptionsWithDefaults(options);\n    if (options.checkpointer) {\n      listener = (0, listeners_1.checkpointBlockListener)(listener, options.checkpointer);\n    }\n    if ((0, gatewayutils_1.notNullish)(options.startBlock)) {\n      return this.newIsolatedBlockListenerSession(listener, options);\n    } else {\n      return this.newSharedBlockListenerSession(listener, options.type);\n    }\n  }\n  newIsolatedBlockListenerSession(listener, options) {\n    const blockSource = new blockeventsource_1.BlockEventSource(this.eventServiceManager, options);\n    return new isolatedblocklistenersession_1.IsolatedBlockListenerSession(listener, blockSource);\n  }\n  newSharedBlockListenerSession(listener, type) {\n    if (type === 'filtered') {\n      return new sharedblocklistenersession_1.SharedBlockListenerSession(listener, this.realtimeFilteredBlockEventSource);\n    } else if (type === 'full') {\n      return new sharedblocklistenersession_1.SharedBlockListenerSession(listener, this.realtimeFullBlockEventSource);\n    } else if (type === 'private') {\n      return new sharedblocklistenersession_1.SharedBlockListenerSession(listener, this.realtimePrivateBlockEventSource);\n    } else {\n      throw new Error(`Unsupported event listener type: ${type}`);\n    }\n  }\n}\nexports.NetworkImpl = NetworkImpl;","map":{"version":3,"names":["contract_1","require","blockeventsource_1","commitlistenersession_1","eventservicemanager_1","isolatedblocklistenersession_1","listeners_1","listenersession_1","sharedblocklistenersession_1","gatewayutils_1","Logger","__importStar","logger","getLogger","listenerOptionsWithDefaults","options","defaultOptions","type","result","Object","assign","checkpointBlock","_a","checkpointer","getBlockNumber","startBlock","NetworkImpl","constructor","gateway","channel","contracts","Map","initialized","commitListeners","blockListeners","method","debug","eventServiceManager","EventServiceManager","realtimeFilteredBlockEventSource","BlockEventSource","realtimeFullBlockEventSource","realtimePrivateBlockEventSource","getGateway","getContract","chaincodeId","name","arguments","length","undefined","Error","key","contract","get","ContractImpl","set","getChannel","addCommitListener","listener","peers","transactionId","sessionSupplier","Promise","resolve","CommitListenerSession","addListener","removeCommitListener","removeListener","addBlockListener","newBlockListenerSession","removeBlockListener","_dispose","clear","forEach","close","_initialize","discover","_initializeInternalChannel","queryOptions","getOptions","queryHandlerOptions","queryHandler","strategy","enabled","targets","mspId","getIdentity","getEndorsers","client","discoverers","peer","discoverer","newDiscoverer","mspid","setEndpoint","endpoint","push","discoveryService","newDiscoveryService","idx","identityContext","build","sign","asLocalhost","send","checkpointBlockListener","notNullish","newIsolatedBlockListenerSession","newSharedBlockListenerSession","blockSource","IsolatedBlockListenerSession","SharedBlockListenerSession","exports"],"sources":["../src/network.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}