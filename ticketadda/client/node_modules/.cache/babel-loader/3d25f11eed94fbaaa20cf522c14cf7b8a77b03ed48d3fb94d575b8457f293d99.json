{"ast":null,"code":"/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst sdkUtils = require('./Utils');\n\n/**\n * Base class for a client that can use a {@link CryptoSuite} to sign and hash.\n * It also contains utility methods for constructing new instances of {@link CryptoKeyStore},\n * [CryptoSuite]{@link module:api.CryptoSuite} and [KeyValueStore]{@link module:api.KeyValueStore}\n *\n * @class\n */\nconst BaseClient = class {\n  constructor() {\n    this._cryptoSuite = null;\n  }\n\n  /**\n   * This is a factory method. It returns a new instance of the CryptoSuite API implementation, based on the \"setting\"\n   * that is passed in, or if skipped, based on default values of the {@link CryptoSetting} properties.\n   *\n   * @param {CryptoSetting} setting Optional\n   * @returns {module:api.CryptoSuite} a new instance of the CryptoSuite API implementation\n   */\n  static newCryptoSuite(setting) {\n    return sdkUtils.newCryptoSuite(setting);\n  }\n\n  /**\n   * This is a factory method. It returns a new instance of the {@link CryptoKeyStore}.\n   *\n   * When the application needs to use a key store other than the default,\n   * it should create a new CryptoKeyStore and set it on the CryptoSuite.\n   *\n   * <br><br><code>cryptosuite.setCryptoKeyStore(BaseClient.newCryptoKeyStore(keyValueStore))</code>\n   *\n   * @param {KeyValueStore} [keyValueStore] Optional. The built-in key store saves private keys.\n   *    The key store must be instance of any {@link KeyValueStore} implementations.\n   * @returns {CryptoKeyStore} a new instance of the CryptoKeystore\n   */\n  static newCryptoKeyStore(keyValueStore) {\n    return sdkUtils.newCryptoKeyStore(keyValueStore);\n  }\n\n  /**\n   * Obtains an instance of the [KeyValueStore]{@link module:api.KeyValueStore} class. By default\n   * it returns the built-in implementation [InMemoryKeyValueStore]{@link InMemoryKeyValueStore}.\n   *\n   * @returns {KeyValueStore} {@link module:api.KeyValueStore} instance of the KeyValueStore implementation\n   */\n  static async newDefaultKeyValueStore() {\n    return sdkUtils.newKeyValueStore();\n  }\n\n  /**\n   * Configures a logger for the entire SDK to use and override the default logger. Unless this method is called,\n   * the SDK uses a default logger based on [winston]{@link https://www.npmjs.com/package/winston}.\n   * When using the built-in winston based logger, use the configuration setting <code>hfc-logging</code> to pass\n   * in configurations in the following format:\n   * <br><br>\n   * <pre>\n   * {\n   *   'error': 'error.log',\t\t\t// 'error' logs are printed to file 'error.log' relative of the current working dir for node.js\n   *   'debug': '/tmp/myapp/debug.log',\t// 'debug' and anything more critical ('info', 'warn', 'error') can also be an absolute path\n   *   'info': 'console'\t\t\t// 'console' is a keyword for logging to console\n   * }\n   * </pre>\n   * <br>\n   * @param {Object} logger a logger instance that defines the following methods: debug(), info(), warn(), error() with\n   * string interpolation methods like [util.format]{@link https://nodejs.org/api/util.html#util_util_format_format}.\n   */\n  static setLogger(logger) {\n    let err = '';\n    if (typeof logger.debug !== 'function') {\n      err += 'debug() ';\n    }\n    if (typeof logger.info !== 'function') {\n      err += 'info() ';\n    }\n    if (typeof logger.warn !== 'function') {\n      err += 'warn() ';\n    }\n    if (typeof logger.error !== 'function') {\n      err += 'error()';\n    }\n    if (err !== '') {\n      throw new Error('The \"logger\" parameter must be an object that implements the following methods, which are missing: ' + err);\n    }\n    if (global.hfc) {\n      global.hfc.logger = logger;\n    } else {\n      global.hfc = {\n        logger: logger\n      };\n    }\n  }\n\n  /**\n   * Retrieves a setting from the hierarchical configuration and if not found\n   * will return the provided default value.\n   *\n   * <br><br>\n   * The hierarchical configuration settings search order for a setting <code>aa-bb</code>:\n   * <ol>\n   * <li> memory: if the setting has been added with <pre>Client.setConfigSetting('aa-bb', 'value')</pre>\n   * <li> Command-line arguments: like <pre>node app.js --aa-bb value</pre>\n   * <li> Environment variables: <pre>AA_BB=value node app.js</pre>\n   * <li> Custom Files: all files added with <code>addConfigFile(path)</code>\n   *     will be ordered by when added, where same settings in the files added later will override those added earlier\n   * <li> The file located at <code>lib/config/default.json</code> with default settings\n   *\n   * @param {String} name - The name of a setting\n   * @param {Object} default_value - The value of a setting if not found in the hierarchical configuration\n   */\n  static getConfigSetting(name, default_value) {\n    return sdkUtils.getConfigSetting(name, default_value);\n  }\n\n  // make available from the client instance\n  getConfigSetting(name, default_value) {\n    return BaseClient.getConfigSetting(name, default_value);\n  }\n\n  /**\n   * Adds a file to the top of the list of configuration setting files that are\n   * part of the hierarchical configuration.\n   * These files will override the default settings and be overriden by environment,\n   * command line arguments, and settings programmatically set into configuration settings.\n   *\n   * <br><p>\n   * The hierarchical configuration settings search order: see {@link BaseClient.getConfigSetting}\n   * @param {String} path - The path to the file to be added to the top of list of configuration files\n   */\n  static addConfigFile(path) {\n    sdkUtils.addConfigFile(path);\n  }\n\n  /**\n   * Adds a setting to override all settings that are\n   * part of the hierarchical configuration.\n   *\n   * <br><p>\n   * The hierarchical configuration settings search order: see {@link BaseClient.getConfigSetting}\n   *\n   * @param {String} name - The name of a setting\n   * @param {Object} value - The value of a setting\n   */\n  static setConfigSetting(name, value) {\n    sdkUtils.setConfigSetting(name, value);\n  }\n\n  // make available from the client instance\n  setConfigSetting(name, value) {\n    BaseClient.setConfigSetting(name, value);\n  }\n\n  /**\n   * Use this method to get a logger that will add entries to the same location\n   * being used by the Hyperledger Fabric client.\n   *\n   * @param {string} name - The name of the label to be added to the log entries.\n   *        To help identify the source of the log entry.\n   * @returns {Logger} The logger that may be used to log entires with\n   *         'info()', 'warn()', 'error()' and 'debug()' methods to mark the\n   *         the type of the log entries.\n   */\n  static getLogger(name) {\n    return sdkUtils.getLogger(name);\n  }\n\n  /**\n   * Sets the client instance to use the CryptoSuite object for signing and hashing\n   *\n   * Creating and setting a CryptoSuite is optional because the client will construct\n   * an instance based on default configuration settings:\n   * <li> crypto-hsm: use an implementation for Hardware Security Module (if set to true) or software-based key management (if set to false)\n   * <li> crypto-keysize: security level, or key size, to use with the digital signature public key algorithm. Currently ECDSA\n   *  is supported and the valid key sizes are 256 and 384\n   * <li> crypto-hash-algo: hashing algorithm\n   *\n   * @param {api.CryptoSuite|ICryptoSuite} cryptoSuite the CryptoSuite object\n   */\n  setCryptoSuite(cryptoSuite) {\n    this._cryptoSuite = cryptoSuite;\n  }\n\n  /**\n   * Returns the {@link CryptoSuite} object used by this client instance\n   * @returns {module:api.CryptoSuite}\n   */\n  getCryptoSuite() {\n    return this._cryptoSuite;\n  }\n\n  /**\n   * Fixes a certificate string that may not be in the correct format.\n   * Make sure there's a start line with '-----BEGIN CERTIFICATE-----'\n   * and end line with '-----END CERTIFICATE-----', so as to be compliant\n   * with x509 parsers.\n   * Will remove or add required linefeeds and carriage returns.\n   *\n   * @param {string} raw - a string that contains a X509 certificate\n   * @throws {Error} An error indicating that the begining and end parts are\n   *         not correct.\n   */\n  static normalizeX509(raw) {\n    return sdkUtils.normalizeX509(raw);\n  }\n};\nmodule.exports = BaseClient;","map":{"version":3,"names":["sdkUtils","require","BaseClient","constructor","_cryptoSuite","newCryptoSuite","setting","newCryptoKeyStore","keyValueStore","newDefaultKeyValueStore","newKeyValueStore","setLogger","logger","err","debug","info","warn","error","Error","global","hfc","getConfigSetting","name","default_value","addConfigFile","path","setConfigSetting","value","getLogger","setCryptoSuite","cryptoSuite","getCryptoSuite","normalizeX509","raw","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/BaseClient.js"],"sourcesContent":["/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst sdkUtils = require('./Utils');\n\n/**\n * Base class for a client that can use a {@link CryptoSuite} to sign and hash.\n * It also contains utility methods for constructing new instances of {@link CryptoKeyStore},\n * [CryptoSuite]{@link module:api.CryptoSuite} and [KeyValueStore]{@link module:api.KeyValueStore}\n *\n * @class\n */\nconst BaseClient = class {\n\tconstructor() {\n\t\tthis._cryptoSuite = null;\n\t}\n\n\t/**\n\t * This is a factory method. It returns a new instance of the CryptoSuite API implementation, based on the \"setting\"\n\t * that is passed in, or if skipped, based on default values of the {@link CryptoSetting} properties.\n\t *\n\t * @param {CryptoSetting} setting Optional\n\t * @returns {module:api.CryptoSuite} a new instance of the CryptoSuite API implementation\n\t */\n\tstatic newCryptoSuite(setting) {\n\t\treturn sdkUtils.newCryptoSuite(setting);\n\t}\n\n\t/**\n\t * This is a factory method. It returns a new instance of the {@link CryptoKeyStore}.\n\t *\n\t * When the application needs to use a key store other than the default,\n\t * it should create a new CryptoKeyStore and set it on the CryptoSuite.\n\t *\n\t * <br><br><code>cryptosuite.setCryptoKeyStore(BaseClient.newCryptoKeyStore(keyValueStore))</code>\n\t *\n\t * @param {KeyValueStore} [keyValueStore] Optional. The built-in key store saves private keys.\n\t *    The key store must be instance of any {@link KeyValueStore} implementations.\n\t * @returns {CryptoKeyStore} a new instance of the CryptoKeystore\n\t */\n\tstatic newCryptoKeyStore(keyValueStore) {\n\t\treturn sdkUtils.newCryptoKeyStore(keyValueStore);\n\t}\n\n\t/**\n\t * Obtains an instance of the [KeyValueStore]{@link module:api.KeyValueStore} class. By default\n\t * it returns the built-in implementation [InMemoryKeyValueStore]{@link InMemoryKeyValueStore}.\n\t *\n\t * @returns {KeyValueStore} {@link module:api.KeyValueStore} instance of the KeyValueStore implementation\n\t */\n\tstatic async newDefaultKeyValueStore() {\n\t\treturn sdkUtils.newKeyValueStore();\n\t}\n\n\t/**\n\t * Configures a logger for the entire SDK to use and override the default logger. Unless this method is called,\n\t * the SDK uses a default logger based on [winston]{@link https://www.npmjs.com/package/winston}.\n\t * When using the built-in winston based logger, use the configuration setting <code>hfc-logging</code> to pass\n\t * in configurations in the following format:\n\t * <br><br>\n\t * <pre>\n\t * {\n\t *   'error': 'error.log',\t\t\t// 'error' logs are printed to file 'error.log' relative of the current working dir for node.js\n\t *   'debug': '/tmp/myapp/debug.log',\t// 'debug' and anything more critical ('info', 'warn', 'error') can also be an absolute path\n\t *   'info': 'console'\t\t\t// 'console' is a keyword for logging to console\n\t * }\n\t * </pre>\n\t * <br>\n\t * @param {Object} logger a logger instance that defines the following methods: debug(), info(), warn(), error() with\n\t * string interpolation methods like [util.format]{@link https://nodejs.org/api/util.html#util_util_format_format}.\n\t */\n\tstatic setLogger(logger) {\n\t\tlet err = '';\n\n\t\tif (typeof logger.debug !== 'function') {\n\t\t\terr += 'debug() ';\n\t\t}\n\n\t\tif (typeof logger.info !== 'function') {\n\t\t\terr += 'info() ';\n\t\t}\n\n\t\tif (typeof logger.warn !== 'function') {\n\t\t\terr += 'warn() ';\n\t\t}\n\n\t\tif (typeof logger.error !== 'function') {\n\t\t\terr += 'error()';\n\t\t}\n\n\t\tif (err !== '') {\n\t\t\tthrow new Error('The \"logger\" parameter must be an object that implements the following methods, which are missing: ' + err);\n\t\t}\n\n\t\tif (global.hfc) {\n\t\t\tglobal.hfc.logger = logger;\n\t\t} else {\n\t\t\tglobal.hfc = {\n\t\t\t\tlogger: logger\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves a setting from the hierarchical configuration and if not found\n\t * will return the provided default value.\n\t *\n\t * <br><br>\n\t * The hierarchical configuration settings search order for a setting <code>aa-bb</code>:\n\t * <ol>\n\t * <li> memory: if the setting has been added with <pre>Client.setConfigSetting('aa-bb', 'value')</pre>\n\t * <li> Command-line arguments: like <pre>node app.js --aa-bb value</pre>\n\t * <li> Environment variables: <pre>AA_BB=value node app.js</pre>\n\t * <li> Custom Files: all files added with <code>addConfigFile(path)</code>\n\t *     will be ordered by when added, where same settings in the files added later will override those added earlier\n\t * <li> The file located at <code>lib/config/default.json</code> with default settings\n\t *\n\t * @param {String} name - The name of a setting\n\t * @param {Object} default_value - The value of a setting if not found in the hierarchical configuration\n\t */\n\tstatic getConfigSetting(name, default_value) {\n\n\t\treturn sdkUtils.getConfigSetting(name, default_value);\n\t}\n\n\t// make available from the client instance\n\tgetConfigSetting(name, default_value) {\n\n\t\treturn BaseClient.getConfigSetting(name, default_value);\n\t}\n\n\t/**\n\t * Adds a file to the top of the list of configuration setting files that are\n\t * part of the hierarchical configuration.\n\t * These files will override the default settings and be overriden by environment,\n\t * command line arguments, and settings programmatically set into configuration settings.\n\t *\n\t * <br><p>\n\t * The hierarchical configuration settings search order: see {@link BaseClient.getConfigSetting}\n\t * @param {String} path - The path to the file to be added to the top of list of configuration files\n\t */\n\tstatic addConfigFile(path) {\n\t\tsdkUtils.addConfigFile(path);\n\t}\n\n\t/**\n\t * Adds a setting to override all settings that are\n\t * part of the hierarchical configuration.\n\t *\n\t * <br><p>\n\t * The hierarchical configuration settings search order: see {@link BaseClient.getConfigSetting}\n\t *\n\t * @param {String} name - The name of a setting\n\t * @param {Object} value - The value of a setting\n\t */\n\tstatic setConfigSetting(name, value) {\n\t\tsdkUtils.setConfigSetting(name, value);\n\t}\n\n\t// make available from the client instance\n\tsetConfigSetting(name, value) {\n\t\tBaseClient.setConfigSetting(name, value);\n\t}\n\n\n\t/**\n\t * Use this method to get a logger that will add entries to the same location\n\t * being used by the Hyperledger Fabric client.\n\t *\n\t * @param {string} name - The name of the label to be added to the log entries.\n\t *        To help identify the source of the log entry.\n\t * @returns {Logger} The logger that may be used to log entires with\n\t *         'info()', 'warn()', 'error()' and 'debug()' methods to mark the\n\t *         the type of the log entries.\n\t */\n\tstatic getLogger(name) {\n\t\treturn sdkUtils.getLogger(name);\n\t}\n\n\t/**\n\t * Sets the client instance to use the CryptoSuite object for signing and hashing\n\t *\n\t * Creating and setting a CryptoSuite is optional because the client will construct\n\t * an instance based on default configuration settings:\n\t * <li> crypto-hsm: use an implementation for Hardware Security Module (if set to true) or software-based key management (if set to false)\n\t * <li> crypto-keysize: security level, or key size, to use with the digital signature public key algorithm. Currently ECDSA\n\t *  is supported and the valid key sizes are 256 and 384\n\t * <li> crypto-hash-algo: hashing algorithm\n\t *\n\t * @param {api.CryptoSuite|ICryptoSuite} cryptoSuite the CryptoSuite object\n\t */\n\tsetCryptoSuite(cryptoSuite) {\n\t\tthis._cryptoSuite = cryptoSuite;\n\t}\n\n\t/**\n\t * Returns the {@link CryptoSuite} object used by this client instance\n\t * @returns {module:api.CryptoSuite}\n\t */\n\tgetCryptoSuite() {\n\t\treturn this._cryptoSuite;\n\t}\n\n\t/**\n\t * Fixes a certificate string that may not be in the correct format.\n\t * Make sure there's a start line with '-----BEGIN CERTIFICATE-----'\n\t * and end line with '-----END CERTIFICATE-----', so as to be compliant\n\t * with x509 parsers.\n\t * Will remove or add required linefeeds and carriage returns.\n\t *\n\t * @param {string} raw - a string that contains a X509 certificate\n\t * @throws {Error} An error indicating that the begining and end parts are\n\t *         not correct.\n\t */\n\tstatic normalizeX509(raw) {\n\t\treturn sdkUtils.normalizeX509(raw);\n\t}\n};\n\nmodule.exports = BaseClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}