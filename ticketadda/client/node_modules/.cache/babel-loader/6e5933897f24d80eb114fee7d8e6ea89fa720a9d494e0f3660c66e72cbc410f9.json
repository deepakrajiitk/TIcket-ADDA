{"ast":null,"code":"/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Key represents a cryptographic key. It can be symmetric or asymmetric. In the case of an\n * asymmetric key, the key can be public or private. In the case of a private asymmetric\n * key, the getPublicKey() method allows to retrieve the corresponding public-key.\n * A key can be referenced via the Subject Key Identifier (SKI) and resolvable by the\n * appropriate {@link CryptoSuite} implementation\n *\n * @class\n */\nclass Key {\n  /**\n   *\n   * Returns the subject key identifier of this key\n   * @abstract\n   * @returns {string} The subject key identifier of this key as a hexidecial encoded string\n   */\n  getSKI() {}\n\n  /**\n   * Returns the key's HSM handle in string format\n   * @abstract\n   * @returns {string} The handle identifier of this key as a hexidecial encoded string\n   */\n  getHandle() {}\n\n  /**\n   * Returns true if this key is a symmetric key, false is this key is asymmetric\n   * @abstract\n   * @returns {boolean} if this key is a symmetric key\n   */\n  isSymmetric() {}\n\n  /**\n   * Returns true if this key is an asymmetric private key, false otherwise.\n   * @abstract\n   * @returns {boolean} if this key is an asymmetric private key\n   */\n  isPrivate() {}\n\n  /**\n   * Returns the corresponding public key if this key is an asymmetric private key.\n   * If this key is already public, returns this key itself.\n   * @abstract\n   * @returns {module:api.Key} the corresponding public key if this key is an asymmetric private key.\n   * If this key is already public, returns this key itself.\n   */\n  getPublicKey() {}\n\n  /**\n   * Converts this key to its PEM representation, if this operation is allowed.\n   * @abstract\n   * @returns {string} the PEM string representation of the key\n   */\n  toBytes() {}\n}\nmodule.exports = Key;","map":{"version":3,"names":["Key","getSKI","getHandle","isSymmetric","isPrivate","getPublicKey","toBytes","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Key.js"],"sourcesContent":["/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Key represents a cryptographic key. It can be symmetric or asymmetric. In the case of an\n * asymmetric key, the key can be public or private. In the case of a private asymmetric\n * key, the getPublicKey() method allows to retrieve the corresponding public-key.\n * A key can be referenced via the Subject Key Identifier (SKI) and resolvable by the\n * appropriate {@link CryptoSuite} implementation\n *\n * @class\n */\nclass Key {\n\n\t/**\n\t *\n\t * Returns the subject key identifier of this key\n\t * @abstract\n\t * @returns {string} The subject key identifier of this key as a hexidecial encoded string\n\t */\n\tgetSKI() {}\n\n\t/**\n\t * Returns the key's HSM handle in string format\n\t * @abstract\n\t * @returns {string} The handle identifier of this key as a hexidecial encoded string\n\t */\n\tgetHandle() {}\n\n\t/**\n\t * Returns true if this key is a symmetric key, false is this key is asymmetric\n\t * @abstract\n\t * @returns {boolean} if this key is a symmetric key\n\t */\n\tisSymmetric() {}\n\n\t/**\n\t * Returns true if this key is an asymmetric private key, false otherwise.\n\t * @abstract\n\t * @returns {boolean} if this key is an asymmetric private key\n\t */\n\tisPrivate() {}\n\n\t/**\n\t * Returns the corresponding public key if this key is an asymmetric private key.\n\t * If this key is already public, returns this key itself.\n\t * @abstract\n\t * @returns {module:api.Key} the corresponding public key if this key is an asymmetric private key.\n\t * If this key is already public, returns this key itself.\n\t */\n\tgetPublicKey() {}\n\n\t/**\n\t * Converts this key to its PEM representation, if this operation is allowed.\n\t * @abstract\n\t * @returns {string} the PEM string representation of the key\n\t */\n\ttoBytes() {}\n}\n\nmodule.exports = Key;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,GAAG,CAAC;EAET;AACD;AACA;AACA;AACA;AACA;EACCC,MAAMA,CAAA,EAAG,CAAC;;EAEV;AACD;AACA;AACA;AACA;EACCC,SAASA,CAAA,EAAG,CAAC;;EAEb;AACD;AACA;AACA;AACA;EACCC,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACD;AACA;AACA;AACA;EACCC,SAASA,CAAA,EAAG,CAAC;;EAEb;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,YAAYA,CAAA,EAAG,CAAC;;EAEhB;AACD;AACA;AACA;AACA;EACCC,OAAOA,CAAA,EAAG,CAAC;AACZ;AAEAC,MAAM,CAACC,OAAO,GAAGR,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}