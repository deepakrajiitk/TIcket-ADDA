{"ast":null,"code":"/**\n * Copyright 2018 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * <h3>Overview</h3>\n *\n * <p>This module provides a higher level API for interacting with smart contracts, and is the recommended API for\n * client applications to interact with smart contracts deployed to a Hyperledger Fabric blockchain network.</p>\n *\n * <p>Note that administrative capabilities, such as installing and starting smart contracts, are not currently provided\n * by this API. For only specific advanced usage, the lower level <em>fabric-common</em> API can be used. Access to\n * related <em>fabric-common</em> objects is provided through the <em>fabric-network</em> API objects.</p>\n *\n * <p>If migrating a client application from an earlier version of the API, consult the\n * [migration tutorial]{@tutorial migration} for details of potentially breaking changes and recommended actions.</p>\n *\n * <p>[TypeScript]{@link http://www.typescriptlang.org/} definitions are included in this module.</p>\n *\n * <h3>Getting started</h3>\n *\n * <p>The entry point used to interact with a Hyperledger Fabric blockchain network is the\n * [Gateway]{@link module:fabric-network.Gateway} class. Once instantiated, this long-living object provides a\n * reusable connection to a peer within the blockchain network, and enables access to any of the blockchain\n * [Networks]{@link module:fabric-network.Network} (channels) for which that peer is a member. This in turn\n * provides access to Smart [Contracts]{@link module:fabric-network.Contract} (chaincode) running within that\n * blockchain network, and to which [Transactions]{@link module:fabric-network.Transaction} can be\n * [submitted]{@link module:fabric-network.Contract#submitTransaction} or queries can be\n * [evaluated]{@link module:fabric-network.Contract#evaluateTransaction}.</p>\n *\n * <p>Private data can be submitted to transactions as [transient]{@link module:fabric-network.Transaction#setTransient}\n * data to prevent it from being recorded on the ledger.</p>\n *\n * Client applications can initiate actions or business processes in response to chaincode events emitted by smart\n * contract transactions using [smart contract event listeners]{@link module:fabric-network.Contract}. All updates to\n * the ledger can be observed using [block event listeners]{@link module:fabric-network.Network}.\n *\n * @example\n * // Connect to a gateway peer\n * const connectionProfileJson = (await fs.promises.readFile(connectionProfileFileName)).toString();\n * const connectionProfile = JSON.parse(connectionProfileJson);\n * const wallet = await Wallets.newFileSystemWallet(walletDirectoryPath);\n * const gatewayOptions: GatewayOptions = {\n *     identity: 'user@example.org', // Previously imported identity\n *     wallet,\n * };\n * const gateway = new Gateway();\n * await gateway.connect(connectionProfile, gatewayOptions);\n *\n * try {\n *\n *     // Obtain the smart contract with which our application wants to interact\n *     const network = await gateway.getNetwork(channelName);\n *     const contract = network.getContract(chaincodeId);\n *\n *     // Submit transactions for the smart contract\n *     const args = [arg1, arg2];\n *     const submitResult = await contract.submitTransaction('transactionName', ...args);\n *\n *     // Evaluate queries for the smart contract\n *     const evalResult = await contract.evaluateTransaction('transactionName', ...args);\n *\n *     // Create and submit transactions for the smart contract with transient data\n *     const transientResult = await contract.createTransaction(transactionName)\n *         .setTransient(privateData)\n *         .submit(arg1, arg2);\n *\n * } finally {\n *     // Disconnect from the gateway peer when all work for this client identity is complete\n *     gateway.disconnect();\n * }\n *\n * @module fabric-network\n */\n\n/**\n * A base user identity. Actual identity objects will extend this basic structure with credentials applicable to their\n * type. See [X509Identity]{@link module:fabric-network.X509Identity} and\n * [HsmX509Identity]{@link module:fabric-network.HsmX509Identity}.\n * @interface Identity\n * @memberof module:fabric-network\n * @property {string} type The type of the identity.\n * @property {string} mspId The member services provider with which this identity is associated.\n */\n\n/**\n * Identity described by an X.509 certificate.\n * @interface X509Identity\n * @memberof module:fabric-network\n * @implements module:fabric-network.Identity\n * @property {'X.509'} type The type of the identity.\n * @property {string} credentials.certificate Certificate in PEM format.\n * @property {string} credentials.privateKey Private key in PEM format.\n */\n\n/**\n * Identity described by an X.509 certificate where the private key is stored in a hardware security module.\n * To use identities of this type, a suitable [HsmX509Provider]{@link module:fabric-network.HsmX509Provider} must be\n * created and added to the identity provider registry of the wallet containing the identity.\n * @interface HsmX509Identity\n * @memberof module:fabric-network\n * @implements module:fabric-network.Identity\n * @property {'HSM-X.509'} type The type of the identity.\n * @property {string} credentials.certificate Certificate in PEM format.\n */\n\n/**\n * Understands the format of identities of a given type. Converts identity objects to/from the persistent format used\n * within wallet stores, and configures the client with a given identity.\n * @interface IdentityProvider\n * @memberof module:fabric-network\n * @property {string} type The type identifier for identities that this provider understands.\n */\n\n/**\n * Options describing how to connect to a hardware security module. Options without default values are mandatory but\n * may be be omitted from this object if they are specified through environment variables or external configuration.\n * @interface HsmOptions\n * @memberof module:fabric-network\n * @property {string} [lib] Path to implementation-specific PKCS#11 library used to interact with the HSM.\n * @property {string} [pin] PIN used to access the HSM.\n * @property {number} [slot] The hardware slot number where data is stored in the HSM.\n * @property {string} [label] The label for the token initialised in the slot overrides slot if provided (use as an alternative to locating a slot)\n * @property {number} [usertype=1] Specify the user type for accessing the HSM.\n * @property {boolean} [readwrite=true] True if the session should be read/write; false if read-only.\n */\n\n/**\n * Interface for store implementations that provide backing storage for identities in a [Wallet]{@link module:fabric-network.Wallet}.\n * @interface WalletStore\n * @memberof module:fabric-network\n */\n/**\n * Remove data associated with a given label.\n * @function module:fabric-network.WalletStore#remove\n * @async\n * @param {string} label A label identifying stored data.\n * @returns {Promise<void>}\n */\n/**\n * Get data associated with a given label.\n * @function module:fabric-network.WalletStore#get\n * @async\n * @param {string} label A label identifying stored data.\n * @returns {Promise<Buffer | undefined>} Stored data as a Buffer if it exists; otherwise undefined.\n */\n/**\n * List the labels for all stored data.\n * @function module:fabric-network.WalletStore#list\n * @async\n * @returns {Promise<string[]>} A list of labels.\n */\n/**\n * Put data associated with a given label.\n * @function module:fabric-network.WalletStore#put\n * @async\n * @param {string} label A label identifying stored data.\n * @param {Buffer} data Data to store.\n * @returns {Promise<void>}\n */\n\n/**\n * @interface ListenerOptions\n * @memberof module:fabric-network\n * @property {(number | string | Long)} [startBlock] The block number from which events should be received. Leaving this\n * value undefined starts listening from the current block.\n * @property {module:fabric-network.EventType} [type] The type of events to be received.\n * @property {module:fabric-network.Checkpointer} [checkpointer] A checkpointer instance. If the checkpointer has a\n * current block number set, this takes precendence over the <code>startBlock</code> option. If no current block number\n * is set, the <code>startBlock</code> option is used if present.\n */\n\n/**\n * The type of an event. The type is based on the type of the raw event data: filtered, full block or including\n * private data. The presence of optional fields and the type of raw protobuf data associated with events is dictated\n * by this value.\n * @typedef {('filtered' | 'full' | 'private')} EventType\n * @memberof module:fabric-network\n */\n\n/**\n * Persists the current block and transactions within that block to enable event listening to be resumed following an\n * application outage. Default implementations can be obtained from\n * [DefaultCheckpointers]{@link module:fabric-network.DefaultCheckpointers}. Application developers are encouraged to\n * build their own implementations that use a persistent store suitable to their environment.\n * @interface Checkpointer\n * @memberof module:fabric-network\n */\n/**\n * Add a transaction ID for the current block. Typically called once a transaction has been processed.\n * @method Checkpointer#addTransactionId\n * @memberof module:fabric-network\n * @async\n * @param {string} transactionId A transaction ID.\n * @returns {Promise<void>}\n */\n/**\n * Get the current block number, or <code>undefined</code> if there is no previously saved state.\n * @method Checkpointer#getBlockNumber\n * @memberof module:fabric-network\n * @async\n * @returns {Promise<Long | undefined>} A block number.\n */\n/**\n * Get the transaction IDs processed within the current block.\n * @method Checkpointer#getTransactionIds\n * @memberof module:fabric-network\n * @async\n * @returns {Promise<Set<string>>} Transaction IDs.\n */\n/**\n * Set the current block number. Also clears the stored transaction IDs. Typically set when the previous block has been\n * processed.\n * @method Checkpointer#setBlockNumber\n * @memberof module:fabric-network\n * @async\n * @param {Long} blockNumber A block number.\n * @returns {Promise<void>}\n */\n\n/**\n * Event representing a block on the ledger.\n * @interface BlockEvent\n * @memberof module:fabric-network\n * @property {Long} blockNumber The number of the block this event represents.\n * @property {(FilteredBlock | Block)} blockData The raw block event protobuf.\n */\n/**\n * Get the transactions included in this block.\n * @method BlockEvent#getTransactionEvents\n * @memberof module:fabric-network\n * @returns {module:fabric-network.TransactionEvent[]} Transaction events.\n */\n\n/**\n * Event representing a transaction processed within a block.\n * @interface TransactionEvent\n * @memberof module:fabric-network\n * @property {string} transactionId The ID of the transaction this event represents.\n * @property {string} status The status of this transaction.\n * @property {Date} [timestamp] The transaction timestamp. Note that\n * timestamp does not exist for <strong>filtered</strong> event.\n * @property {boolean} isValid Whether this transaction was successfully committed to the ledger. <code>true</code> if\n * the transaction was commited; otherwise <code>false</code>. The status will provide a more specific reason why an\n * invalid transaction was not committed.\n * @property {(FilteredTransaction | any)} transactionData The raw transaction event protobuf.\n * @property {any} [privateData] Private data read/write sets associated with this transaction. Only present if\n * listening to <strong>private</strong> events and there is private data associated with the transaction.\n */\n/**\n * Get the parent block event for this event.\n * @method TransactionEvent#getBlockEvent\n * @memberof module:fabric-network\n * @returns {module:fabric-network.BlockEvent} A block event.\n */\n/**\n * Get the contract events emitted by this transaction.\n * @method TransactionEvent#getContractEvents\n * @memberof module:fabric-network\n * @returns {module:fabric-network.ContractEvent[]} Contract events.\n */\n\n/**\n * Event representing a contract event emitted by a smart contract.\n * @interface ContractEvent\n * @memberof module:fabric-network\n * @property {string} chaincodeId The chaincode ID of the smart contract that emitted this event.\n * @property {string} eventName The name of the emitted event.\n * @property {Buffer} [payload] The data associated with this event by the smart contract. Note that\n * <strong>filtered</strong> events do not include any payload data.\n */\n/**\n * Get the parent transaction event of this event.\n * @method ContractEvent#getTransactionEvent\n * @memberof module:fabric-network\n * @returns {module:fabric-network.TransactionEvent} A transaction event.\n */\n\nmodule.exports.Gateway = require('./lib/gateway').Gateway;\nmodule.exports.Wallet = require('./lib/impl/wallet/wallet').Wallet;\nmodule.exports.Wallets = require('./lib/impl/wallet/wallets').Wallets;\nmodule.exports.IdentityProviderRegistry = require('./lib/impl/wallet/identityproviderregistry').IdentityProviderRegistry;\nmodule.exports.HsmX509Provider = require('./lib/impl/wallet/hsmx509identity').HsmX509Provider;\nmodule.exports.DefaultCheckpointers = require('./lib/defaultcheckpointers').DefaultCheckpointers;\nmodule.exports.DefaultEventHandlerStrategies = require('./lib/impl/event/defaulteventhandlerstrategies');\nmodule.exports.DefaultQueryHandlerStrategies = require('./lib/impl/query/defaultqueryhandlerstrategies');\nmodule.exports.TimeoutError = require('./lib/errors/timeouterror').TimeoutError;","map":{"version":3,"names":["module","exports","Gateway","require","Wallet","Wallets","IdentityProviderRegistry","HsmX509Provider","DefaultCheckpointers","DefaultEventHandlerStrategies","DefaultQueryHandlerStrategies","TimeoutError"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-network/index.js"],"sourcesContent":["/**\n * Copyright 2018 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * <h3>Overview</h3>\n *\n * <p>This module provides a higher level API for interacting with smart contracts, and is the recommended API for\n * client applications to interact with smart contracts deployed to a Hyperledger Fabric blockchain network.</p>\n *\n * <p>Note that administrative capabilities, such as installing and starting smart contracts, are not currently provided\n * by this API. For only specific advanced usage, the lower level <em>fabric-common</em> API can be used. Access to\n * related <em>fabric-common</em> objects is provided through the <em>fabric-network</em> API objects.</p>\n *\n * <p>If migrating a client application from an earlier version of the API, consult the\n * [migration tutorial]{@tutorial migration} for details of potentially breaking changes and recommended actions.</p>\n *\n * <p>[TypeScript]{@link http://www.typescriptlang.org/} definitions are included in this module.</p>\n *\n * <h3>Getting started</h3>\n *\n * <p>The entry point used to interact with a Hyperledger Fabric blockchain network is the\n * [Gateway]{@link module:fabric-network.Gateway} class. Once instantiated, this long-living object provides a\n * reusable connection to a peer within the blockchain network, and enables access to any of the blockchain\n * [Networks]{@link module:fabric-network.Network} (channels) for which that peer is a member. This in turn\n * provides access to Smart [Contracts]{@link module:fabric-network.Contract} (chaincode) running within that\n * blockchain network, and to which [Transactions]{@link module:fabric-network.Transaction} can be\n * [submitted]{@link module:fabric-network.Contract#submitTransaction} or queries can be\n * [evaluated]{@link module:fabric-network.Contract#evaluateTransaction}.</p>\n *\n * <p>Private data can be submitted to transactions as [transient]{@link module:fabric-network.Transaction#setTransient}\n * data to prevent it from being recorded on the ledger.</p>\n *\n * Client applications can initiate actions or business processes in response to chaincode events emitted by smart\n * contract transactions using [smart contract event listeners]{@link module:fabric-network.Contract}. All updates to\n * the ledger can be observed using [block event listeners]{@link module:fabric-network.Network}.\n *\n * @example\n * // Connect to a gateway peer\n * const connectionProfileJson = (await fs.promises.readFile(connectionProfileFileName)).toString();\n * const connectionProfile = JSON.parse(connectionProfileJson);\n * const wallet = await Wallets.newFileSystemWallet(walletDirectoryPath);\n * const gatewayOptions: GatewayOptions = {\n *     identity: 'user@example.org', // Previously imported identity\n *     wallet,\n * };\n * const gateway = new Gateway();\n * await gateway.connect(connectionProfile, gatewayOptions);\n *\n * try {\n *\n *     // Obtain the smart contract with which our application wants to interact\n *     const network = await gateway.getNetwork(channelName);\n *     const contract = network.getContract(chaincodeId);\n *\n *     // Submit transactions for the smart contract\n *     const args = [arg1, arg2];\n *     const submitResult = await contract.submitTransaction('transactionName', ...args);\n *\n *     // Evaluate queries for the smart contract\n *     const evalResult = await contract.evaluateTransaction('transactionName', ...args);\n *\n *     // Create and submit transactions for the smart contract with transient data\n *     const transientResult = await contract.createTransaction(transactionName)\n *         .setTransient(privateData)\n *         .submit(arg1, arg2);\n *\n * } finally {\n *     // Disconnect from the gateway peer when all work for this client identity is complete\n *     gateway.disconnect();\n * }\n *\n * @module fabric-network\n */\n\n/**\n * A base user identity. Actual identity objects will extend this basic structure with credentials applicable to their\n * type. See [X509Identity]{@link module:fabric-network.X509Identity} and\n * [HsmX509Identity]{@link module:fabric-network.HsmX509Identity}.\n * @interface Identity\n * @memberof module:fabric-network\n * @property {string} type The type of the identity.\n * @property {string} mspId The member services provider with which this identity is associated.\n */\n\n/**\n * Identity described by an X.509 certificate.\n * @interface X509Identity\n * @memberof module:fabric-network\n * @implements module:fabric-network.Identity\n * @property {'X.509'} type The type of the identity.\n * @property {string} credentials.certificate Certificate in PEM format.\n * @property {string} credentials.privateKey Private key in PEM format.\n */\n\n/**\n * Identity described by an X.509 certificate where the private key is stored in a hardware security module.\n * To use identities of this type, a suitable [HsmX509Provider]{@link module:fabric-network.HsmX509Provider} must be\n * created and added to the identity provider registry of the wallet containing the identity.\n * @interface HsmX509Identity\n * @memberof module:fabric-network\n * @implements module:fabric-network.Identity\n * @property {'HSM-X.509'} type The type of the identity.\n * @property {string} credentials.certificate Certificate in PEM format.\n */\n\n/**\n * Understands the format of identities of a given type. Converts identity objects to/from the persistent format used\n * within wallet stores, and configures the client with a given identity.\n * @interface IdentityProvider\n * @memberof module:fabric-network\n * @property {string} type The type identifier for identities that this provider understands.\n */\n\n/**\n * Options describing how to connect to a hardware security module. Options without default values are mandatory but\n * may be be omitted from this object if they are specified through environment variables or external configuration.\n * @interface HsmOptions\n * @memberof module:fabric-network\n * @property {string} [lib] Path to implementation-specific PKCS#11 library used to interact with the HSM.\n * @property {string} [pin] PIN used to access the HSM.\n * @property {number} [slot] The hardware slot number where data is stored in the HSM.\n * @property {string} [label] The label for the token initialised in the slot overrides slot if provided (use as an alternative to locating a slot)\n * @property {number} [usertype=1] Specify the user type for accessing the HSM.\n * @property {boolean} [readwrite=true] True if the session should be read/write; false if read-only.\n */\n\n/**\n * Interface for store implementations that provide backing storage for identities in a [Wallet]{@link module:fabric-network.Wallet}.\n * @interface WalletStore\n * @memberof module:fabric-network\n */\n/**\n * Remove data associated with a given label.\n * @function module:fabric-network.WalletStore#remove\n * @async\n * @param {string} label A label identifying stored data.\n * @returns {Promise<void>}\n */\n/**\n * Get data associated with a given label.\n * @function module:fabric-network.WalletStore#get\n * @async\n * @param {string} label A label identifying stored data.\n * @returns {Promise<Buffer | undefined>} Stored data as a Buffer if it exists; otherwise undefined.\n */\n/**\n * List the labels for all stored data.\n * @function module:fabric-network.WalletStore#list\n * @async\n * @returns {Promise<string[]>} A list of labels.\n */\n/**\n * Put data associated with a given label.\n * @function module:fabric-network.WalletStore#put\n * @async\n * @param {string} label A label identifying stored data.\n * @param {Buffer} data Data to store.\n * @returns {Promise<void>}\n */\n\n/**\n * @interface ListenerOptions\n * @memberof module:fabric-network\n * @property {(number | string | Long)} [startBlock] The block number from which events should be received. Leaving this\n * value undefined starts listening from the current block.\n * @property {module:fabric-network.EventType} [type] The type of events to be received.\n * @property {module:fabric-network.Checkpointer} [checkpointer] A checkpointer instance. If the checkpointer has a\n * current block number set, this takes precendence over the <code>startBlock</code> option. If no current block number\n * is set, the <code>startBlock</code> option is used if present.\n */\n\n/**\n * The type of an event. The type is based on the type of the raw event data: filtered, full block or including\n * private data. The presence of optional fields and the type of raw protobuf data associated with events is dictated\n * by this value.\n * @typedef {('filtered' | 'full' | 'private')} EventType\n * @memberof module:fabric-network\n */\n\n/**\n * Persists the current block and transactions within that block to enable event listening to be resumed following an\n * application outage. Default implementations can be obtained from\n * [DefaultCheckpointers]{@link module:fabric-network.DefaultCheckpointers}. Application developers are encouraged to\n * build their own implementations that use a persistent store suitable to their environment.\n * @interface Checkpointer\n * @memberof module:fabric-network\n */\n/**\n * Add a transaction ID for the current block. Typically called once a transaction has been processed.\n * @method Checkpointer#addTransactionId\n * @memberof module:fabric-network\n * @async\n * @param {string} transactionId A transaction ID.\n * @returns {Promise<void>}\n */\n/**\n * Get the current block number, or <code>undefined</code> if there is no previously saved state.\n * @method Checkpointer#getBlockNumber\n * @memberof module:fabric-network\n * @async\n * @returns {Promise<Long | undefined>} A block number.\n */\n/**\n * Get the transaction IDs processed within the current block.\n * @method Checkpointer#getTransactionIds\n * @memberof module:fabric-network\n * @async\n * @returns {Promise<Set<string>>} Transaction IDs.\n */\n/**\n * Set the current block number. Also clears the stored transaction IDs. Typically set when the previous block has been\n * processed.\n * @method Checkpointer#setBlockNumber\n * @memberof module:fabric-network\n * @async\n * @param {Long} blockNumber A block number.\n * @returns {Promise<void>}\n */\n\n/**\n * Event representing a block on the ledger.\n * @interface BlockEvent\n * @memberof module:fabric-network\n * @property {Long} blockNumber The number of the block this event represents.\n * @property {(FilteredBlock | Block)} blockData The raw block event protobuf.\n */\n/**\n * Get the transactions included in this block.\n * @method BlockEvent#getTransactionEvents\n * @memberof module:fabric-network\n * @returns {module:fabric-network.TransactionEvent[]} Transaction events.\n */\n\n/**\n * Event representing a transaction processed within a block.\n * @interface TransactionEvent\n * @memberof module:fabric-network\n * @property {string} transactionId The ID of the transaction this event represents.\n * @property {string} status The status of this transaction.\n * @property {Date} [timestamp] The transaction timestamp. Note that\n * timestamp does not exist for <strong>filtered</strong> event.\n * @property {boolean} isValid Whether this transaction was successfully committed to the ledger. <code>true</code> if\n * the transaction was commited; otherwise <code>false</code>. The status will provide a more specific reason why an\n * invalid transaction was not committed.\n * @property {(FilteredTransaction | any)} transactionData The raw transaction event protobuf.\n * @property {any} [privateData] Private data read/write sets associated with this transaction. Only present if\n * listening to <strong>private</strong> events and there is private data associated with the transaction.\n */\n/**\n * Get the parent block event for this event.\n * @method TransactionEvent#getBlockEvent\n * @memberof module:fabric-network\n * @returns {module:fabric-network.BlockEvent} A block event.\n */\n/**\n * Get the contract events emitted by this transaction.\n * @method TransactionEvent#getContractEvents\n * @memberof module:fabric-network\n * @returns {module:fabric-network.ContractEvent[]} Contract events.\n */\n\n/**\n * Event representing a contract event emitted by a smart contract.\n * @interface ContractEvent\n * @memberof module:fabric-network\n * @property {string} chaincodeId The chaincode ID of the smart contract that emitted this event.\n * @property {string} eventName The name of the emitted event.\n * @property {Buffer} [payload] The data associated with this event by the smart contract. Note that\n * <strong>filtered</strong> events do not include any payload data.\n */\n/**\n * Get the parent transaction event of this event.\n * @method ContractEvent#getTransactionEvent\n * @memberof module:fabric-network\n * @returns {module:fabric-network.TransactionEvent} A transaction event.\n */\n\nmodule.exports.Gateway = require('./lib/gateway').Gateway;\nmodule.exports.Wallet = require('./lib/impl/wallet/wallet').Wallet;\nmodule.exports.Wallets = require('./lib/impl/wallet/wallets').Wallets;\nmodule.exports.IdentityProviderRegistry = require('./lib/impl/wallet/identityproviderregistry').IdentityProviderRegistry;\nmodule.exports.HsmX509Provider = require('./lib/impl/wallet/hsmx509identity').HsmX509Provider;\nmodule.exports.DefaultCheckpointers = require('./lib/defaultcheckpointers').DefaultCheckpointers;\nmodule.exports.DefaultEventHandlerStrategies = require('./lib/impl/event/defaulteventhandlerstrategies');\nmodule.exports.DefaultQueryHandlerStrategies = require('./lib/impl/query/defaultqueryhandlerstrategies');\nmodule.exports.TimeoutError = require('./lib/errors/timeouterror').TimeoutError;\n"],"mappingseAAe,CAAC,CAACD,OAAO;AACzDF,MAAM,CAACC,OAAO,CAACG,MAAM,GAAGD,OAAO,CAAC,0BAA0B,CAAC,CAACC,MAAM;AAClEJ,MAAM,CAACC,OAAO,CAACI,OAAO,GAAGF,OAAO,CAAC,2BAA2B,CAAC,CAACE,OAAO;AACrEL,MAAM,CAACC,OAAO,CAACK,wBAAwB,GAAGH,OAAO,CAAC,4CAA4C,CAAC,CAACG,wBAAwB;AACxHN,MAAM,CAACC,OAAO,CAACM,eAAe,GAAGJ,OAAO,CAAC,mCAAmC,CAAC,CAACI,eAAe;AAC7FP,MAAM,CAACC,OAAO,CAACO,oBAAoB,GAAGL,OAAO,CAAC,4BAA4B,CAAC,CAACK,oBAAoB;AAChGR,MAAM,CAACC,OAAO,CAACQ,6BAA6B,GAAGN,OAAO,CAAC,gDAAgD,CAAC;AACxGH,MAAM,CAACC,OAAO,CAACS,6BAA6B,GAAGP,OAAO,CAAC,gDAAgD,CAAC;AACxGH,MAAM,CAACC,OAAO,CAACU,YAAY,GAAGR,OAAO,CAAC,2BAA2B,CAAC,CAACQ,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}