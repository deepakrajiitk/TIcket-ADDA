{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CouchDBWalletStore = void 0;\nconst nano = require(\"nano\");\nconst encoding = 'utf8';\nclass CouchDBWalletStore {\n  constructor(db) {\n    this.db = db;\n  }\n  static async newInstance(config, dbName) {\n    const client = nano(config);\n    try {\n      await client.db.get(dbName); // Throws if database does not exist\n    } catch (error) {\n      await client.db.create(dbName);\n    }\n    const db = client.use(dbName);\n    return new CouchDBWalletStore(db);\n  }\n  async remove(label) {\n    const document = await this.getDocument(label);\n    if (document) {\n      await this.db.destroy(document._id, document._rev);\n    }\n  }\n  async get(label) {\n    const document = await this.getDocument(label);\n    return document ? Buffer.from(document.data, encoding) : undefined;\n  }\n  async list() {\n    const response = await this.db.list();\n    return response.rows.map(row => row.id);\n  }\n  async put(label, data) {\n    const newDocument = {\n      _id: label,\n      data: data.toString(encoding)\n    };\n    // Overwrite any existing document revision instead of creating a new revision\n    const existingDocument = await this.getDocument(label);\n    if (existingDocument) {\n      newDocument._rev = existingDocument._rev;\n    }\n    await this.db.insert(newDocument);\n  }\n  async getDocument(label) {\n    try {\n      return await this.db.get(label);\n    } catch (error) {\n      // TODO: Log error\n    }\n    return undefined;\n  }\n}\nexports.CouchDBWalletStore = CouchDBWalletStore;","map":{"version":3,"names":["nano","require","encoding","CouchDBWalletStore","constructor","db","newInstance","config","dbName","client","get","error","create","use","remove","label","document","getDocument","destroy","_id","_rev","Buffer","from","data","undefined","list","response","rows","map","row","id","put","newDocument","toString","existingDocument","insert","exports"],"sources":["../../../src/impl/wallet/couchdbwalletstore.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;AAMA,MAAAA,IAAA,GAAAC,OAAA;AAIA,MAAMC,QAAQ,GAAG,MAAM;AAMvB,MAAaC,kBAAkB;EAc9BC,YAAoBC,EAAsC;IACzD,IAAI,CAACA,EAAE,GAAGA,EAAE;EACb;EAfO,aAAaC,WAAWA,CAACC,MAAmC,EAAEC,MAAc;IAClF,MAAMC,MAAM,GAAGT,IAAI,CAACO,MAAM,CAAC;IAC3B,IAAI;MACH,MAAME,MAAM,CAACJ,EAAE,CAACK,GAAG,CAACF,MAAM,CAAC,CAAC,CAAC;KAC7B,CAAC,OAAOG,KAAK,EAAE;MACf,MAAMF,MAAM,CAACJ,EAAE,CAACO,MAAM,CAACJ,MAAM,CAAC;;IAE/B,MAAMH,EAAE,GAAGI,MAAM,CAACI,GAAG,CAAiBL,MAAM,CAAC;IAC7C,OAAO,IAAIL,kBAAkB,CAACE,EAAE,CAAC;EAClC;EAQO,MAAMS,MAAMA,CAACC,KAAa;IAChC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,CAACF,KAAK,CAAC;IAC9C,IAAIC,QAAQ,EAAE;MACb,MAAM,IAAI,CAACX,EAAE,CAACa,OAAO,CAACF,QAAQ,CAACG,GAAG,EAAEH,QAAQ,CAACI,IAAI,CAAC;;EAEpD;EAEO,MAAMV,GAAGA,CAACK,KAAa;IAC7B,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,CAACF,KAAK,CAAC;IAC9C,OAAOC,QAAQ,GAAGK,MAAM,CAACC,IAAI,CAACN,QAAQ,CAACO,IAAI,EAAErB,QAAQ,CAAC,GAAGsB,SAAS;EACnE;EAEO,MAAMC,IAAIA,CAAA;IAChB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACrB,EAAE,CAACoB,IAAI,EAAE;IACrC,OAAOC,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,CAAC;EAC1C;EAEO,MAAMC,GAAGA,CAAChB,KAAa,EAAEQ,IAAY;IAC3C,MAAMS,WAAW,GAAmB;MACnCb,GAAG,EAAEJ,KAAK;MACVQ,IAAI,EAAEA,IAAI,CAACU,QAAQ,CAAC/B,QAAQ;KAC5B;IAED;IACA,MAAMgC,gBAAgB,GAAG,MAAM,IAAI,CAACjB,WAAW,CAACF,KAAK,CAAC;IACtD,IAAImB,gBAAgB,EAAE;MACrBF,WAAW,CAACZ,IAAI,GAAGc,gBAAgB,CAACd,IAAI;;IAGzC,MAAM,IAAI,CAACf,EAAE,CAAC8B,MAAM,CAACH,WAAW,CAAC;EAClC;EAEQ,MAAMf,WAAWA,CAACF,KAAa;IACtC,IAAI;MACH,OAAO,MAAM,IAAI,CAACV,EAAE,CAACK,GAAG,CAACK,KAAK,CAAC;KAC/B,CAAC,OAAOJ,KAAK,EAAE;MACf;IAAA;IAED,OAAOa,SAAS;EACjB;;AAzDDY,OAAA,CAAAjC,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}