{"ast":null,"code":"/*\n * utils.js: Utility functions for the nconf module.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar fs = require('fs'),\n  async = require('async'),\n  formats = require('./formats'),\n  Memory = require('./stores/memory').Memory;\nvar common = exports;\n\n//\n// ### function path (key)\n// #### @key {string} The ':' delimited key to split\n// Returns a fully-qualified path to a nested nconf key.\n// If given null or undefined it should return an empty path.\n// '' should still be respected as a path.\n//\ncommon.path = function (key, separator) {\n  separator = separator || ':';\n  return key == null ? [] : key.split(separator);\n};\n\n//\n// ### function key (arguments)\n// Returns a `:` joined string from the `arguments`.\n//\ncommon.key = function () {\n  return Array.prototype.slice.call(arguments).join(':');\n};\n\n//\n// ### function key (arguments)\n// Returns a joined string from the `arguments`,\n// first argument is the join delimiter.\n//\ncommon.keyed = function () {\n  return Array.prototype.slice.call(arguments, 1).join(arguments[0]);\n};\n\n//\n// ### function loadFiles (files, callback)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// #### @callback {function} Continuation to respond to when complete.\n// Loads all the data in the specified `files`.\n//\ncommon.loadFiles = function (files, callback) {\n  if (!files) {\n    return callback(null, {});\n  }\n  var options = Array.isArray(files) ? {\n    files: files\n  } : files;\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  options.format = options.format || formats.json;\n  function parseFile(file, next) {\n    fs.readFile(file, function (err, data) {\n      return !err ? next(null, options.format.parse(data.toString())) : next(err);\n    });\n  }\n  async.map(options.files, parseFile, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n};\n\n//\n// ### function loadFilesSync (files)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// Loads all the data in the specified `files` synchronously.\n//\ncommon.loadFilesSync = function (files) {\n  if (!files) {\n    return;\n  }\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  var options = Array.isArray(files) ? {\n    files: files\n  } : files;\n  options.format = options.format || formats.json;\n  return common.merge(options.files.map(function (file) {\n    return options.format.parse(fs.readFileSync(file, 'utf8'));\n  }));\n};\n\n//\n// ### function merge (objs)\n// #### @objs {Array} Array of object literals to merge\n// Merges the specified `objs` using a temporary instance\n// of `stores.Memory`.\n//\ncommon.merge = function (objs) {\n  var store = new Memory();\n  objs.forEach(function (obj) {\n    Object.keys(obj).forEach(function (key) {\n      store.merge(key, obj[key]);\n    });\n  });\n  return store.store;\n};\n\n//\n// ### function capitalize (str)\n// #### @str {string} String to capitalize\n// Capitalizes the specified `str`.\n//\ncommon.capitalize = function (str) {\n  return str && str[0].toUpperCase() + str.slice(1);\n};\n\n//\n// ### function parseValues (any)\n// #### @any {string} String to parse as native data-type or return as is\n// try to parse `any` as a native data-type\n//\ncommon.parseValues = function (value) {\n  var val = value;\n  try {\n    val = JSON.parse(value);\n  } catch (ignore) {\n    // Check for any other well-known strings that should be \"parsed\"\n    if (value === 'undefined') {\n      val = void 0;\n    }\n  }\n  return val;\n};\n\n//\n// ### function transform(map, fn)\n// #### @map {object} Object of key/value pairs to apply `fn` to\n// #### @fn {function} Transformation function that will be applied to every key/value pair\n// transform a set of key/value pairs and return the transformed result\ncommon.transform = function (map, fn) {\n  var pairs = Object.keys(map).map(function (key) {\n    var obj = {\n      key: key,\n      value: map[key]\n    };\n    var result = fn.call(null, obj);\n    if (!result) {\n      return null;\n    } else if (result.key) {\n      return result;\n    }\n    var error = new Error('Transform function passed to store returned an invalid format: ' + JSON.stringify(result));\n    error.name = 'RuntimeError';\n    throw error;\n  });\n  return pairs.filter(function (pair) {\n    return pair !== null;\n  }).reduce(function (accumulator, pair) {\n    accumulator[pair.key] = pair.value;\n    return accumulator;\n  }, {});\n};","map":{"version":3,"names":["fs","require","async","formats","Memory","common","exports","path","key","separator","split","Array","prototype","slice","call","arguments","join","keyed","loadFiles","files","callback","options","isArray","format","json","parseFile","file","next","readFile","err","data","parse","toString","map","objs","merge","loadFilesSync","readFileSync","store","forEach","obj","Object","keys","capitalize","str","toUpperCase","parseValues","value","val","JSON","ignore","transform","fn","pairs","result","error","Error","stringify","name","filter","pair","reduce","accumulator"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/nconf/lib/nconf/common.js"],"sourcesContent":["/*\n * utils.js: Utility functions for the nconf module.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar fs = require('fs'),\n    async = require('async'),\n    formats = require('./formats'),\n    Memory = require('./stores/memory').Memory;\n\nvar common = exports;\n\n//\n// ### function path (key)\n// #### @key {string} The ':' delimited key to split\n// Returns a fully-qualified path to a nested nconf key.\n// If given null or undefined it should return an empty path.\n// '' should still be respected as a path.\n//\ncommon.path = function (key, separator) {\n  separator = separator || ':';\n  return key == null ? [] : key.split(separator);\n};\n\n//\n// ### function key (arguments)\n// Returns a `:` joined string from the `arguments`.\n//\ncommon.key = function () {\n  return Array.prototype.slice.call(arguments).join(':');\n};\n\n//\n// ### function key (arguments)\n// Returns a joined string from the `arguments`,\n// first argument is the join delimiter.\n//\ncommon.keyed = function () {\n  return Array.prototype.slice.call(arguments, 1).join(arguments[0]);\n};\n\n//\n// ### function loadFiles (files, callback)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// #### @callback {function} Continuation to respond to when complete.\n// Loads all the data in the specified `files`.\n//\ncommon.loadFiles = function (files, callback) {\n  if (!files) {\n    return callback(null, {});\n  }\n\n  var options = Array.isArray(files) ? { files: files } : files;\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  options.format = options.format || formats.json;\n\n  function parseFile (file, next) {\n    fs.readFile(file, function (err, data) {\n      return !err\n        ? next(null, options.format.parse(data.toString()))\n        : next(err);\n    });\n  }\n\n  async.map(options.files, parseFile, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n};\n\n//\n// ### function loadFilesSync (files)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// Loads all the data in the specified `files` synchronously.\n//\ncommon.loadFilesSync = function (files) {\n  if (!files) {\n    return;\n  }\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  var options = Array.isArray(files) ? { files: files } : files;\n  options.format = options.format || formats.json;\n\n  return common.merge(options.files.map(function (file) {\n    return options.format.parse(fs.readFileSync(file, 'utf8'));\n  }));\n};\n\n//\n// ### function merge (objs)\n// #### @objs {Array} Array of object literals to merge\n// Merges the specified `objs` using a temporary instance\n// of `stores.Memory`.\n//\ncommon.merge = function (objs) {\n  var store = new Memory();\n\n  objs.forEach(function (obj) {\n    Object.keys(obj).forEach(function (key) {\n      store.merge(key, obj[key]);\n    });\n  });\n\n  return store.store;\n};\n\n//\n// ### function capitalize (str)\n// #### @str {string} String to capitalize\n// Capitalizes the specified `str`.\n//\ncommon.capitalize = function (str) {\n  return str && str[0].toUpperCase() + str.slice(1);\n};\n\n//\n// ### function parseValues (any)\n// #### @any {string} String to parse as native data-type or return as is\n// try to parse `any` as a native data-type\n//\ncommon.parseValues = function (value) {\n  var val = value;\n  \n  try {\n    val = JSON.parse(value);\n  } catch (ignore) {\n    // Check for any other well-known strings that should be \"parsed\"\n    if (value === 'undefined'){\n      val = void 0;\n    }\n  }\n\n  return val;\n};\n\n//\n// ### function transform(map, fn)\n// #### @map {object} Object of key/value pairs to apply `fn` to\n// #### @fn {function} Transformation function that will be applied to every key/value pair\n// transform a set of key/value pairs and return the transformed result\ncommon.transform = function(map, fn) {\n  var pairs = Object.keys(map).map(function(key) {\n    var obj = { key: key, value: map[key]};\n    var result = fn.call(null, obj);\n\n    if (!result) {\n      return null;\n    } else if (result.key) {\n      return result;\n    }\n\n    var error = new Error('Transform function passed to store returned an invalid format: ' + JSON.stringify(result));\n    error.name = 'RuntimeError';\n    throw error;\n  });\n\n\n  return pairs\n    .filter(function(pair) {\n      return pair !== null;\n    })\n    .reduce(function(accumulator, pair) {\n      accumulator[pair.key] = pair.value;\n      return accumulator;\n    }, {});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}