{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Endorser';\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst ServiceEndpoint = require('./ServiceEndpoint');\nconst fabproto6 = require('fabric-protos').services;\nconst logger = getLogger(TYPE);\n\n/**\n * The Endorser class represents a peer in the target blockchain network.\n * The application can send endorsement proposals, and query requests through this\n * class.\n *\n * @class\n * @extends ServiceEndpoint\n */\nclass Endorser extends ServiceEndpoint {\n  /**\n   * Construct a Endorser object with the name. A Endorser object encapsulates the\n   * properties of an endorsing peer and the interactions with it\n   * via the grpc service API. Endorser objects are used by the {@link Client} objects to\n   * send channel-agnostic requests such as querying peers for\n   * installed chaincodes, etc. They are also used by the {@link Channel} objects to\n   * send channel-aware requests such as instantiating chaincodes, and invoking\n   * transactions.\n   * Use the connect method with options to establish a\n   * connection with the fabric network endpoint.\n   *\n   * @param {string} name - The name of this Endorser\n   * @param {Client} client - The client instance\n   * @param {string} [mspid] - The mspid (organization) of this Endorser\n   * @returns {Endorser} The Endorser instance.\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let client = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('client');\n    let mspid = arguments.length > 2 ? arguments[2] : undefined;\n    logger.debug(`${TYPE}.constructor[${name}] - start `);\n    super(name, client, mspid);\n    this.type = TYPE;\n    this.serviceClass = fabproto6.protos.Endorser;\n\n    // initialized with legacy system chaincodes that all peers have that do\n    // not have endorsement policies and therefore discovery will not show\n    this.chaincodes = [];\n    this.chaincodes = this.chaincodes.concat(module.exports.SYSTEMCHAINCODES);\n    // if discovered chaincodes\n    this.discovered = false;\n  }\n\n  /**\n   * Add a chaincode name or ID to this Peer. This will aid in\n   * determining if this peer should be used to endorse.\n   *\n   * This will primarily be used by the {@link DiscoveryService} when\n   * adding peers to a channel based on the discovery results\n   *\n   * @param {String} chaincodeName\n   */\n  addChaincode(chaincodeName) {\n    const method = `addChaincode[${this.name}]`;\n    if (chaincodeName) {\n      if (this.hasChaincode(chaincodeName, false)) {\n        logger.debug(`${method} - chaincode already exist on this endorser - ${chaincodeName}`);\n      } else {\n        this.chaincodes.push(chaincodeName);\n        logger.debug(`${method} - chaincode added to this endorser - ${chaincodeName}`);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Check if this peer has the chaincode on it's list.\n   * If the list is empty then this peer has not been told of it's chaincodes\n   * and therefore might be running the chaincode in question.\n   * @param {String} chaincodeName\n   * @param {boolean} [maybe] Optional, default true, if noMaybe is true then\n   * this method will return true when the peer does not have any chaincodes on\n   * the list.\n   */\n  hasChaincode(chaincodeName) {\n    let maybe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const method = `hasChaincode[${this.name}]`;\n    if (chaincodeName) {\n      for (const chaincode of this.chaincodes) {\n        if (chaincodeName === chaincode) {\n          logger.debug(`${method} - chaincode found on this endorser discovered chaincodes - ${chaincodeName}`);\n          return true;\n        }\n      }\n      if (!this.discovered && maybe) {\n        logger.debug(`${method} - peer has not been checked by discovery for chaincodes - ${chaincodeName} might be installed`);\n        return true;\n      }\n    }\n    logger.debug(`${method} - chaincode not found on this endorser - ${chaincodeName}`);\n    return false;\n  }\n\n  /**\n   * Send an endorsement proposal to an endorser. This is used to call an\n   * endorsing peer to execute a chaincode to process a transaction proposal,\n   * or runs queries.\n   *\n   * @param {Envelope} signedProposal - A signed proposal envelope that\n   *  has been signed\n   * @param {Number} timeout - A number indicating milliseconds to wait on the\n   *  response before rejecting the promise with a timeout error. This\n   *  overrides the requestTimeout config connection setting of this instance.\n   * @returns {Promise} A Promise for a Object that is the Protobuf\n   *  'protos.ProposalResponse' see fabric-protos/protos/peer/proposal_response.proto\n   */\n  sendProposal(signedProposal, timeout) {\n    const method = `sendProposal[${this.name}]`;\n    logger.debug(`${method} - start -- ${this.name} ${this.endpoint.url} timeout:${timeout}`);\n    return new Promise((resolve, reject) => {\n      logger.debug('%s - running promise', method);\n      if (!signedProposal) {\n        checkParameter('signedProposal');\n      }\n      if (this.connected === false) {\n        throw Error(`Broadcast Client ${this.name} ${this.endpoint.url} is not connected`);\n      }\n      let rto = this.options.requestTimeout;\n      if (typeof timeout === 'number') {\n        rto = timeout;\n      }\n      const send_timeout = setTimeout(() => {\n        logger.error(`${method} - ${this.name} timed out after: ${rto}`);\n        const return_error = new Error('REQUEST TIMEOUT');\n        return reject(return_error);\n      }, rto);\n      this.service.processProposal(signedProposal, (err, proposalResponse) => {\n        clearTimeout(send_timeout);\n        if (err) {\n          logger.error(`${method} - Received error response from: ${this.endpoint.url} error: ${err}`);\n          if (err instanceof Error) {\n            reject(err);\n          } else {\n            const out_error = new Error(err);\n            reject(out_error);\n          }\n        } else {\n          if (proposalResponse) {\n            logger.debug(`${method} - Received proposal response from peer \"${this.endpoint.url}\": status - ${proposalResponse.response && proposalResponse.response.status}`);\n            if (proposalResponse.response && proposalResponse.response.status) {\n              resolve(proposalResponse);\n            } else {\n              const return_error = new Error(`GRPC service failed to get a proper response from the peer \"${this.endpoint.url}\".`);\n              reject(return_error);\n            }\n          } else {\n            const return_error = new Error(`GRPC service got a null or undefined response from the peer \"${this.endpoint.url}\".`);\n            reject(return_error);\n          }\n        }\n      });\n    }).then(result => this.getCharacteristics(result), error => {\n      this.getCharacteristics(error);\n      logger.error(`${method} - rejecting with: ${error}`);\n      throw error;\n    });\n  }\n}\nmodule.exports = Endorser;\nmodule.exports.SYSTEMCHAINCODES = ['cscc', 'qscc', 'lscc', 'vscc', 'escc'];","map":{"version":3,"names":["TYPE","checkParameter","getLogger","require","ServiceEndpoint","fabproto6","services","logger","Endorser","constructor","name","arguments","length","undefined","client","mspid","debug","type","serviceClass","protos","chaincodes","concat","module","exports","SYSTEMCHAINCODES","discovered","addChaincode","chaincodeName","method","hasChaincode","push","maybe","chaincode","sendProposal","signedProposal","timeout","endpoint","url","Promise","resolve","reject","connected","Error","rto","options","requestTimeout","send_timeout","setTimeout","error","return_error","service","processProposal","err","proposalResponse","clearTimeout","out_error","response","status","then","result","getCharacteristics"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Endorser.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Endorser';\n\nconst {checkParameter, getLogger} = require('./Utils.js');\nconst ServiceEndpoint = require('./ServiceEndpoint');\nconst fabproto6 = require('fabric-protos').services;\n\nconst logger = getLogger(TYPE);\n\n/**\n * The Endorser class represents a peer in the target blockchain network.\n * The application can send endorsement proposals, and query requests through this\n * class.\n *\n * @class\n * @extends ServiceEndpoint\n */\nclass Endorser extends ServiceEndpoint {\n\n\t/**\n\t * Construct a Endorser object with the name. A Endorser object encapsulates the\n\t * properties of an endorsing peer and the interactions with it\n\t * via the grpc service API. Endorser objects are used by the {@link Client} objects to\n\t * send channel-agnostic requests such as querying peers for\n\t * installed chaincodes, etc. They are also used by the {@link Channel} objects to\n\t * send channel-aware requests such as instantiating chaincodes, and invoking\n\t * transactions.\n\t * Use the connect method with options to establish a\n\t * connection with the fabric network endpoint.\n\t *\n\t * @param {string} name - The name of this Endorser\n\t * @param {Client} client - The client instance\n\t * @param {string} [mspid] - The mspid (organization) of this Endorser\n\t * @returns {Endorser} The Endorser instance.\n\t */\n\tconstructor(name = checkParameter('name'), client = checkParameter('client'), mspid) {\n\t\tlogger.debug(`${TYPE}.constructor[${name}] - start `);\n\t\tsuper(name, client, mspid);\n\n\t\tthis.type = TYPE;\n\t\tthis.serviceClass = fabproto6.protos.Endorser;\n\n\t\t// initialized with legacy system chaincodes that all peers have that do\n\t\t// not have endorsement policies and therefore discovery will not show\n\t\tthis.chaincodes = [];\n\t\tthis.chaincodes = this.chaincodes.concat(module.exports.SYSTEMCHAINCODES);\n\t\t// if discovered chaincodes\n\t\tthis.discovered = false;\n\t}\n\n\t/**\n\t * Add a chaincode name or ID to this Peer. This will aid in\n\t * determining if this peer should be used to endorse.\n\t *\n\t * This will primarily be used by the {@link DiscoveryService} when\n\t * adding peers to a channel based on the discovery results\n\t *\n\t * @param {String} chaincodeName\n\t */\n\taddChaincode(chaincodeName) {\n\t\tconst method = `addChaincode[${this.name}]`;\n\n\t\tif (chaincodeName) {\n\t\t\tif (this.hasChaincode(chaincodeName, false)) {\n\t\t\t\tlogger.debug(`${method} - chaincode already exist on this endorser - ${chaincodeName}`);\n\t\t\t} else {\n\t\t\t\tthis.chaincodes.push(chaincodeName);\n\t\t\t\tlogger.debug(`${method} - chaincode added to this endorser - ${chaincodeName}`);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Check if this peer has the chaincode on it's list.\n\t * If the list is empty then this peer has not been told of it's chaincodes\n\t * and therefore might be running the chaincode in question.\n\t * @param {String} chaincodeName\n\t * @param {boolean} [maybe] Optional, default true, if noMaybe is true then\n\t * this method will return true when the peer does not have any chaincodes on\n\t * the list.\n\t */\n\thasChaincode(chaincodeName, maybe = true) {\n\t\tconst method = `hasChaincode[${this.name}]`;\n\n\t\tif (chaincodeName) {\n\t\t\tfor (const chaincode of this.chaincodes) {\n\t\t\t\tif (chaincodeName === chaincode) {\n\t\t\t\t\tlogger.debug(`${method} - chaincode found on this endorser discovered chaincodes - ${chaincodeName}`);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.discovered && maybe) {\n\t\t\t\tlogger.debug(`${method} - peer has not been checked by discovery for chaincodes - ${chaincodeName} might be installed`);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${method} - chaincode not found on this endorser - ${chaincodeName}`);\n\t\treturn false;\n\t}\n\n\t/**\n\t * Send an endorsement proposal to an endorser. This is used to call an\n\t * endorsing peer to execute a chaincode to process a transaction proposal,\n\t * or runs queries.\n\t *\n\t * @param {Envelope} signedProposal - A signed proposal envelope that\n\t *  has been signed\n\t * @param {Number} timeout - A number indicating milliseconds to wait on the\n\t *  response before rejecting the promise with a timeout error. This\n\t *  overrides the requestTimeout config connection setting of this instance.\n\t * @returns {Promise} A Promise for a Object that is the Protobuf\n\t *  'protos.ProposalResponse' see fabric-protos/protos/peer/proposal_response.proto\n\t */\n\tsendProposal(signedProposal, timeout) {\n\t\tconst method = `sendProposal[${this.name}]`;\n\t\tlogger.debug(`${method} - start -- ${this.name} ${this.endpoint.url} timeout:${timeout}`);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlogger.debug('%s - running promise', method);\n\n\t\t\tif (!signedProposal) {\n\t\t\t\tcheckParameter('signedProposal');\n\t\t\t}\n\t\t\tif (this.connected === false) {\n\t\t\t\tthrow Error(`Broadcast Client ${this.name} ${this.endpoint.url} is not connected`);\n\t\t\t}\n\n\t\t\tlet rto = this.options.requestTimeout;\n\t\t\tif (typeof timeout === 'number') {\n\t\t\t\trto = timeout;\n\t\t\t}\n\t\t\tconst send_timeout = setTimeout(() => {\n\t\t\t\tlogger.error(`${method} - ${this.name} timed out after: ${rto}`);\n\t\t\t\tconst return_error = new Error('REQUEST TIMEOUT');\n\t\t\t\treturn reject(return_error);\n\t\t\t}, rto);\n\n\t\t\tthis.service.processProposal(signedProposal, (err, proposalResponse) => {\n\t\t\t\tclearTimeout(send_timeout);\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.error(`${method} - Received error response from: ${this.endpoint.url} error: ${err}`);\n\t\t\t\t\tif (err instanceof Error) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst out_error = new Error(err);\n\t\t\t\t\t\treject(out_error);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (proposalResponse) {\n\t\t\t\t\t\tlogger.debug(`${method} - Received proposal response from peer \"${this.endpoint.url}\": status - ${proposalResponse.response && proposalResponse.response.status}`);\n\t\t\t\t\t\tif (proposalResponse.response && proposalResponse.response.status) {\n\t\t\t\t\t\t\tresolve(proposalResponse);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst return_error = new Error(`GRPC service failed to get a proper response from the peer \"${this.endpoint.url}\".`);\n\t\t\t\t\t\t\treject(return_error);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst return_error = new Error(`GRPC service got a null or undefined response from the peer \"${this.endpoint.url}\".`);\n\t\t\t\t\t\treject(return_error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(\n\t\t\tresult => this.getCharacteristics(result),\n\t\t\terror => {\n\t\t\t\tthis.getCharacteristics(error);\n\t\t\t\tlogger.error(`${method} - rejecting with: ${error}`);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = Endorser;\nmodule.exports.SYSTEMCHAINCODES = ['cscc', 'qscc', 'lscc', 'vscc', 'escc'];\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}