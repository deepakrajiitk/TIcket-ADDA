{"ast":null,"code":"/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst fabproto6 = require('fabric-protos');\n\n/**\n * This interface is shared within the peer and client API of the membership service provider.\n * Identity interface defines operations associated to a \"certificate\".\n * That is, the public part of the identity could be thought to be a certificate,\n * and offers solely signature verification capabilities. This is to be used\n * at the client side when validating certificates that endorsements are signed\n * with, and verifying signatures that correspond to these certificates.\n *\n * @class\n */\nclass Identity {\n  /**\n   * @param {string} certificate HEX string for the PEM encoded certificate\n   * @param {module:api.Key} publicKey The public key represented by the certificate\n   * @param {string} mspId The associated MSP's mspId that manages this identity\n   * @param {module:api.CryptoSuite} cryptoSuite The underlying {@link CryptoSuite} implementation for the digital\n   * signature algorithm\n   */\n  constructor(certificate, publicKey, mspId, cryptoSuite) {\n    if (!certificate) {\n      throw new Error('Missing required parameter \"certificate\".');\n    }\n    if (!mspId) {\n      throw new Error('Missing required parameter \"mspId\".');\n    }\n    this._certificate = certificate;\n    this._publicKey = publicKey;\n    this._mspId = mspId;\n    this._cryptoSuite = cryptoSuite;\n  }\n\n  /**\n   * Returns the identifier of the Membser Service Provider that manages\n   * this identity in terms of being able to understand the key algorithms\n   * and have access to the trusted roots needed to validate it\n   * @returns {string}\n   */\n  getMSPId() {\n    return this._mspId;\n  }\n\n  /**\n   * This uses the rules that govern this identity to validate it.\n   * E.g., if it is a fabric TCert implemented as identity, validate\n   * will check the TCert signature against the assumed root certificate\n   * authority.\n   * @returns {boolean}\n   */\n  isValid() {\n    return true;\n  }\n\n  /**\n   * Returns the organization units this identity is related to\n   * as long as this is public information. In certain implementations\n   * this could be implemented by certain attributes that are publicly\n   * associated to that identity, or the identifier of the root certificate\n   * authority that has provided signatures on this certificate.\n   * Examples:\n   *  - OrganizationUnit of a fabric-tcert that was signed by TCA under name\n   *    \"Organization 1\", would be \"Organization 1\".\n   *  - OrganizationUnit of an alternative implementation of tcert signed by a public\n   *    CA used by organization \"Organization 1\", could be provided in the clear\n   *    as part of that tcert structure that this call would be able to return.\n   * @returns {string}\n   */\n  getOrganizationUnits() {\n    return 'dunno!';\n  }\n\n  /**\n   * Verify a signature over some message using this identity as reference\n   * @param {byte[]} msg The message to be verified\n   * @param {byte[]} signature The signature generated against the message \"msg\"\n   * @param {Object} opts Options include 'policy' and 'label' TODO (not implemented yet)\n   */\n  verify(msg, signature, opts) {\n    // TODO: retrieve the publicKey from the certificate\n    if (!this._publicKey) {\n      throw new Error('Missing public key for this Identity');\n    }\n    if (!this._cryptoSuite) {\n      throw new Error('Missing cryptoSuite for this Identity');\n    }\n    return this._cryptoSuite.verify(this._publicKey, signature, msg);\n  }\n\n  /**\n   * Verify attributes against the given attribute spec\n   * TODO: when this method's design is finalized\n   */\n  verifyAttributes(proof, attributeProofSpec) {\n    return true;\n  }\n\n  /**\n   * Converts this identity to bytes\n   * @returns {Buffer} protobuf-based serialization with two fields: \"mspid\" and \"certificate PEM bytes\"\n   */\n  serialize() {\n    const serializedIdentity = fabproto6.msp.SerializedIdentity.create({\n      mspid: this.getMSPId(),\n      id_bytes: Buffer.from(this._certificate)\n    });\n    const serializedIdentityBuf = fabproto6.msp.SerializedIdentity.encode(serializedIdentity).finish();\n    return serializedIdentityBuf;\n  }\n}\nmodule.exports = Identity;","map":{"version":3,"names":["fabproto6","require","Identity","constructor","certificate","publicKey","mspId","cryptoSuite","Error","_certificate","_publicKey","_mspId","_cryptoSuite","getMSPId","isValid","getOrganizationUnits","verify","msg","signature","opts","verifyAttributes","proof","attributeProofSpec","serialize","serializedIdentity","msp","SerializedIdentity","create","mspid","id_bytes","Buffer","from","serializedIdentityBuf","encode","finish","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Identity.js"],"sourcesContent":["/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst fabproto6 = require('fabric-protos');\n\n/**\n * This interface is shared within the peer and client API of the membership service provider.\n * Identity interface defines operations associated to a \"certificate\".\n * That is, the public part of the identity could be thought to be a certificate,\n * and offers solely signature verification capabilities. This is to be used\n * at the client side when validating certificates that endorsements are signed\n * with, and verifying signatures that correspond to these certificates.\n *\n * @class\n */\nclass Identity {\n\t/**\n\t * @param {string} certificate HEX string for the PEM encoded certificate\n\t * @param {module:api.Key} publicKey The public key represented by the certificate\n\t * @param {string} mspId The associated MSP's mspId that manages this identity\n\t * @param {module:api.CryptoSuite} cryptoSuite The underlying {@link CryptoSuite} implementation for the digital\n\t * signature algorithm\n\t */\n\tconstructor(certificate, publicKey, mspId, cryptoSuite) {\n\n\t\tif (!certificate) {\n\t\t\tthrow new Error('Missing required parameter \"certificate\".');\n\t\t}\n\n\t\tif (!mspId) {\n\t\t\tthrow new Error('Missing required parameter \"mspId\".');\n\t\t}\n\n\t\tthis._certificate = certificate;\n\t\tthis._publicKey = publicKey;\n\t\tthis._mspId = mspId;\n\t\tthis._cryptoSuite = cryptoSuite;\n\t}\n\n\t/**\n\t * Returns the identifier of the Membser Service Provider that manages\n\t * this identity in terms of being able to understand the key algorithms\n\t * and have access to the trusted roots needed to validate it\n\t * @returns {string}\n\t */\n\tgetMSPId() {\n\t\treturn this._mspId;\n\t}\n\n\t/**\n\t * This uses the rules that govern this identity to validate it.\n\t * E.g., if it is a fabric TCert implemented as identity, validate\n\t * will check the TCert signature against the assumed root certificate\n\t * authority.\n\t * @returns {boolean}\n\t */\n\tisValid() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the organization units this identity is related to\n\t * as long as this is public information. In certain implementations\n\t * this could be implemented by certain attributes that are publicly\n\t * associated to that identity, or the identifier of the root certificate\n\t * authority that has provided signatures on this certificate.\n\t * Examples:\n\t *  - OrganizationUnit of a fabric-tcert that was signed by TCA under name\n\t *    \"Organization 1\", would be \"Organization 1\".\n\t *  - OrganizationUnit of an alternative implementation of tcert signed by a public\n\t *    CA used by organization \"Organization 1\", could be provided in the clear\n\t *    as part of that tcert structure that this call would be able to return.\n\t * @returns {string}\n\t */\n\tgetOrganizationUnits() {\n\t\treturn 'dunno!';\n\t}\n\n\t/**\n\t * Verify a signature over some message using this identity as reference\n\t * @param {byte[]} msg The message to be verified\n\t * @param {byte[]} signature The signature generated against the message \"msg\"\n\t * @param {Object} opts Options include 'policy' and 'label' TODO (not implemented yet)\n\t */\n\tverify(msg, signature, opts) {\n\t\t// TODO: retrieve the publicKey from the certificate\n\t\tif (!this._publicKey) {\n\t\t\tthrow new Error('Missing public key for this Identity');\n\t\t}\n\t\tif (!this._cryptoSuite) {\n\t\t\tthrow new Error('Missing cryptoSuite for this Identity');\n\t\t}\n\t\treturn this._cryptoSuite.verify(this._publicKey, signature, msg);\n\t}\n\n\t/**\n\t * Verify attributes against the given attribute spec\n\t * TODO: when this method's design is finalized\n\t */\n\tverifyAttributes(proof, attributeProofSpec) {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Converts this identity to bytes\n\t * @returns {Buffer} protobuf-based serialization with two fields: \"mspid\" and \"certificate PEM bytes\"\n\t */\n\tserialize() {\n\t\tconst serializedIdentity = fabproto6.msp.SerializedIdentity.create({\n\t\t\tmspid: this.getMSPId(),\n\t\t\tid_bytes: Buffer.from(this._certificate)\n\t\t});\n\t\tconst serializedIdentityBuf = fabproto6.msp.SerializedIdentity.encode(serializedIdentity).finish();\n\n\t\treturn serializedIdentityBuf;\n\t}\n}\n\nmodule.exports = Identity;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,CAAC;EACd;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,WAAWA,CAACC,WAAW,EAAEC,SAAS,EAAEC,KAAK,EAAEC,WAAW,EAAE;IAEvD,IAAI,CAACH,WAAW,EAAE;MACjB,MAAM,IAAII,KAAK,CAAC,2CAA2C,CAAC;IAC7D;IAEA,IAAI,CAACF,KAAK,EAAE;MACX,MAAM,IAAIE,KAAK,CAAC,qCAAqC,CAAC;IACvD;IAEA,IAAI,CAACC,YAAY,GAAGL,WAAW;IAC/B,IAAI,CAACM,UAAU,GAAGL,SAAS;IAC3B,IAAI,CAACM,MAAM,GAAGL,KAAK;IACnB,IAAI,CAACM,YAAY,GAAGL,WAAW;EAChC;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCM,QAAQA,CAAA,EAAG;IACV,OAAO,IAAI,CAACF,MAAM;EACnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCG,OAAOA,CAAA,EAAG;IACT,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,oBAAoBA,CAAA,EAAG;IACtB,OAAO,QAAQ;EAChB;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,MAAMA,CAACC,GAAG,EAAEC,SAAS,EAAEC,IAAI,EAAE;IAC5B;IACA,IAAI,CAAC,IAAI,CAACT,UAAU,EAAE;MACrB,MAAM,IAAIF,KAAK,CAAC,sCAAsC,CAAC;IACxD;IACA,IAAI,CAAC,IAAI,CAACI,YAAY,EAAE;MACvB,MAAM,IAAIJ,KAAK,CAAC,uCAAuC,CAAC;IACzD;IACA,OAAO,IAAI,CAACI,YAAY,CAACI,MAAM,CAAC,IAAI,CAACN,UAAU,EAAEQ,SAAS,EAAED,GAAG,CAAC;EACjE;;EAEA;AACD;AACA;AACA;EACCG,gBAAgBA,CAACC,KAAK,EAAEC,kBAAkB,EAAE;IAC3C,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;EACCC,SAASA,CAAA,EAAG;IACX,MAAMC,kBAAkB,GAAGxB,SAAS,CAACyB,GAAG,CAACC,kBAAkB,CAACC,MAAM,CAAC;MAClEC,KAAK,EAAE,IAAI,CAACf,QAAQ,EAAE;MACtBgB,QAAQ,EAAEC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACtB,YAAY;IACxC,CAAC,CAAC;IACF,MAAMuB,qBAAqB,GAAGhC,SAAS,CAACyB,GAAG,CAACC,kBAAkB,CAACO,MAAM,CAACT,kBAAkB,CAAC,CAACU,MAAM,EAAE;IAElG,OAAOF,qBAAqB;EAC7B;AACD;AAEAG,MAAM,CAACC,OAAO,GAAGlC,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}