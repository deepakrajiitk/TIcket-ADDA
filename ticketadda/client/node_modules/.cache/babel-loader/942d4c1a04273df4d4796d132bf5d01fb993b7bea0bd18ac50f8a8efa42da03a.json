{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Proposal';\nconst settle = require('promise-settle');\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst logger = getLogger(TYPE);\nconst fabproto6 = require('fabric-protos');\nconst ServiceAction = require('./ServiceAction.js');\n\n/**\n * @classdesc\n * This is an base class represents a Proposal definition and the\n * base for actions on a proposal.\n * This class allows an application to contain all proposal attributes and\n * artifacts in one place during runtime. Use the {@link Endorsement}\n * {@link Query} and {@link Commit} to endorse, query,\n * and to commit a proposal.\n *\n * @class\n */\nclass Proposal extends ServiceAction {\n  /**\n   * Construct a Proposal object.\n   *\n   * @param {string} chaincodeId - The chaincode this proposal will execute\n   * @param {Channel} channel - The channel of this proposal\n   * @returns {Proposal} The Proposal instance.\n   */\n  constructor() {\n    let chaincodeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('chaincodeId');\n    let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('channel');\n    super(chaincodeId);\n    logger.debug(`${TYPE}.constructor[${chaincodeId}] - start `);\n    this.type = TYPE;\n    this.chaincodeId = chaincodeId;\n    this.channel = channel;\n\n    // to be used to build a discovery interest\n    this.noPrivateReads = false;\n    this.collectionsInterest = [];\n    this.chaincodesCollectionsInterest = [];\n  }\n\n  /**\n   * Returns the transaction ID used for the proposal\n   *\n   * @returns {string} The transaction ID of the proposal\n   */\n  getTransactionId() {\n    const method = `getTransactionId[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    if (!this._action || !this._action.transactionId) {\n      throw Error('The proposal has not been built');\n    }\n    return this._action.transactionId;\n  }\n\n  /**\n   * Returns a JSON object representing this proposal's chaincodes,\n   * collections and the no private reads as an \"interest\" for the\n   * Discovery Service.\n   * The {@link Discovery} will use an interest to build a query\n   * request for an endorsement plan to a Peer's Discovery service.\n   * Use the {@link Proposal#addCollectionInterest} to add collections\n   * for the chaincode of this proposal.\n   * Use the {@link Proposal#setNoPrivateReads} to set this \"no private reads\"\n   * setting for this proposal's chaincode. The default will be false\n   * when not set.\n   * Use the {@link Proposal#addChaincodeCollectionInterest} to add\n   * chaincodes and collections that this chaincode code will call.\n   * @example\n   *    [\n   *      { name: 'mychaincode', collectionNames: ['mycollection'] }\n   *    ]\n   * @example\n   *    [\n   *      { name: 'mychaincode', collectionNames: ['mycollection'], noPrivateReads: true }\n   *    ]\n   * @example\n   *    [\n   *      { name: \"mychaincode\", collectionNames: [\"mycollection\"], noPrivateReads: true }\n   *    ]\n   */\n  buildProposalInterest() {\n    const method = `buildProposalInterest[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    let interest = [];\n    const chaincode = {};\n    interest.push(chaincode);\n    chaincode.name = this.chaincodeId;\n    if (this.collectionsInterest.length > 0) {\n      chaincode.collectionNames = this.collectionsInterest;\n    }\n    chaincode.noPrivateReads = this.noPrivateReads;\n    if (this.chaincodesCollectionsInterest.length > 0) {\n      interest = interest.concat(this.chaincodesCollectionsInterest);\n    }\n    return interest;\n  }\n\n  /**\n   * Use this method to add collection names associated\n   * with this proposal's chaincode name. These will be\n   * used to build a Discovery interest. {@link Proposal#buildProposalInterest}\n   * @param {string} collectionName - collection name\n   */\n  addCollectionInterest(collectionName) {\n    const method = `addCollectionInterest[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    if (typeof collectionName === 'string') {\n      this.collectionsInterest.push(collectionName);\n    } else {\n      throw Error('Invalid collectionName parameter');\n    }\n    return this;\n  }\n\n  /**\n   * Use this method to set the \"no private reads\" of the discovery hint\n   * (interest) for the chaincode of this proposal.\n   * @param {boolean} noPrivateReads Indicates we do not need to read from private data\n   */\n  setNoPrivateReads(noPrivateReads) {\n    const method = `setNoPrivateReads[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    if (typeof noPrivateReads === 'boolean') {\n      this.noPrivateReads = noPrivateReads;\n    } else {\n      throw Error(`The \"no private reads\" setting must be boolean. :: ${noPrivateReads}`);\n    }\n  }\n\n  /**\n   * Use this method to add a chaincode name and the collection names\n   * that this proposal's chaincode will call along with the no private read\n   * setting. These will be used to build a Discovery interest when this proposal\n   * is used with the Discovery Service.\n   * @param {string} chaincodeId - chaincode name\n   * @param {boolean} noPrivateReads Indicates we do not need to read from private data\n   * @param  {...string} collectionNames - one or more collection names\n   */\n  addChaincodeNoPrivateReadsCollectionsInterest(chaincodeId, noPrivateReads) {\n    const method = `addChaincodeCollectionsInterest[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    if (typeof chaincodeId === 'string') {\n      const added_chaincode = {};\n      added_chaincode.name = chaincodeId;\n      added_chaincode.noPrivateReads = noPrivateReads ? true : false;\n      for (var _len = arguments.length, collectionNames = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        collectionNames[_key - 2] = arguments[_key];\n      }\n      if (collectionNames && collectionNames.length > 0) {\n        added_chaincode.collectionNames = collectionNames;\n      }\n      this.chaincodesCollectionsInterest.push(added_chaincode);\n    } else {\n      throw Error('Invalid chaincodeId parameter');\n    }\n    return this;\n  }\n\n  /**\n   * Use this method to add a chaincode name and collection names\n   * that this proposal's chaincode will call. These will be used\n   * to build a Discovery interest when this proposal is used with\n   * the Discovery Service.\n   * @param {string} chaincodeId - chaincode name\n   * @param  {...string} collectionNames - one or more collection names\n   */\n  addChaincodeCollectionsInterest(chaincodeId) {\n    const method = `addChaincodeCollectionsInterest[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    for (var _len2 = arguments.length, collectionNames = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      collectionNames[_key2 - 1] = arguments[_key2];\n    }\n    return this.addChaincodeNoPrivateReadsCollectionsInterest(chaincodeId, false, ...collectionNames);\n  }\n\n  /**\n   * @typedef {Object} BuildProposalRequest\n   * @property {string} [fcn] - Optional. The function name. May be used by\n   * the chaincode to control the flow within the chaincode. Default 'invoke'\n   * @property {string[]} [args] - Optional. The arguments needed by the\n   * chaincode execution. These should be strings or byte buffers.\n   * These will be converted into byte buffers before building the protobuf\n   * object to be sent to the fabric peer for endorsement.\n   * @property {Map} [transientMap] - Optional. A map with the key value pairs\n   * of the transient data.\n   * @property {boolean} [init] - Optional. If this proposal should be an\n   * chaincode initialization request. This will set the init setting in the\n   * protobuf object sent to the peer.\n   */\n\n  /**\n   * Use this method to build a proposal. The proposal will be stored\n   * internally and also returned as bytes. Use the bytes when signing\n   * the proposal externally. When signing the proposal externally the\n   * user object of the IdentityContext does not have to have\n   * a signing identity, only an identity that has the user's certificate is\n   * required. This identity will be used to build\n   * the protobuf objects of the proposal that must be signed later and sent\n   * to the fabric Peer for endorsement.\n   *\n   * @param {IdentityContext} idContext - Contains the {@link User} object\n   * needed to build this proposal.\n   * @param {BuildProposalRequest} request - The proposals values of the request.\n   */\n  build() {\n    let idContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('idContext');\n    let request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = `build[${this.chaincodeId}][${this.type}]`;\n    logger.debug('%s - start', method);\n    const {\n      fcn,\n      args = [],\n      transientMap,\n      init\n    } = request;\n    if (!Array.isArray(args)) {\n      throw Error('Proposal parameter \"args\" must be an array.');\n    }\n    this._reset();\n    if (transientMap) {\n      logger.debug('%s - adding transientMap', method);\n      this._action.transientMap = transientMap;\n    }\n    if (typeof init === 'boolean') {\n      this._action.init = init;\n    }\n    if (request.generateTransactionId !== false) {\n      idContext.calculateTransactionId();\n    }\n    this._action.transactionId = idContext.transactionId;\n    this._action.args = [];\n    if (fcn) {\n      this._action.fcn = fcn;\n      this._action.args.push(Buffer.from(this._action.fcn, 'utf8'));\n      logger.debug('%s - adding function %s', method, this._action.fcn);\n    } else {\n      logger.debug('%s - not adding function', method);\n    }\n    for (let i = 0; i < args.length; i++) {\n      logger.debug('%s - adding arg ==>%s<==', method, args[i]);\n      let arg;\n      if (args[i] instanceof Buffer) {\n        arg = args[i];\n      } else {\n        const arg_as_string = args[i].toString();\n        arg = Buffer.from(arg_as_string, 'utf8');\n      }\n      this._action.args.push(arg);\n    }\n\n    // build the proposal payload\n    const chaincodeID = fabproto6.protos.ChaincodeID.create({\n      name: this.chaincodeId,\n      version: this.chaincodeVersion || '',\n      path: this.chaincodePath || ''\n    });\n    const chaincodeInput = fabproto6.protos.ChaincodeInput.create({\n      args: this._action.args,\n      is_init: this._action.init\n    });\n    const chaincodeSpec = fabproto6.protos.ChaincodeSpec.create({\n      type: fabproto6.protos.ChaincodeSpec.Type.GOLANG,\n      chaincode_id: chaincodeID,\n      input: chaincodeInput\n    });\n    const chaincodeInvocationSpec = fabproto6.protos.ChaincodeInvocationSpec.create({\n      chaincode_spec: chaincodeSpec\n    });\n    const chaincodeInvocationSpecBuf = fabproto6.protos.ChaincodeInvocationSpec.encode(chaincodeInvocationSpec).finish();\n    const fields = {\n      input: chaincodeInvocationSpecBuf\n    };\n    if (this._action.transientMap) {\n      fields.TransientMap = this._action.transientMap;\n    }\n    const chaincodeProposalPayload = fabproto6.protos.ChaincodeProposalPayload.create(fields);\n    const chaincodeProposalPayloadBuf = fabproto6.protos.ChaincodeProposalPayload.encode(chaincodeProposalPayload).finish();\n    const channelHeaderBuf = this.channel.buildChannelHeader(fabproto6.common.HeaderType.ENDORSER_TRANSACTION, {\n      name: this.chaincodeId,\n      version: this.chaincodeVersion || '',\n      path: this.chaincodePath || ''\n    }, this._action.transactionId);\n\n    // save the header for use by the commit\n    this._action.header = this.buildHeader(idContext, channelHeaderBuf);\n    const headerBuf = fabproto6.common.Header.encode(this._action.header).finish();\n    this._action.proposal = fabproto6.protos.Proposal.create({\n      header: headerBuf,\n      payload: chaincodeProposalPayloadBuf\n    });\n    this._payload = fabproto6.protos.Proposal.encode(this._action.proposal).finish();\n    return this._payload;\n  }\n\n  /**\n   * @typedef {Object} SendProposalRequest\n   * @property {Endorser[]} [targets] - Optional. The peers to send the proposal.\n   * @property {ServiceHandler} - [handler] - Optional. The handler to send the proposal.\n   * @property {Number} [requestTimeout] - Optional. The request timeout\n   */\n\n  /**\n   * @typedef {Object} ProposalResponse\n   * @property {Error[]} errors -  errors returned from the endorsement\n   * @property {EndorsementResponse[]} responses - The endorsements returned from\n   *  the endorsing peers.\n   * @property {Buffer[]} queryResults - the results as extracted from the\n   *  endorsement {@link EndorsementResponse} from an {@link Query} endorsement\n   *  that was only a query and will not be committed.\n   */\n\n  /**\n   * @typedef {Object} EndorsementResponse\n   * This object is the protobuf object returned from the peer when doing\n   * an endorsement of a proposal. The following description is from the protobuf\n   * file fabric-protos/protos/peer/proposal_response.protos\n   * @example\n  // A ProposalResponse is returned from an endorser to the proposal submitter.\n  // The idea is that this message contains the endorser's response to the\n  // request of a client to perform an action over a chaincode (or more\n  // generically on the ledger); the response might be success/error (conveyed in\n  // the Response field) together with a description of the action and a\n  // signature over it by that endorser.  If a sufficient number of distinct\n  // endorsers agree on the same action and produce signature to that effect, a\n  // transaction can be generated and sent for ordering.\n  message ProposalResponse {\n  // Version indicates message protocol version\n  int32 version = 1;\n  \t// Timestamp is the time that the message\n  // was created as  defined by the sender\n  google.protobuf.Timestamp timestamp = 2;\n  \t// A response message indicating whether the\n  // endorsement of the action was successful\n  Response response = 4;\n  \t// The payload of response. It is the bytes of ProposalResponsePayload\n  bytes payload = 5;\n  \t// The endorsement of the proposal, basically\n  // the endorser's signature over the payload\n  Endorsement endorsement = 6;\n  }\n  // A response with a representation similar to an HTTP response that can\n  // be used within another message.\n  message Response {\n  // A status code that should follow the HTTP status codes.\n  int32 status = 1;\n  \t// A message associated with the response code.\n  string message = 2;\n  \t// A payload that can be used to include metadata with this response.\n  bytes payload = 3;\n  }\n  message Endorsement {\n  // Identity of the endorser (e.g. its certificate)\n  bytes endorser = 1;\n  \t// Signature of the payload included in ProposalResponse concatenated with\n  // the endorser's certificate; ie, sign(ProposalResponse.payload + endorser)\n  bytes signature = 2;\n  }\n   *\n   */\n\n  /**\n   * Send a signed transaction proposal to peer(s)\n   *\n   * @param {SendProposalRequest} request options\n   * @returns {ProposalResponse} The results of sending\n   */\n  async send() {\n    let request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const method = `send[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    const {\n      handler,\n      targets,\n      requestTimeout\n    } = request;\n    logger.debug('%s - requestTimeout %s', method, requestTimeout);\n    const signedEnvelope = this.getSignedProposal();\n    this._proposalResponses = [];\n    this._proposalErrors = [];\n    if (handler) {\n      logger.debug('%s - endorsing with a handler', method);\n      let results;\n      if (this.type === 'Query') {\n        // TODO should we move it to Query.js\n        results = await handler.query(signedEnvelope, request);\n      } else {\n        results = await handler.endorse(signedEnvelope, request);\n      }\n      logger.debug('%s - have results from handler', method);\n      results.forEach(result => {\n        if (result instanceof Error) {\n          logger.debug('%s - result is an error: %s', method, result);\n          this._proposalErrors.push(result);\n        } else {\n          logger.debug('%s - result is endorsed', method);\n          this._proposalResponses.push(result);\n        }\n      });\n    } else if (targets) {\n      logger.debug('%s - have targets', method);\n      const peers = this.channel.getTargetEndorsers(targets);\n      const promises = [];\n      for (const peer of peers) {\n        if (peer.hasChaincode(this.chaincodeId)) {\n          promises.push(peer.sendProposal(signedEnvelope, requestTimeout));\n        } else {\n          const chaincodeError = new Error(`Peer ${peer.name} is not running chaincode ${this.chaincodeId}`);\n          peer.getCharacteristics(chaincodeError);\n          promises.push(Promise.reject(chaincodeError));\n        }\n      }\n      logger.debug('%s - about to send to all peers', method);\n      const results = await settle(promises);\n      results.forEach(result => {\n        if (result.isFulfilled()) {\n          const response = result.value();\n          if (response && response.response && response.response.status) {\n            logger.debug('%s - Promise is fulfilled: status:%s message:%s', method, response.response.status, response.response.message);\n            this._proposalResponses.push(response);\n          } else if (response instanceof Error) {\n            logger.debug('%s - Promise response is an error: %s', method, response);\n            this._proposalErrors.push(response);\n          } else {\n            logger.debug('%s - Promise response is not properly formed: %j', method, response);\n            this._proposalErrors.push(new Error('Missing response status'));\n          }\n        } else {\n          logger.debug('%s - Promise is rejected: %s', method, result.reason());\n          this._proposalErrors.push(result.reason());\n        }\n      });\n    } else {\n      // need to have a handler or targets defined to have a proposal endorsed\n      logger.error('%s - no targets or handler', method);\n      throw Error('Missing targets parameter');\n    }\n    return {\n      errors: this._proposalErrors,\n      responses: this._proposalResponses\n    };\n  }\n\n  /**\n   * Utility method to verify a single proposal response. It checks the\n   * following aspects:\n   * <li>The endorser's identity belongs to a legitimate MSP of the channel\n   *     and can be successfully deserialized\n   * <li>The endorsement signature can be successfully verified with the\n   *     endorser's identity certificate\n   * <br><br>\n   * This method requires that the initialize method of this channel object\n   * has been called to load this channel's MSPs. The MSPs will have the\n   * trusted root certificates for this channel.\n   *\n   * @param {ProposalResponse} proposalResponse - The endorsement response\n   * from the peer,\n   * includes the endorser certificate and signature over the\n   * proposal + endorsement result + endorser certificate.\n   * @returns {boolean} A boolean value of true when both the identity and\n   * the signature are valid, false otherwise.\n   */\n  verifyProposalResponse() {\n    let proposalResponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('proposalResponse');\n    const method = `verifyProposalResponse[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    if (proposalResponse instanceof Error) {\n      return false;\n    }\n    if (!proposalResponse.endorsement) {\n      throw new Error('Parameter must be a ProposalResponse Object');\n    }\n    logger.error('%s - This method needs to be implemented', method);\n    throw Error(`${method} is not implemented`);\n    /*\n    const endorsement = proposal_response.endorsement;\n    let identity;\n    \tconst sid = fabproto6.msp.SerializedIdentity.decode(endorsement.endorser);\n    const mspid = sid.getMspid();\n    logger.debug('%s - found mspid %s', method, mspid);\n    const msp = this._msp_manager.getMSP(mspid);\n    \tif (!msp) {\n    \tthrow new Error(`Failed to locate an MSP configuration matching the endorser identity\\'s organization ${mspid} on the channel`);\n    }\n    logger.debug('%s - found endorser\\'s MSP', method);\n    \ttry {\n    \tidentity = await msp.deserializeIdentity(endorsement.endorser, false);\n    \tif (!identity) {\n    \t\tthrow new Error('Unable to find the endorser identity');\n    \t}\n    } catch (error) {\n    \tlogger.error('%s - getting endorser identity failed with: ', method, error);\n    \t\treturn false;\n    }\n    \ttry {\n    \t// see if the identity is trusted\n    \tif (!identity.isValid()) {\n    \t\tlogger.error('Endorser identity is not valid');\n    \t\t\treturn false;\n    \t}\n    \tlogger.debug('%s - have a valid identity', method);\n    \t\t// check the signature against the endorser and payload hash\n    \tconst digest = Buffer.concat([proposal_response.payload, endorsement.endorser]);\n    \tif (!identity.verify(digest, endorsement.signature)) {\n    \t\tlogger.error('%s - Proposal signature is not valid', method);\n    \t\t\treturn false;\n    \t}\n    } catch (error) {\n    \tlogger.error('%s - verify failed with: ', method, error);\n    \t\treturn false;\n    }\n    \tlogger.debug('%s - This endorsement has both a valid identity and valid signature', method);\n    \treturn true;\n    */\n  }\n\n  /**\n   * return a printable representation of this object\n   */\n  toString() {\n    return `Proposal: {chaincodeId: ${this.chaincodeId}, channel: ${this.channel.name}}`;\n  }\n}\nmodule.exports = Proposal;","map":{"version":3,"names":["TYPE","settle","require","checkParameter","getLogger","logger","fabproto6","ServiceAction","Proposal","constructor","chaincodeId","arguments","length","undefined","channel","debug","type","noPrivateReads","collectionsInterest","chaincodesCollectionsInterest","getTransactionId","method","_action","transactionId","Error","buildProposalInterest","interest","chaincode","push","name","collectionNames","concat","addCollectionInterest","collectionName","setNoPrivateReads","addChaincodeNoPrivateReadsCollectionsInterest","added_chaincode","_len","Array","_key","addChaincodeCollectionsInterest","_len2","_key2","build","idContext","request","fcn","args","transientMap","init","isArray","_reset","generateTransactionId","calculateTransactionId","Buffer","from","i","arg","arg_as_string","toString","chaincodeID","protos","ChaincodeID","create","version","chaincodeVersion","path","chaincodePath","chaincodeInput","ChaincodeInput","is_init","chaincodeSpec","ChaincodeSpec","Type","GOLANG","chaincode_id","input","chaincodeInvocationSpec","ChaincodeInvocationSpec","chaincode_spec","chaincodeInvocationSpecBuf","encode","finish","fields","TransientMap","chaincodeProposalPayload","ChaincodeProposalPayload","chaincodeProposalPayloadBuf","channelHeaderBuf","buildChannelHeader","common","HeaderType","ENDORSER_TRANSACTION","header","buildHeader","headerBuf","Header","proposal","payload","_payload","send","handler","targets","requestTimeout","signedEnvelope","getSignedProposal","_proposalResponses","_proposalErrors","results","query","endorse","forEach","result","peers","getTargetEndorsers","promises","peer","hasChaincode","sendProposal","chaincodeError","getCharacteristics","Promise","reject","isFulfilled","response","value","status","message","reason","error","errors","responses","verifyProposalResponse","proposalResponse","endorsement","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Proposal.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Proposal';\n\nconst settle = require('promise-settle');\nconst {checkParameter, getLogger} = require('./Utils.js');\nconst logger = getLogger(TYPE);\nconst fabproto6 = require('fabric-protos');\n\nconst ServiceAction = require('./ServiceAction.js');\n\n/**\n * @classdesc\n * This is an base class represents a Proposal definition and the\n * base for actions on a proposal.\n * This class allows an application to contain all proposal attributes and\n * artifacts in one place during runtime. Use the {@link Endorsement}\n * {@link Query} and {@link Commit} to endorse, query,\n * and to commit a proposal.\n *\n * @class\n */\nclass Proposal extends ServiceAction {\n\t/**\n\t * Construct a Proposal object.\n\t *\n\t * @param {string} chaincodeId - The chaincode this proposal will execute\n\t * @param {Channel} channel - The channel of this proposal\n\t * @returns {Proposal} The Proposal instance.\n\t */\n\tconstructor(chaincodeId = checkParameter('chaincodeId'), channel = checkParameter('channel')) {\n\t\tsuper(chaincodeId);\n\t\tlogger.debug(`${TYPE}.constructor[${chaincodeId}] - start `);\n\t\tthis.type = TYPE;\n\n\t\tthis.chaincodeId = chaincodeId;\n\t\tthis.channel = channel;\n\n\t\t// to be used to build a discovery interest\n\t\tthis.noPrivateReads = false;\n\t\tthis.collectionsInterest = [];\n\t\tthis.chaincodesCollectionsInterest = [];\n\t}\n\n\t/**\n\t * Returns the transaction ID used for the proposal\n\t *\n\t * @returns {string} The transaction ID of the proposal\n\t */\n\tgetTransactionId() {\n\t\tconst method = `getTransactionId[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tif (!this._action || !this._action.transactionId) {\n\t\t\tthrow Error('The proposal has not been built');\n\t\t}\n\n\t\treturn this._action.transactionId;\n\t}\n\n\t/**\n\t * Returns a JSON object representing this proposal's chaincodes,\n\t * collections and the no private reads as an \"interest\" for the\n\t * Discovery Service.\n\t * The {@link Discovery} will use an interest to build a query\n\t * request for an endorsement plan to a Peer's Discovery service.\n\t * Use the {@link Proposal#addCollectionInterest} to add collections\n\t * for the chaincode of this proposal.\n\t * Use the {@link Proposal#setNoPrivateReads} to set this \"no private reads\"\n\t * setting for this proposal's chaincode. The default will be false\n\t * when not set.\n\t * Use the {@link Proposal#addChaincodeCollectionInterest} to add\n\t * chaincodes and collections that this chaincode code will call.\n\t * @example\n\t *    [\n\t *      { name: 'mychaincode', collectionNames: ['mycollection'] }\n\t *    ]\n\t * @example\n\t *    [\n\t *      { name: 'mychaincode', collectionNames: ['mycollection'], noPrivateReads: true }\n\t *    ]\n\t * @example\n\t *    [\n\t *      { name: \"mychaincode\", collectionNames: [\"mycollection\"], noPrivateReads: true }\n\t *    ]\n\t */\n\tbuildProposalInterest() {\n\t\tconst method = `buildProposalInterest[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\n\t\tlet interest = [];\n\t\tconst chaincode = {};\n\t\tinterest.push(chaincode);\n\t\tchaincode.name = this.chaincodeId;\n\t\tif (this.collectionsInterest.length > 0) {\n\t\t\tchaincode.collectionNames = this.collectionsInterest;\n\t\t}\n\t\tchaincode.noPrivateReads = this.noPrivateReads;\n\t\tif (this.chaincodesCollectionsInterest.length > 0) {\n\t\t\tinterest = interest.concat(this.chaincodesCollectionsInterest);\n\t\t}\n\n\t\treturn interest;\n\t}\n\n\t/**\n\t * Use this method to add collection names associated\n\t * with this proposal's chaincode name. These will be\n\t * used to build a Discovery interest. {@link Proposal#buildProposalInterest}\n\t * @param {string} collectionName - collection name\n\t */\n\taddCollectionInterest(collectionName) {\n\t\tconst method = `addCollectionInterest[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tif (typeof collectionName === 'string') {\n\t\t\tthis.collectionsInterest.push(collectionName);\n\t\t} else {\n\t\t\tthrow Error('Invalid collectionName parameter');\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Use this method to set the \"no private reads\" of the discovery hint\n\t * (interest) for the chaincode of this proposal.\n\t * @param {boolean} noPrivateReads Indicates we do not need to read from private data\n\t */\n\tsetNoPrivateReads(noPrivateReads) {\n\t\tconst method = `setNoPrivateReads[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\n\t\tif (typeof noPrivateReads === 'boolean') {\n\t\t\tthis.noPrivateReads = noPrivateReads;\n\t\t} else {\n\t\t\tthrow Error(`The \"no private reads\" setting must be boolean. :: ${noPrivateReads}`);\n\t\t}\n\t}\n\n\t/**\n\t * Use this method to add a chaincode name and the collection names\n\t * that this proposal's chaincode will call along with the no private read\n\t * setting. These will be used to build a Discovery interest when this proposal\n\t * is used with the Discovery Service.\n\t * @param {string} chaincodeId - chaincode name\n\t * @param {boolean} noPrivateReads Indicates we do not need to read from private data\n\t * @param  {...string} collectionNames - one or more collection names\n\t */\n\taddChaincodeNoPrivateReadsCollectionsInterest(chaincodeId, noPrivateReads, ...collectionNames) {\n\t\tconst method = `addChaincodeCollectionsInterest[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tif (typeof chaincodeId === 'string') {\n\t\t\tconst added_chaincode = {};\n\t\t\tadded_chaincode.name = chaincodeId;\n\t\t\tadded_chaincode.noPrivateReads = noPrivateReads ? true : false;\n\t\t\tif (collectionNames && collectionNames.length > 0) {\n\t\t\t\tadded_chaincode.collectionNames = collectionNames;\n\t\t\t}\n\t\t\tthis.chaincodesCollectionsInterest.push(added_chaincode);\n\t\t} else {\n\t\t\tthrow Error('Invalid chaincodeId parameter');\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Use this method to add a chaincode name and collection names\n\t * that this proposal's chaincode will call. These will be used\n\t * to build a Discovery interest when this proposal is used with\n\t * the Discovery Service.\n\t * @param {string} chaincodeId - chaincode name\n\t * @param  {...string} collectionNames - one or more collection names\n\t */\n\taddChaincodeCollectionsInterest(chaincodeId, ...collectionNames) {\n\t\tconst method = `addChaincodeCollectionsInterest[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\n\t\treturn this.addChaincodeNoPrivateReadsCollectionsInterest(chaincodeId, false, ...collectionNames);\n\t}\n\n\t/**\n\t * @typedef {Object} BuildProposalRequest\n\t * @property {string} [fcn] - Optional. The function name. May be used by\n\t * the chaincode to control the flow within the chaincode. Default 'invoke'\n\t * @property {string[]} [args] - Optional. The arguments needed by the\n\t * chaincode execution. These should be strings or byte buffers.\n\t * These will be converted into byte buffers before building the protobuf\n\t * object to be sent to the fabric peer for endorsement.\n\t * @property {Map} [transientMap] - Optional. A map with the key value pairs\n\t * of the transient data.\n\t * @property {boolean} [init] - Optional. If this proposal should be an\n\t * chaincode initialization request. This will set the init setting in the\n\t * protobuf object sent to the peer.\n\t */\n\n\t/**\n\t * Use this method to build a proposal. The proposal will be stored\n\t * internally and also returned as bytes. Use the bytes when signing\n\t * the proposal externally. When signing the proposal externally the\n\t * user object of the IdentityContext does not have to have\n\t * a signing identity, only an identity that has the user's certificate is\n\t * required. This identity will be used to build\n\t * the protobuf objects of the proposal that must be signed later and sent\n\t * to the fabric Peer for endorsement.\n\t *\n\t * @param {IdentityContext} idContext - Contains the {@link User} object\n\t * needed to build this proposal.\n\t * @param {BuildProposalRequest} request - The proposals values of the request.\n\t */\n\tbuild(idContext = checkParameter('idContext'), request = {}) {\n\t\tconst method = `build[${this.chaincodeId}][${this.type}]`;\n\t\tlogger.debug('%s - start', method);\n\n\t\tconst {fcn, args = [], transientMap, init} = request;\n\n\t\tif (!Array.isArray(args)) {\n\t\t\tthrow Error('Proposal parameter \"args\" must be an array.');\n\t\t}\n\n\t\tthis._reset();\n\n\t\tif (transientMap) {\n\t\t\tlogger.debug('%s - adding transientMap', method);\n\t\t\tthis._action.transientMap = transientMap;\n\t\t}\n\t\tif (typeof init === 'boolean') {\n\t\t\tthis._action.init = init;\n\t\t}\n\n\t\tif (request.generateTransactionId !== false) {\n\t\t\tidContext.calculateTransactionId();\n\t\t}\n\t\tthis._action.transactionId = idContext.transactionId;\n\n\t\tthis._action.args = [];\n\t\tif (fcn) {\n\t\t\tthis._action.fcn = fcn;\n\t\t\tthis._action.args.push(Buffer.from(this._action.fcn, 'utf8'));\n\t\t\tlogger.debug('%s - adding function %s', method, this._action.fcn);\n\t\t} else {\n\t\t\tlogger.debug('%s - not adding function', method);\n\t\t}\n\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tlogger.debug('%s - adding arg ==>%s<==', method, args[i]);\n\t\t\tlet arg;\n\t\t\tif (args[i] instanceof Buffer) {\n\t\t\t\targ = args[i];\n\t\t\t} else {\n\t\t\t\tconst arg_as_string = args[i].toString();\n\t\t\t\targ = Buffer.from(arg_as_string, 'utf8');\n\t\t\t}\n\t\t\tthis._action.args.push(arg);\n\t\t}\n\n\t\t// build the proposal payload\n\t\tconst chaincodeID = fabproto6.protos.ChaincodeID.create({\n\t\t\tname: this.chaincodeId,\n\t\t\tversion: this.chaincodeVersion || '',\n\t\t\tpath: this.chaincodePath || '',\n\t\t});\n\n\t\tconst chaincodeInput = fabproto6.protos.ChaincodeInput.create({\n\t\t\targs: this._action.args,\n\t\t\tis_init: this._action.init\n\t\t});\n\n\t\tconst chaincodeSpec = fabproto6.protos.ChaincodeSpec.create({\n\t\t\ttype: fabproto6.protos.ChaincodeSpec.Type.GOLANG,\n\t\t\tchaincode_id: chaincodeID,\n\t\t\tinput: chaincodeInput\n\t\t});\n\n\t\tconst chaincodeInvocationSpec = fabproto6.protos.ChaincodeInvocationSpec.create({\n\t\t\tchaincode_spec: chaincodeSpec\n\t\t});\n\t\tconst chaincodeInvocationSpecBuf = fabproto6.protos.ChaincodeInvocationSpec.encode(chaincodeInvocationSpec).finish();\n\n\t\tconst fields = {\n\t\t\tinput: chaincodeInvocationSpecBuf\n\t\t};\n\t\tif (this._action.transientMap) {\n\t\t\tfields.TransientMap = this._action.transientMap;\n\t\t}\n\t\tconst chaincodeProposalPayload = fabproto6.protos.ChaincodeProposalPayload.create(fields);\n\t\tconst chaincodeProposalPayloadBuf = fabproto6.protos.ChaincodeProposalPayload.encode(chaincodeProposalPayload).finish();\n\n\t\tconst channelHeaderBuf = this.channel.buildChannelHeader(\n\t\t\tfabproto6.common.HeaderType.ENDORSER_TRANSACTION,\n\t\t\t{\n\t\t\t\tname: this.chaincodeId,\n\t\t\t\tversion: this.chaincodeVersion || '',\n\t\t\t\tpath: this.chaincodePath || '',\n\t\t\t},\n\t\t\tthis._action.transactionId\n\t\t);\n\n\t\t// save the header for use by the commit\n\t\tthis._action.header = this.buildHeader(idContext, channelHeaderBuf);\n\n\t\tconst headerBuf = fabproto6.common.Header.encode(this._action.header).finish();\n\n\t\tthis._action.proposal = fabproto6.protos.Proposal.create({\n\t\t\theader: headerBuf,\n\t\t\tpayload: chaincodeProposalPayloadBuf\n\t\t});\n\t\tthis._payload = fabproto6.protos.Proposal.encode(this._action.proposal).finish();\n\n\t\treturn this._payload;\n\t}\n\n\t/**\n\t * @typedef {Object} SendProposalRequest\n\t * @property {Endorser[]} [targets] - Optional. The peers to send the proposal.\n\t * @property {ServiceHandler} - [handler] - Optional. The handler to send the proposal.\n\t * @property {Number} [requestTimeout] - Optional. The request timeout\n\t */\n\n\t/**\n\t * @typedef {Object} ProposalResponse\n\t * @property {Error[]} errors -  errors returned from the endorsement\n\t * @property {EndorsementResponse[]} responses - The endorsements returned from\n\t *  the endorsing peers.\n\t * @property {Buffer[]} queryResults - the results as extracted from the\n\t *  endorsement {@link EndorsementResponse} from an {@link Query} endorsement\n\t *  that was only a query and will not be committed.\n\t */\n\n\t/**\n\t * @typedef {Object} EndorsementResponse\n\t * This object is the protobuf object returned from the peer when doing\n\t * an endorsement of a proposal. The following description is from the protobuf\n\t * file fabric-protos/protos/peer/proposal_response.protos\n\t * @example\n// A ProposalResponse is returned from an endorser to the proposal submitter.\n// The idea is that this message contains the endorser's response to the\n// request of a client to perform an action over a chaincode (or more\n// generically on the ledger); the response might be success/error (conveyed in\n// the Response field) together with a description of the action and a\n// signature over it by that endorser.  If a sufficient number of distinct\n// endorsers agree on the same action and produce signature to that effect, a\n// transaction can be generated and sent for ordering.\nmessage ProposalResponse {\n\t// Version indicates message protocol version\n\tint32 version = 1;\n\n\t// Timestamp is the time that the message\n\t// was created as  defined by the sender\n\tgoogle.protobuf.Timestamp timestamp = 2;\n\n\t// A response message indicating whether the\n\t// endorsement of the action was successful\n\tResponse response = 4;\n\n\t// The payload of response. It is the bytes of ProposalResponsePayload\n\tbytes payload = 5;\n\n\t// The endorsement of the proposal, basically\n\t// the endorser's signature over the payload\n\tEndorsement endorsement = 6;\n}\n\n// A response with a representation similar to an HTTP response that can\n// be used within another message.\nmessage Response {\n\t// A status code that should follow the HTTP status codes.\n\tint32 status = 1;\n\n\t// A message associated with the response code.\n\tstring message = 2;\n\n\t// A payload that can be used to include metadata with this response.\n\tbytes payload = 3;\n}\n\nmessage Endorsement {\n\t// Identity of the endorser (e.g. its certificate)\n\tbytes endorser = 1;\n\n\t// Signature of the payload included in ProposalResponse concatenated with\n\t// the endorser's certificate; ie, sign(ProposalResponse.payload + endorser)\n\tbytes signature = 2;\n}\n\t *\n\t */\n\n\t/**\n\t * Send a signed transaction proposal to peer(s)\n\t *\n\t * @param {SendProposalRequest} request options\n\t * @returns {ProposalResponse} The results of sending\n\t */\n\tasync send(request = {}) {\n\t\tconst method = `send[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tconst {handler, targets, requestTimeout} = request;\n\t\tlogger.debug('%s - requestTimeout %s', method, requestTimeout);\n\t\tconst signedEnvelope = this.getSignedProposal();\n\n\t\tthis._proposalResponses = [];\n\t\tthis._proposalErrors = [];\n\n\n\t\tif (handler) {\n\t\t\tlogger.debug('%s - endorsing with a handler', method);\n\t\t\tlet results;\n\t\t\tif (this.type === 'Query') {\n\t\t\t\t// TODO should we move it to Query.js\n\t\t\t\tresults = await handler.query(signedEnvelope, request);\n\t\t\t} else {\n\t\t\t\tresults = await handler.endorse(signedEnvelope, request);\n\t\t\t}\n\t\t\tlogger.debug('%s - have results from handler', method);\n\t\t\tresults.forEach((result) => {\n\t\t\t\tif (result instanceof Error) {\n\t\t\t\t\tlogger.debug('%s - result is an error: %s', method, result);\n\t\t\t\t\tthis._proposalErrors.push(result);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug('%s - result is endorsed', method);\n\t\t\t\t\tthis._proposalResponses.push(result);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (targets) {\n\t\t\tlogger.debug('%s - have targets', method);\n\t\t\tconst peers = this.channel.getTargetEndorsers(targets);\n\t\t\tconst promises = [];\n\t\t\tfor (const peer of peers) {\n\t\t\t\tif (peer.hasChaincode(this.chaincodeId)) {\n\t\t\t\t\tpromises.push(peer.sendProposal(signedEnvelope, requestTimeout));\n\t\t\t\t} else {\n\t\t\t\t\tconst chaincodeError = new Error(`Peer ${peer.name} is not running chaincode ${this.chaincodeId}`);\n\t\t\t\t\tpeer.getCharacteristics(chaincodeError);\n\t\t\t\t\tpromises.push(Promise.reject(chaincodeError));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlogger.debug('%s - about to send to all peers', method);\n\t\t\tconst results = await settle(promises);\n\t\t\tresults.forEach((result) => {\n\t\t\t\tif (result.isFulfilled()) {\n\t\t\t\t\tconst response = result.value();\n\t\t\t\t\tif (response && response.response && response.response.status) {\n\t\t\t\t\t\tlogger.debug('%s - Promise is fulfilled: status:%s message:%s', method, response.response.status, response.response.message);\n\t\t\t\t\t\tthis._proposalResponses.push(response);\n\t\t\t\t\t} else if (response instanceof Error) {\n\t\t\t\t\t\tlogger.debug('%s - Promise response is an error: %s', method, response);\n\t\t\t\t\t\tthis._proposalErrors.push(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('%s - Promise response is not properly formed: %j', method, response);\n\t\t\t\t\t\tthis._proposalErrors.push(new Error('Missing response status'));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug('%s - Promise is rejected: %s', method, result.reason());\n\t\t\t\t\tthis._proposalErrors.push(result.reason());\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// need to have a handler or targets defined to have a proposal endorsed\n\t\t\tlogger.error('%s - no targets or handler', method);\n\t\t\tthrow Error('Missing targets parameter');\n\t\t}\n\n\t\treturn {\n\t\t\terrors: this._proposalErrors,\n\t\t\tresponses: this._proposalResponses\n\t\t};\n\t}\n\n\t/**\n\t * Utility method to verify a single proposal response. It checks the\n\t * following aspects:\n\t * <li>The endorser's identity belongs to a legitimate MSP of the channel\n\t *     and can be successfully deserialized\n\t * <li>The endorsement signature can be successfully verified with the\n\t *     endorser's identity certificate\n\t * <br><br>\n\t * This method requires that the initialize method of this channel object\n\t * has been called to load this channel's MSPs. The MSPs will have the\n\t * trusted root certificates for this channel.\n\t *\n\t * @param {ProposalResponse} proposalResponse - The endorsement response\n\t * from the peer,\n\t * includes the endorser certificate and signature over the\n\t * proposal + endorsement result + endorser certificate.\n\t * @returns {boolean} A boolean value of true when both the identity and\n\t * the signature are valid, false otherwise.\n\t */\n\tverifyProposalResponse(proposalResponse = checkParameter('proposalResponse')) {\n\t\tconst method = `verifyProposalResponse[${this.chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\n\t\tif (proposalResponse instanceof Error) {\n\n\t\t\treturn false;\n\t\t}\n\t\tif (!proposalResponse.endorsement) {\n\t\t\tthrow new Error('Parameter must be a ProposalResponse Object');\n\t\t}\n\t\tlogger.error('%s - This method needs to be implemented', method);\n\n\t\tthrow Error(`${method} is not implemented`);\n\t\t/*\n\t\tconst endorsement = proposal_response.endorsement;\n\t\tlet identity;\n\n\t\tconst sid = fabproto6.msp.SerializedIdentity.decode(endorsement.endorser);\n\t\tconst mspid = sid.getMspid();\n\t\tlogger.debug('%s - found mspid %s', method, mspid);\n\t\tconst msp = this._msp_manager.getMSP(mspid);\n\n\t\tif (!msp) {\n\t\t\tthrow new Error(`Failed to locate an MSP configuration matching the endorser identity\\'s organization ${mspid} on the channel`);\n\t\t}\n\t\tlogger.debug('%s - found endorser\\'s MSP', method);\n\n\t\ttry {\n\t\t\tidentity = await msp.deserializeIdentity(endorsement.endorser, false);\n\t\t\tif (!identity) {\n\t\t\t\tthrow new Error('Unable to find the endorser identity');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error('%s - getting endorser identity failed with: ', method, error);\n\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\t// see if the identity is trusted\n\t\t\tif (!identity.isValid()) {\n\t\t\t\tlogger.error('Endorser identity is not valid');\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlogger.debug('%s - have a valid identity', method);\n\n\t\t\t// check the signature against the endorser and payload hash\n\t\t\tconst digest = Buffer.concat([proposal_response.payload, endorsement.endorser]);\n\t\t\tif (!identity.verify(digest, endorsement.signature)) {\n\t\t\t\tlogger.error('%s - Proposal signature is not valid', method);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error('%s - verify failed with: ', method, error);\n\n\t\t\treturn false;\n\t\t}\n\n\t\tlogger.debug('%s - This endorsement has both a valid identity and valid signature', method);\n\n\t\treturn true;\n\t\t*/\n\t}\n\n\t/**\n\t * return a printable representation of this object\n\t */\n\ttoString() {\n\n\t\treturn `Proposal: {chaincodeId: ${this.chaincodeId}, channel: ${this.channel.name}}`;\n\t}\n}\n\nmodule.exports = Proposal;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}