{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionEventStrategy = void 0;\nconst Logger = __importStar(require(\"../../logger\"));\nconst logger = Logger.getLogger('TransactionEventStrategy');\n/**\n * Event handling strategy base class that keeps counts of success and fail events to allow\n * subclasses to implement concrete event handling strategies. On each success or fail event,\n * the checkCompletion() function is called, which must be implemented by\n * subclasses.\n *\n * Instances of the strategy are stateful and must only be used for a single transaction.\n * @private\n * @class\n */\nclass TransactionEventStrategy {\n  /**\n   * Constructor.\n   * @param {Endorser[]} peers - Peers for which to process events.\n   */\n  constructor(peers) {\n    if (!peers || !Array.isArray(peers) || peers.length < 1) {\n      const message = 'No peers for strategy';\n      logger.error('constructor:', message);\n      throw new Error(message);\n    }\n    this.peers = peers;\n    this.counts = {\n      success: 0,\n      fail: 0,\n      expected: peers.length\n    };\n  }\n  /**\n   * Called by event handler to obtain the peers to which it should listen.\n   * @returns {Endorser[]} Peers.\n   */\n  getPeers() {\n    return this.peers;\n  }\n  /**\n   * Called when an event is received.\n   * @param {Function} successFn Callback function to invoke if this event satisfies the strategy.\n   * @param {Function} failFn Callback function to invoke if this event fails the strategy.\n   */\n  eventReceived(successFn, failFn) {\n    this.counts.success++;\n    this.checkCompletion(this.counts, successFn, failFn);\n  }\n  /**\n   * Called when an error is received.\n   * @param {Function} successFn Callback function to invoke if this error satisfies the strategy.\n   * @param {Function} failFn Callback function to invoke if this error fails the strategy.\n   */\n  errorReceived(successFn, failFn) {\n    this.counts.fail++;\n    this.checkCompletion(this.counts, successFn, failFn);\n  }\n}\nexports.TransactionEventStrategy = TransactionEventStrategy;","map":{"version":3,"names":["Logger","__importStar","require","logger","getLogger","TransactionEventStrategy","constructor","peers","Array","isArray","length","message","error","Error","counts","success","fail","expected","getPeers","eventReceived","successFn","failFn","checkCompletion","errorReceived","exports"],"sources":["../../../src/impl/event/transactioneventstrategy.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAAA,MAAA,GAAAC,YAAA,CAAAC,OAAA;AACA,MAAMC,MAAM,GAAGH,MAAM,CAACI,SAAS,CAAC,0BAA0B,CAAC;AAW3D;;;;;;;;;;AAUA,MAAsBC,wBAAwB;EAI7C;;;;EAIAC,YAAYC,KAAiB;IAC5B,IAAI,CAACA,KAAK,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;MACxD,MAAMC,OAAO,GAAG,uBAAuB;MACvCR,MAAM,CAACS,KAAK,CAAC,cAAc,EAAED,OAAO,CAAC;MACrC,MAAM,IAAIE,KAAK,CAACF,OAAO,CAAC;;IAGzB,IAAI,CAACJ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACO,MAAM,GAAG;MACbC,OAAO,EAAE,CAAC;MACVC,IAAI,EAAE,CAAC;MACPC,QAAQ,EAAEV,KAAK,CAACG;KAChB;EACF;EAEA;;;;EAIAQ,QAAQA,CAAA;IACP,OAAO,IAAI,CAACX,KAAK;EAClB;EAEA;;;;;EAKAY,aAAaA,CAACC,SAA0B,EAAEC,MAAoB;IAC7D,IAAI,CAACP,MAAM,CAACC,OAAO,EAAE;IACrB,IAAI,CAACO,eAAe,CAAC,IAAI,CAACR,MAAM,EAAEM,SAAS,EAAEC,MAAM,CAAC;EACrD;EAEA;;;;;EAKAE,aAAaA,CAACH,SAA0B,EAAEC,MAAoB;IAC7D,IAAI,CAACP,MAAM,CAACE,IAAI,EAAE;IAClB,IAAI,CAACM,eAAe,CAAC,IAAI,CAACR,MAAM,EAAEM,SAAS,EAAEC,MAAM,CAAC;EACrD;;AAjDDG,OAAA,CAAAnB,wBAAA,GAAAA,wBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}