{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2018, 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NONE = exports.PREFER_MSPID_SCOPE_ANYFORTX = exports.PREFER_MSPID_SCOPE_ALLFORTX = exports.NETWORK_SCOPE_ANYFORTX = exports.NETWORK_SCOPE_ALLFORTX = exports.MSPID_SCOPE_ANYFORTX = exports.MSPID_SCOPE_ALLFORTX = void 0;\nconst allfortxstrategy_1 = require(\"./allfortxstrategy\");\nconst anyfortxstrategy_1 = require(\"./anyfortxstrategy\");\nconst transactioneventhandler_1 = require(\"./transactioneventhandler\");\nfunction getOrganizationPeers(network) {\n  const mspId = network.getGateway().getIdentity().mspId;\n  return network.getChannel().getEndorsers(mspId);\n}\nfunction getNetworkPeers(network) {\n  return network.getChannel().getEndorsers();\n}\n/**\n * @typedef DefaultEventHandlerStrategies\n * @memberof module:fabric-network\n * @property {module:fabric-network.TxEventHandlerFactory} MSPID_SCOPE_ALLFORTX Listen for transaction commit\n * events from all peers in the client identity's organization. If the client identity's organization has no peers,\n * this strategy will fail.\n * The [submitTransaction]{@link module:fabric-network.Contract#submitTransaction} function will wait until successful\n * events are received from <em>all</em> currently connected peers (minimum 1).\n * @property {module:fabric-network.TxEventHandlerFactory} MSPID_SCOPE_ANYFORTX Listen for transaction commit\n * events from all peers in the client identity's organization. If the client identity's organization has no peers,\n * this strategy will fail.\n * The [submitTransaction]{@link module:fabric-network.Contract#submitTransaction} function will wait until a successful\n * event is received from <em>any</em> peer.\n * @property {module:fabric-network.TxEventHandlerFactory} NETWORK_SCOPE_ALLFORTX Listen for transaction commit\n * events from all peers in the network.\n * The [submitTransaction]{@link module:fabric-network.Contract#submitTransaction} function will wait until successful\n * events are received from <em>all</em> currently connected peers (minimum 1).\n * @property {module:fabric-network.TxEventHandlerFactory} NETWORK_SCOPE_ANYFORTX Listen for transaction commit\n * events from all peers in the network.\n * The [submitTransaction]{@link module:fabric-network.Contract#submitTransaction} function will wait until a\n * successful event is received from <em>any</em> peer.\n * @property {module:fabric-network.TxEventHandlerFactory} PREFER_MSPID_SCOPE_ALLFORTX Listen for transaction commit\n * events from all peers in the client identity's organization. If the client identity's organization has no peers, listen\n * for transaction commit events from all peers in the network.\n * The [submitTransaction]{@link module:fabric-network.Contract#submitTransaction} function will wait until successful\n * events are received from <em>all</em> currently connected peers (minimum 1).\n * @property {module:fabric-network.TxEventHandlerFactory} PREFER_MSPID_SCOPE_ANYFORTX Listen for transaction commit\n * events from all peers in the client identity's organization. If the client identity's organization has no peers, listen\n * for transaction commit events from all peers in the network.\n * The [submitTransaction]{@link module:fabric-network.Contract#submitTransaction} function will wait until a\n * successful event is received from <em>any</em> peer.\n * @property {module:fabric-network.TxEventHandlerFactory} NONE Do not wait for any commit events.\n * The [submitTransaction]{@link module:fabric-network.Contract#submitTransaction} function will return immediately\n * after successfully sending the transaction to the orderer.\n */\nconst MSPID_SCOPE_ALLFORTX = (transactionId, network) => {\n  const eventStrategy = new allfortxstrategy_1.AllForTxStrategy(getOrganizationPeers(network));\n  return new transactioneventhandler_1.TransactionEventHandler(transactionId, network, eventStrategy);\n};\nexports.MSPID_SCOPE_ALLFORTX = MSPID_SCOPE_ALLFORTX;\nconst MSPID_SCOPE_ANYFORTX = (transactionId, network) => {\n  const eventStrategy = new anyfortxstrategy_1.AnyForTxStrategy(getOrganizationPeers(network));\n  return new transactioneventhandler_1.TransactionEventHandler(transactionId, network, eventStrategy);\n};\nexports.MSPID_SCOPE_ANYFORTX = MSPID_SCOPE_ANYFORTX;\nconst NETWORK_SCOPE_ALLFORTX = (transactionId, network) => {\n  const eventStrategy = new allfortxstrategy_1.AllForTxStrategy(getNetworkPeers(network));\n  return new transactioneventhandler_1.TransactionEventHandler(transactionId, network, eventStrategy);\n};\nexports.NETWORK_SCOPE_ALLFORTX = NETWORK_SCOPE_ALLFORTX;\nconst NETWORK_SCOPE_ANYFORTX = (transactionId, network) => {\n  const eventStrategy = new anyfortxstrategy_1.AnyForTxStrategy(getNetworkPeers(network));\n  return new transactioneventhandler_1.TransactionEventHandler(transactionId, network, eventStrategy);\n};\nexports.NETWORK_SCOPE_ANYFORTX = NETWORK_SCOPE_ANYFORTX;\nconst PREFER_MSPID_SCOPE_ALLFORTX = (transactionId, network) => {\n  let peers = getOrganizationPeers(network);\n  if (peers.length === 0) {\n    peers = getNetworkPeers(network);\n  }\n  const eventStrategy = new allfortxstrategy_1.AllForTxStrategy(peers);\n  return new transactioneventhandler_1.TransactionEventHandler(transactionId, network, eventStrategy);\n};\nexports.PREFER_MSPID_SCOPE_ALLFORTX = PREFER_MSPID_SCOPE_ALLFORTX;\nconst PREFER_MSPID_SCOPE_ANYFORTX = (transactionId, network) => {\n  let peers = getOrganizationPeers(network);\n  if (peers.length === 0) {\n    peers = getNetworkPeers(network);\n  }\n  const eventStrategy = new anyfortxstrategy_1.AnyForTxStrategy(peers);\n  return new transactioneventhandler_1.TransactionEventHandler(transactionId, network, eventStrategy);\n};\nexports.PREFER_MSPID_SCOPE_ANYFORTX = PREFER_MSPID_SCOPE_ANYFORTX;\nconst noOpEventHandler = {\n  startListening: async () => {\n    // No-op\n  },\n  waitForEvents: async () => {\n    // No-op\n  },\n  cancelListening: () => {\n    // No-op\n  }\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst NONE = (transactionId, network) => {\n  return noOpEventHandler;\n};\nexports.NONE = NONE;","map":{"version":3,"names":["allfortxstrategy_1","require","anyfortxstrategy_1","transactioneventhandler_1","getOrganizationPeers","network","mspId","getGateway","getIdentity","getChannel","getEndorsers","getNetworkPeers","MSPID_SCOPE_ALLFORTX","transactionId","eventStrategy","AllForTxStrategy","TransactionEventHandler","exports","MSPID_SCOPE_ANYFORTX","AnyForTxStrategy","NETWORK_SCOPE_ALLFORTX","NETWORK_SCOPE_ANYFORTX","PREFER_MSPID_SCOPE_ALLFORTX","peers","length","PREFER_MSPID_SCOPE_ANYFORTX","noOpEventHandler","startListening","waitForEvents","cancelListening","NONE"],"sources":["../../../src/impl/event/defaulteventhandlerstrategies.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;AAMA,MAAAA,kBAAA,GAAAC,OAAA;AACA,MAAAC,kBAAA,GAAAD,OAAA;AACA,MAAAE,yBAAA,GAAAF,OAAA;AAIA,SAASG,oBAAoBA,CAACC,OAAgB;EAC7C,MAAMC,KAAK,GAAGD,OAAO,CAACE,UAAU,EAAE,CAACC,WAAW,EAAE,CAACF,KAAK;EACtD,OAAOD,OAAO,CAACI,UAAU,EAAE,CAACC,YAAY,CAACJ,KAAK,CAAC;AAChD;AAEA,SAASK,eAAeA,CAACN,OAAgB;EACxC,OAAOA,OAAO,CAACI,UAAU,EAAE,CAACC,YAAY,EAAE;AAC3C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCO,MAAME,oBAAoB,GAA0BA,CAACC,aAAa,EAAER,OAAO,KAAI;EACrF,MAAMS,aAAa,GAAG,IAAId,kBAAA,CAAAe,gBAAgB,CAACX,oBAAoB,CAACC,OAAO,CAAC,CAAC;EACzE,OAAO,IAAIF,yBAAA,CAAAa,uBAAuB,CAACH,aAAa,EAAER,OAAO,EAAES,aAAa,CAAC;AAC1E,CAAC;AAHYG,OAAA,CAAAL,oBAAoB,GAAAA,oBAAA;AAK1B,MAAMM,oBAAoB,GAA0BA,CAACL,aAAa,EAAER,OAAO,KAAI;EACrF,MAAMS,aAAa,GAAG,IAAIZ,kBAAA,CAAAiB,gBAAgB,CAACf,oBAAoB,CAACC,OAAO,CAAC,CAAC;EACzE,OAAO,IAAIF,yBAAA,CAAAa,uBAAuB,CAACH,aAAa,EAAER,OAAO,EAAES,aAAa,CAAC;AAC1E,CAAC;AAHYG,OAAA,CAAAC,oBAAoB,GAAAA,oBAAA;AAK1B,MAAME,sBAAsB,GAA0BA,CAACP,aAAa,EAAER,OAAO,KAAI;EACvF,MAAMS,aAAa,GAAG,IAAId,kBAAA,CAAAe,gBAAgB,CAACJ,eAAe,CAACN,OAAO,CAAC,CAAC;EACpE,OAAO,IAAIF,yBAAA,CAAAa,uBAAuB,CAACH,aAAa,EAAER,OAAO,EAAES,aAAa,CAAC;AAC1E,CAAC;AAHYG,OAAA,CAAAG,sBAAsB,GAAAA,sBAAA;AAK5B,MAAMC,sBAAsB,GAA0BA,CAACR,aAAa,EAAER,OAAO,KAAI;EACvF,MAAMS,aAAa,GAAG,IAAIZ,kBAAA,CAAAiB,gBAAgB,CAACR,eAAe,CAACN,OAAO,CAAC,CAAC;EACpE,OAAO,IAAIF,yBAAA,CAAAa,uBAAuB,CAACH,aAAa,EAAER,OAAO,EAAES,aAAa,CAAC;AAC1E,CAAC;AAHYG,OAAA,CAAAI,sBAAsB,GAAAA,sBAAA;AAK5B,MAAMC,2BAA2B,GAA0BA,CAACT,aAAa,EAAER,OAAO,KAAI;EAC5F,IAAIkB,KAAK,GAAGnB,oBAAoB,CAACC,OAAO,CAAC;EACzC,IAAIkB,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACvBD,KAAK,GAAGZ,eAAe,CAACN,OAAO,CAAC;;EAEjC,MAAMS,aAAa,GAAG,IAAId,kBAAA,CAAAe,gBAAgB,CAACQ,KAAK,CAAC;EACjD,OAAO,IAAIpB,yBAAA,CAAAa,uBAAuB,CAACH,aAAa,EAAER,OAAO,EAAES,aAAa,CAAC;AAC1E,CAAC;AAPYG,OAAA,CAAAK,2BAA2B,GAAAA,2BAAA;AASjC,MAAMG,2BAA2B,GAA0BA,CAACZ,aAAa,EAAER,OAAO,KAAI;EAC5F,IAAIkB,KAAK,GAAGnB,oBAAoB,CAACC,OAAO,CAAC;EACzC,IAAIkB,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACvBD,KAAK,GAAGZ,eAAe,CAACN,OAAO,CAAC;;EAEjC,MAAMS,aAAa,GAAG,IAAIZ,kBAAA,CAAAiB,gBAAgB,CAACI,KAAK,CAAC;EACjD,OAAO,IAAIpB,yBAAA,CAAAa,uBAAuB,CAACH,aAAa,EAAER,OAAO,EAAES,aAAa,CAAC;AAC1E,CAAC;AAPYG,OAAA,CAAAQ,2BAA2B,GAAAA,2BAAA;AASxC,MAAMC,gBAAgB,GAAmB;EACxCC,cAAc,EAAE,MAAAA,CAAA,KAAW;IAC1B;EAAA,CACA;EACDC,aAAa,EAAE,MAAAA,CAAA,KAAW;IACzB;EAAA,CACA;EACDC,eAAe,EAAEA,CAAA,KAAK;IACrB;EAAA;CAED;AAED;AACO,MAAMC,IAAI,GAA0BA,CAACjB,aAAa,EAAER,OAAO,KAAI;EACrE,OAAOqB,gBAAgB;AACxB,CAAC;AAFYT,OAAA,CAAAa,IAAI,GAAAA,IAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}