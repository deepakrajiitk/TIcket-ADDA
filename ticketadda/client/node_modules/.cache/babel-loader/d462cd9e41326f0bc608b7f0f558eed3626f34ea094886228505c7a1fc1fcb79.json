{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst http2 = require(\"http2\");\nconst constants_1 = require(\"./constants\");\nconst server_call_1 = require(\"./server-call\");\nconst server_credentials_1 = require(\"./server-credentials\");\nconst resolver_1 = require(\"./resolver\");\nconst logging = require(\"./logging\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst channelz_1 = require(\"./channelz\");\nconst {\n  HTTP2_HEADER_PATH\n} = http2.constants;\nconst TRACER_NAME = 'server';\nfunction noop() {}\nfunction getUnimplementedStatusResponse(methodName) {\n  return {\n    code: constants_1.Status.UNIMPLEMENTED,\n    details: `The server does not implement the method ${methodName}`\n  };\n}\nfunction getDefaultHandler(handlerType, methodName) {\n  const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\n  switch (handlerType) {\n    case 'unary':\n      return (call, callback) => {\n        callback(unimplementedStatusResponse, null);\n      };\n    case 'clientStream':\n      return (call, callback) => {\n        callback(unimplementedStatusResponse, null);\n      };\n    case 'serverStream':\n      return call => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    case 'bidi':\n      return call => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    default:\n      throw new Error(`Invalid handlerType ${handlerType}`);\n  }\n}\nclass Server {\n  constructor(options) {\n    this.http2ServerList = [];\n    this.handlers = new Map();\n    this.sessions = new Map();\n    this.started = false;\n    this.serverAddressString = 'null';\n    // Channelz Info\n    this.channelzEnabled = true;\n    this.channelzTrace = new channelz_1.ChannelzTrace();\n    this.callTracker = new channelz_1.ChannelzCallTracker();\n    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n    this.options = options !== null && options !== void 0 ? options : {};\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzRef = channelz_1.registerChannelzServer(() => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Server created');\n    }\n    this.trace('Server constructed');\n  }\n  getChannelzInfo() {\n    return {\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      listenerChildren: this.listenerChildrenTracker.getChildLists(),\n      sessionChildren: this.sessionChildrenTracker.getChildLists()\n    };\n  }\n  getChannelzSessionInfoGetter(session) {\n    return () => {\n      var _a, _b, _c;\n      const sessionInfo = this.sessions.get(session);\n      const sessionSocket = session.socket;\n      const remoteAddress = sessionSocket.remoteAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n      const localAddress = sessionSocket.localAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.localAddress, sessionSocket.localPort) : null;\n      let tlsInfo;\n      if (session.encrypted) {\n        const tlsSocket = sessionSocket;\n        const cipherInfo = tlsSocket.getCipher();\n        const certificate = tlsSocket.getCertificate();\n        const peerCertificate = tlsSocket.getPeerCertificate();\n        tlsInfo = {\n          cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n          cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n          localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\n          remoteCertificate: peerCertificate && 'raw' in peerCertificate ? peerCertificate.raw : null\n        };\n      } else {\n        tlsInfo = null;\n      }\n      const socketInfo = {\n        remoteAddress: remoteAddress,\n        localAddress: localAddress,\n        security: tlsInfo,\n        remoteName: null,\n        streamsStarted: sessionInfo.streamTracker.callsStarted,\n        streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n        streamsFailed: sessionInfo.streamTracker.callsFailed,\n        messagesSent: sessionInfo.messagesSent,\n        messagesReceived: sessionInfo.messagesReceived,\n        keepAlivesSent: 0,\n        lastLocalStreamCreatedTimestamp: null,\n        lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n        lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n        lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n        localFlowControlWindow: (_b = session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n        remoteFlowControlWindow: (_c = session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n      };\n      return socketInfo;\n    };\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);\n  }\n  addProtoService() {\n    throw new Error('Not implemented. Use addService() instead');\n  }\n  addService(service, implementation) {\n    if (service === null || typeof service !== 'object' || implementation === null || typeof implementation !== 'object') {\n      throw new Error('addService() requires two objects as arguments');\n    }\n    const serviceKeys = Object.keys(service);\n    if (serviceKeys.length === 0) {\n      throw new Error('Cannot add an empty service to a server');\n    }\n    serviceKeys.forEach(name => {\n      const attrs = service[name];\n      let methodType;\n      if (attrs.requestStream) {\n        if (attrs.responseStream) {\n          methodType = 'bidi';\n        } else {\n          methodType = 'clientStream';\n        }\n      } else {\n        if (attrs.responseStream) {\n          methodType = 'serverStream';\n        } else {\n          methodType = 'unary';\n        }\n      }\n      let implFn = implementation[name];\n      let impl;\n      if (implFn === undefined && typeof attrs.originalName === 'string') {\n        implFn = implementation[attrs.originalName];\n      }\n      if (implFn !== undefined) {\n        impl = implFn.bind(implementation);\n      } else {\n        impl = getDefaultHandler(methodType, name);\n      }\n      const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\n      if (success === false) {\n        throw new Error(`Method handler for ${attrs.path} already provided.`);\n      }\n    });\n  }\n  removeService(service) {\n    if (service === null || typeof service !== 'object') {\n      throw new Error('removeService() requires object as argument');\n    }\n    const serviceKeys = Object.keys(service);\n    serviceKeys.forEach(name => {\n      const attrs = service[name];\n      this.unregister(attrs.path);\n    });\n  }\n  bind(port, creds) {\n    throw new Error('Not implemented. Use bindAsync() instead');\n  }\n  bindAsync(port, creds, callback) {\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n    if (typeof port !== 'string') {\n      throw new TypeError('port must be a string');\n    }\n    if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\n      throw new TypeError('creds must be a ServerCredentials object');\n    }\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    const initialPortUri = uri_parser_1.parseUri(port);\n    if (initialPortUri === null) {\n      throw new Error(`Could not parse port \"${port}\"`);\n    }\n    const portUri = resolver_1.mapUriDefaultScheme(initialPortUri);\n    if (portUri === null) {\n      throw new Error(`Could not get a default scheme for port \"${port}\"`);\n    }\n    const serverOptions = {\n      maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER\n    };\n    if ('grpc-node.max_session_memory' in this.options) {\n      serverOptions.maxSessionMemory = this.options['grpc-node.max_session_memory'];\n    } else {\n      /* By default, set a very large max session memory limit, to effectively\n       * disable enforcement of the limit. Some testing indicates that Node's\n       * behavior degrades badly when this limit is reached, so we solve that\n       * by disabling the check entirely. */\n      serverOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n    }\n    if ('grpc.max_concurrent_streams' in this.options) {\n      serverOptions.settings = {\n        maxConcurrentStreams: this.options['grpc.max_concurrent_streams']\n      };\n    }\n    const deferredCallback = (error, port) => {\n      process.nextTick(() => callback(error, port));\n    };\n    const setupServer = () => {\n      let http2Server;\n      if (creds._isSecure()) {\n        const secureServerOptions = Object.assign(serverOptions, creds._getSettings());\n        http2Server = http2.createSecureServer(secureServerOptions);\n        http2Server.on('secureConnection', socket => {\n          /* These errors need to be handled by the user of Http2SecureServer,\n           * according to https://github.com/nodejs/node/issues/35824 */\n          socket.on('error', e => {\n            this.trace('An incoming TLS connection closed with error: ' + e.message);\n          });\n        });\n      } else {\n        http2Server = http2.createServer(serverOptions);\n      }\n      http2Server.setTimeout(0, noop);\n      this._setupHandlers(http2Server);\n      return http2Server;\n    };\n    const bindSpecificPort = (addressList, portNum, previousCount) => {\n      if (addressList.length === 0) {\n        return Promise.resolve({\n          port: portNum,\n          count: previousCount\n        });\n      }\n      return Promise.all(addressList.map(address => {\n        this.trace('Attempting to bind ' + subchannel_address_1.subchannelAddressToString(address));\n        let addr;\n        if (subchannel_address_1.isTcpSubchannelAddress(address)) {\n          addr = {\n            host: address.host,\n            port: portNum\n          };\n        } else {\n          addr = address;\n        }\n        const http2Server = setupServer();\n        return new Promise((resolve, reject) => {\n          const onError = err => {\n            this.trace('Failed to bind ' + subchannel_address_1.subchannelAddressToString(address) + ' with error ' + err.message);\n            resolve(err);\n          };\n          http2Server.once('error', onError);\n          http2Server.listen(addr, () => {\n            const boundAddress = http2Server.address();\n            let boundSubchannelAddress;\n            if (typeof boundAddress === 'string') {\n              boundSubchannelAddress = {\n                path: boundAddress\n              };\n            } else {\n              boundSubchannelAddress = {\n                host: boundAddress.address,\n                port: boundAddress.port\n              };\n            }\n            let channelzRef;\n            channelzRef = channelz_1.registerChannelzSocket(subchannel_address_1.subchannelAddressToString(boundSubchannelAddress), () => {\n              return {\n                localAddress: boundSubchannelAddress,\n                remoteAddress: null,\n                security: null,\n                remoteName: null,\n                streamsStarted: 0,\n                streamsSucceeded: 0,\n                streamsFailed: 0,\n                messagesSent: 0,\n                messagesReceived: 0,\n                keepAlivesSent: 0,\n                lastLocalStreamCreatedTimestamp: null,\n                lastRemoteStreamCreatedTimestamp: null,\n                lastMessageSentTimestamp: null,\n                lastMessageReceivedTimestamp: null,\n                localFlowControlWindow: null,\n                remoteFlowControlWindow: null\n              };\n            }, this.channelzEnabled);\n            if (this.channelzEnabled) {\n              this.listenerChildrenTracker.refChild(channelzRef);\n            }\n            this.http2ServerList.push({\n              server: http2Server,\n              channelzRef: channelzRef\n            });\n            this.trace('Successfully bound ' + subchannel_address_1.subchannelAddressToString(boundSubchannelAddress));\n            resolve('port' in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);\n            http2Server.removeListener('error', onError);\n          });\n        });\n      })).then(results => {\n        let count = 0;\n        for (const result of results) {\n          if (typeof result === 'number') {\n            count += 1;\n            if (result !== portNum) {\n              throw new Error('Invalid state: multiple port numbers added from single address');\n            }\n          }\n        }\n        return {\n          port: portNum,\n          count: count + previousCount\n        };\n      });\n    };\n    const bindWildcardPort = addressList => {\n      if (addressList.length === 0) {\n        return Promise.resolve({\n          port: 0,\n          count: 0\n        });\n      }\n      const address = addressList[0];\n      const http2Server = setupServer();\n      return new Promise((resolve, reject) => {\n        const onError = err => {\n          this.trace('Failed to bind ' + subchannel_address_1.subchannelAddressToString(address) + ' with error ' + err.message);\n          resolve(bindWildcardPort(addressList.slice(1)));\n        };\n        http2Server.once('error', onError);\n        http2Server.listen(address, () => {\n          const boundAddress = http2Server.address();\n          const boundSubchannelAddress = {\n            host: boundAddress.address,\n            port: boundAddress.port\n          };\n          let channelzRef;\n          channelzRef = channelz_1.registerChannelzSocket(subchannel_address_1.subchannelAddressToString(boundSubchannelAddress), () => {\n            return {\n              localAddress: boundSubchannelAddress,\n              remoteAddress: null,\n              security: null,\n              remoteName: null,\n              streamsStarted: 0,\n              streamsSucceeded: 0,\n              streamsFailed: 0,\n              messagesSent: 0,\n              messagesReceived: 0,\n              keepAlivesSent: 0,\n              lastLocalStreamCreatedTimestamp: null,\n              lastRemoteStreamCreatedTimestamp: null,\n              lastMessageSentTimestamp: null,\n              lastMessageReceivedTimestamp: null,\n              localFlowControlWindow: null,\n              remoteFlowControlWindow: null\n            };\n          }, this.channelzEnabled);\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.refChild(channelzRef);\n          }\n          this.http2ServerList.push({\n            server: http2Server,\n            channelzRef: channelzRef\n          });\n          this.trace('Successfully bound ' + subchannel_address_1.subchannelAddressToString(boundSubchannelAddress));\n          resolve(bindSpecificPort(addressList.slice(1), boundAddress.port, 1));\n          http2Server.removeListener('error', onError);\n        });\n      });\n    };\n    const resolverListener = {\n      onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError) => {\n        // We only want one resolution result. Discard all future results\n        resolverListener.onSuccessfulResolution = () => {};\n        if (addressList.length === 0) {\n          deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);\n          return;\n        }\n        let bindResultPromise;\n        if (subchannel_address_1.isTcpSubchannelAddress(addressList[0])) {\n          if (addressList[0].port === 0) {\n            bindResultPromise = bindWildcardPort(addressList);\n          } else {\n            bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);\n          }\n        } else {\n          // Use an arbitrary non-zero port for non-TCP addresses\n          bindResultPromise = bindSpecificPort(addressList, 1, 0);\n        }\n        bindResultPromise.then(bindResult => {\n          if (bindResult.count === 0) {\n            const errorString = `No address added out of total ${addressList.length} resolved`;\n            logging.log(constants_1.LogVerbosity.ERROR, errorString);\n            deferredCallback(new Error(errorString), 0);\n          } else {\n            if (bindResult.count < addressList.length) {\n              logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\n            }\n            deferredCallback(null, bindResult.port);\n          }\n        }, error => {\n          const errorString = `No address added out of total ${addressList.length} resolved`;\n          logging.log(constants_1.LogVerbosity.ERROR, errorString);\n          deferredCallback(new Error(errorString), 0);\n        });\n      },\n      onError: error => {\n        deferredCallback(new Error(error.details), 0);\n      }\n    };\n    const resolver = resolver_1.createResolver(portUri, resolverListener, this.options);\n    resolver.updateResolution();\n  }\n  forceShutdown() {\n    // Close the server if it is still running.\n    for (const {\n      server: http2Server,\n      channelzRef: ref\n    } of this.http2ServerList) {\n      if (http2Server.listening) {\n        http2Server.close(() => {\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.unrefChild(ref);\n            channelz_1.unregisterChannelzRef(ref);\n          }\n        });\n      }\n    }\n    this.started = false;\n    // Always destroy any available sessions. It's possible that one or more\n    // tryShutdown() calls are in progress. Don't wait on them to finish.\n    this.sessions.forEach((channelzInfo, session) => {\n      // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n      // recognize destroy(code) as a valid signature.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      session.destroy(http2.constants.NGHTTP2_CANCEL);\n    });\n    this.sessions.clear();\n    if (this.channelzEnabled) {\n      channelz_1.unregisterChannelzRef(this.channelzRef);\n    }\n  }\n  register(name, handler, serialize, deserialize, type) {\n    if (this.handlers.has(name)) {\n      return false;\n    }\n    this.handlers.set(name, {\n      func: handler,\n      serialize,\n      deserialize,\n      type,\n      path: name\n    });\n    return true;\n  }\n  unregister(name) {\n    return this.handlers.delete(name);\n  }\n  start() {\n    if (this.http2ServerList.length === 0 || this.http2ServerList.every(_ref => {\n      let {\n        server: http2Server\n      } = _ref;\n      return http2Server.listening !== true;\n    })) {\n      throw new Error('server must be bound in order to start');\n    }\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Starting');\n    }\n    this.started = true;\n  }\n  tryShutdown(callback) {\n    const wrappedCallback = error => {\n      if (this.channelzEnabled) {\n        channelz_1.unregisterChannelzRef(this.channelzRef);\n      }\n      callback(error);\n    };\n    let pendingChecks = 0;\n    function maybeCallback() {\n      pendingChecks--;\n      if (pendingChecks === 0) {\n        wrappedCallback();\n      }\n    }\n    // Close the server if necessary.\n    this.started = false;\n    for (const {\n      server: http2Server,\n      channelzRef: ref\n    } of this.http2ServerList) {\n      if (http2Server.listening) {\n        pendingChecks++;\n        http2Server.close(() => {\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.unrefChild(ref);\n            channelz_1.unregisterChannelzRef(ref);\n          }\n          maybeCallback();\n        });\n      }\n    }\n    this.sessions.forEach((channelzInfo, session) => {\n      if (!session.closed) {\n        pendingChecks += 1;\n        session.close(maybeCallback);\n      }\n    });\n    if (pendingChecks === 0) {\n      wrappedCallback();\n    }\n  }\n  addHttp2Port() {\n    throw new Error('Not yet implemented');\n  }\n  /**\n   * Get the channelz reference object for this server. The returned value is\n   * garbage if channelz is disabled for this server.\n   * @returns\n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n  _verifyContentType(stream, headers) {\n    const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n    if (typeof contentType !== 'string' || !contentType.startsWith('application/grpc')) {\n      stream.respond({\n        [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE\n      }, {\n        endStream: true\n      });\n      return false;\n    }\n    return true;\n  }\n  _retrieveHandler(headers) {\n    const path = headers[HTTP2_HEADER_PATH];\n    this.trace('Received call to method ' + path + ' at address ' + this.serverAddressString);\n    const handler = this.handlers.get(path);\n    if (handler === undefined) {\n      this.trace('No handler registered for method ' + path + '. Sending UNIMPLEMENTED status.');\n      throw getUnimplementedStatusResponse(path);\n    }\n    return handler;\n  }\n  _respondWithError(err, stream) {\n    let channelzSessionInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const call = new server_call_1.Http2ServerCallStream(stream, null, this.options);\n    if (err.code === undefined) {\n      err.code = constants_1.Status.INTERNAL;\n    }\n    if (this.channelzEnabled) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n    }\n    call.sendError(err);\n  }\n  _channelzHandler(stream, headers) {\n    const channelzSessionInfo = this.sessions.get(stream.session);\n    this.callTracker.addCallStarted();\n    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\n    if (!this._verifyContentType(stream, headers)) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n      return;\n    }\n    let handler;\n    try {\n      handler = this._retrieveHandler(headers);\n    } catch (err) {\n      this._respondWithError(err, stream, channelzSessionInfo);\n      return;\n    }\n    const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n    call.once('callEnd', code => {\n      if (code === constants_1.Status.OK) {\n        this.callTracker.addCallSucceeded();\n      } else {\n        this.callTracker.addCallFailed();\n      }\n    });\n    if (channelzSessionInfo) {\n      call.once('streamEnd', success => {\n        if (success) {\n          channelzSessionInfo.streamTracker.addCallSucceeded();\n        } else {\n          channelzSessionInfo.streamTracker.addCallFailed();\n        }\n      });\n      call.on('sendMessage', () => {\n        channelzSessionInfo.messagesSent += 1;\n        channelzSessionInfo.lastMessageSentTimestamp = new Date();\n      });\n      call.on('receiveMessage', () => {\n        channelzSessionInfo.messagesReceived += 1;\n        channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n      });\n    }\n    if (!this._runHandlerForCall(call, handler, headers)) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n      call.sendError({\n        code: constants_1.Status.INTERNAL,\n        details: `Unknown handler type: ${handler.type}`\n      });\n    }\n  }\n  _streamHandler(stream, headers) {\n    if (this._verifyContentType(stream, headers) !== true) {\n      return;\n    }\n    let handler;\n    try {\n      handler = this._retrieveHandler(headers);\n    } catch (err) {\n      this._respondWithError(err, stream, null);\n      return;\n    }\n    const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n    if (!this._runHandlerForCall(call, handler, headers)) {\n      call.sendError({\n        code: constants_1.Status.INTERNAL,\n        details: `Unknown handler type: ${handler.type}`\n      });\n    }\n  }\n  _runHandlerForCall(call, handler, headers) {\n    var _a;\n    const metadata = call.receiveMetadata(headers);\n    const encoding = (_a = metadata.get('grpc-encoding')[0]) !== null && _a !== void 0 ? _a : 'identity';\n    metadata.remove('grpc-encoding');\n    const {\n      type\n    } = handler;\n    if (type === 'unary') {\n      handleUnary(call, handler, metadata, encoding);\n    } else if (type === 'clientStream') {\n      handleClientStreaming(call, handler, metadata, encoding);\n    } else if (type === 'serverStream') {\n      handleServerStreaming(call, handler, metadata, encoding);\n    } else if (type === 'bidi') {\n      handleBidiStreaming(call, handler, metadata, encoding);\n    } else {\n      return false;\n    }\n    return true;\n  }\n  _setupHandlers(http2Server) {\n    if (http2Server === null) {\n      return;\n    }\n    const serverAddress = http2Server.address();\n    let serverAddressString = 'null';\n    if (serverAddress) {\n      if (typeof serverAddress === 'string') {\n        serverAddressString = serverAddress;\n      } else {\n        serverAddressString = serverAddress.address + ':' + serverAddress.port;\n      }\n    }\n    this.serverAddressString = serverAddressString;\n    const handler = this.channelzEnabled ? this._channelzHandler : this._streamHandler;\n    http2Server.on('stream', handler.bind(this));\n    http2Server.on('session', session => {\n      var _a;\n      if (!this.started) {\n        session.destroy();\n        return;\n      }\n      let channelzRef;\n      channelzRef = channelz_1.registerChannelzSocket((_a = session.socket.remoteAddress) !== null && _a !== void 0 ? _a : 'unknown', this.getChannelzSessionInfoGetter(session), this.channelzEnabled);\n      const channelzSessionInfo = {\n        ref: channelzRef,\n        streamTracker: new channelz_1.ChannelzCallTracker(),\n        messagesSent: 0,\n        messagesReceived: 0,\n        lastMessageSentTimestamp: null,\n        lastMessageReceivedTimestamp: null\n      };\n      this.sessions.set(session, channelzSessionInfo);\n      const clientAddress = session.socket.remoteAddress;\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);\n        this.sessionChildrenTracker.refChild(channelzRef);\n      }\n      session.on('close', () => {\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);\n          this.sessionChildrenTracker.unrefChild(channelzRef);\n          channelz_1.unregisterChannelzRef(channelzRef);\n        }\n        this.sessions.delete(session);\n      });\n    });\n  }\n}\nexports.Server = Server;\nfunction handleUnary(call, handler, metadata, encoding) {\n  call.receiveUnaryMessage(encoding, (err, request) => {\n    if (err) {\n      call.sendError(err);\n      return;\n    }\n    if (request === undefined || call.cancelled) {\n      return;\n    }\n    const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);\n    handler.func(emitter, (err, value, trailer, flags) => {\n      call.sendUnaryMessage(err, value, trailer, flags);\n    });\n  });\n}\nfunction handleClientStreaming(call, handler, metadata, encoding) {\n  const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize, encoding);\n  function respond(err, value, trailer, flags) {\n    stream.destroy();\n    call.sendUnaryMessage(err, value, trailer, flags);\n  }\n  if (call.cancelled) {\n    return;\n  }\n  stream.on('error', respond);\n  handler.func(stream, respond);\n}\nfunction handleServerStreaming(call, handler, metadata, encoding) {\n  call.receiveUnaryMessage(encoding, (err, request) => {\n    if (err) {\n      call.sendError(err);\n      return;\n    }\n    if (request === undefined || call.cancelled) {\n      return;\n    }\n    const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);\n    handler.func(stream);\n  });\n}\nfunction handleBidiStreaming(call, handler, metadata, encoding) {\n  const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize, encoding);\n  if (call.cancelled) {\n    return;\n  }\n  handler.func(stream);\n}","map":{"version":3,"names":["http2","require","constants_1","server_call_1","server_credentials_1","resolver_1","logging","subchannel_address_1","uri_parser_1","channelz_1","HTTP2_HEADER_PATH","constants","TRACER_NAME","noop","getUnimplementedStatusResponse","methodName","code","Status","UNIMPLEMENTED","details","getDefaultHandler","handlerType","unimplementedStatusResponse","call","callback","emit","Error","Server","constructor","options","http2ServerList","handlers","Map","sessions","started","serverAddressString","channelzEnabled","channelzTrace","ChannelzTrace","callTracker","ChannelzCallTracker","listenerChildrenTracker","ChannelzChildrenTracker","sessionChildrenTracker","channelzRef","registerChannelzServer","getChannelzInfo","addTrace","trace","listenerChildren","getChildLists","sessionChildren","getChannelzSessionInfoGetter","session","sessionInfo","get","sessionSocket","socket","remoteAddress","stringToSubchannelAddress","remotePort","localAddress","localPort","tlsInfo","encrypted","tlsSocket","cipherInfo","getCipher","certificate","getCertificate","peerCertificate","getPeerCertificate","cipherSuiteStandardName","_a","standardName","cipherSuiteOtherName","name","localCertificate","raw","remoteCertificate","socketInfo","security","remoteName","streamsStarted","streamTracker","callsStarted","streamsSucceeded","callsSucceeded","streamsFailed","callsFailed","messagesSent","messagesReceived","keepAlivesSent","lastLocalStreamCreatedTimestamp","lastRemoteStreamCreatedTimestamp","lastCallStartedTimestamp","lastMessageSentTimestamp","lastMessageReceivedTimestamp","localFlowControlWindow","_b","state","localWindowSize","remoteFlowControlWindow","_c","remoteWindowSize","text","LogVerbosity","DEBUG","id","addProtoService","addService","service","implementation","serviceKeys","Object","keys","length","forEach","attrs","methodType","requestStream","responseStream","implFn","impl","undefined","originalName","bind","success","register","path","responseSerialize","requestDeserialize","removeService","unregister","port","creds","bindAsync","TypeError","ServerCredentials","initialPortUri","parseUri","portUri","mapUriDefaultScheme","serverOptions","maxSendHeaderBlockLength","Number","MAX_SAFE_INTEGER","maxSessionMemory","settings","maxConcurrentStreams","deferredCallback","error","process","nextTick","setupServer","http2Server","_isSecure","secureServerOptions","assign","_getSettings","createSecureServer","on","e","message","createServer","setTimeout","_setupHandlers","bindSpecificPort","addressList","portNum","previousCount","Promise","resolve","count","all","map","address","subchannelAddressToString","addr","isTcpSubchannelAddress","host","reject","onError","err","once","listen","boundAddress","boundSubchannelAddress","registerChannelzSocket","refChild","push","server","removeListener","then","results","result","bindWildcardPort","slice","resolverListener","onSuccessfulResolution","serviceConfig","serviceConfigError","bindResultPromise","bindResult","errorString","log","ERROR","INFO","resolver","createResolver","updateResolution","forceShutdown","ref","listening","close","unrefChild","unregisterChannelzRef","channelzInfo","destroy","NGHTTP2_CANCEL","clear","handler","serialize","deserialize","type","has","set","func","delete","start","every","_ref","tryShutdown","wrappedCallback","pendingChecks","maybeCallback","closed","addHttp2Port","getChannelzRef","_verifyContentType","stream","headers","contentType","HTTP2_HEADER_CONTENT_TYPE","startsWith","respond","HTTP2_HEADER_STATUS","HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE","endStream","_retrieveHandler","_respondWithError","channelzSessionInfo","arguments","Http2ServerCallStream","INTERNAL","addCallFailed","sendError","_channelzHandler","addCallStarted","OK","addCallSucceeded","Date","_runHandlerForCall","_streamHandler","metadata","receiveMetadata","encoding","remove","handleUnary","handleClientStreaming","handleServerStreaming","handleBidiStreaming","serverAddress","clientAddress","exports","receiveUnaryMessage","request","cancelled","emitter","ServerUnaryCallImpl","value","trailer","flags","sendUnaryMessage","ServerReadableStreamImpl","ServerWritableStreamImpl","ServerDuplexStreamImpl"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/@grpc/grpc-js/src/server.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as http2 from 'http2';\nimport { AddressInfo } from 'net';\n\nimport { ServiceError } from './call';\nimport { Status, LogVerbosity } from './constants';\nimport { Deserialize, Serialize, ServiceDefinition } from './make-client';\nimport { Metadata } from './metadata';\nimport {\n  BidiStreamingHandler,\n  ClientStreamingHandler,\n  HandleCall,\n  Handler,\n  HandlerType,\n  Http2ServerCallStream,\n  sendUnaryData,\n  ServerDuplexStream,\n  ServerDuplexStreamImpl,\n  ServerReadableStream,\n  ServerReadableStreamImpl,\n  ServerStreamingHandler,\n  ServerUnaryCall,\n  ServerUnaryCallImpl,\n  ServerWritableStream,\n  ServerWritableStreamImpl,\n  UnaryHandler,\n  ServerErrorResponse,\n  ServerStatusResponse,\n} from './server-call';\nimport { ServerCredentials } from './server-credentials';\nimport { ChannelOptions } from './channel-options';\nimport {\n  createResolver,\n  ResolverListener,\n  mapUriDefaultScheme,\n} from './resolver';\nimport * as logging from './logging';\nimport {\n  SubchannelAddress,\n  TcpSubchannelAddress,\n  isTcpSubchannelAddress,\n  subchannelAddressToString,\n  stringToSubchannelAddress,\n} from './subchannel-address';\nimport { parseUri } from './uri-parser';\nimport { ChannelzCallTracker, ChannelzChildrenTracker, ChannelzTrace, registerChannelzServer, registerChannelzSocket, ServerInfo, ServerRef, SocketInfo, SocketRef, TlsInfo, unregisterChannelzRef } from './channelz';\nimport { CipherNameAndProtocol, TLSSocket } from 'tls';\n\nconst {\n  HTTP2_HEADER_PATH\n} = http2.constants\n\nconst TRACER_NAME = 'server';\n\ninterface BindResult {\n  port: number;\n  count: number;\n}\n\nfunction noop(): void {}\n\nfunction getUnimplementedStatusResponse(\n  methodName: string\n): Partial<ServiceError> {\n  return {\n    code: Status.UNIMPLEMENTED,\n    details: `The server does not implement the method ${methodName}`,\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype UntypedUnaryHandler = UnaryHandler<any, any>;\ntype UntypedClientStreamingHandler = ClientStreamingHandler<any, any>;\ntype UntypedServerStreamingHandler = ServerStreamingHandler<any, any>;\ntype UntypedBidiStreamingHandler = BidiStreamingHandler<any, any>;\nexport type UntypedHandleCall = HandleCall<any, any>;\ntype UntypedHandler = Handler<any, any>;\nexport interface UntypedServiceImplementation {\n  [name: string]: UntypedHandleCall;\n}\n\nfunction getDefaultHandler(handlerType: HandlerType, methodName: string) {\n  const unimplementedStatusResponse = getUnimplementedStatusResponse(\n    methodName\n  );\n  switch (handlerType) {\n    case 'unary':\n      return (\n        call: ServerUnaryCall<any, any>,\n        callback: sendUnaryData<any>\n      ) => {\n        callback(unimplementedStatusResponse as ServiceError, null);\n      };\n    case 'clientStream':\n      return (\n        call: ServerReadableStream<any, any>,\n        callback: sendUnaryData<any>\n      ) => {\n        callback(unimplementedStatusResponse as ServiceError, null);\n      };\n    case 'serverStream':\n      return (call: ServerWritableStream<any, any>) => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    case 'bidi':\n      return (call: ServerDuplexStream<any, any>) => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    default:\n      throw new Error(`Invalid handlerType ${handlerType}`);\n  }\n}\n\ninterface ChannelzSessionInfo {\n  ref: SocketRef;\n  streamTracker: ChannelzCallTracker;\n  messagesSent: number;\n  messagesReceived: number;\n  lastMessageSentTimestamp: Date | null;\n  lastMessageReceivedTimestamp: Date | null;\n}\n\ninterface ChannelzListenerInfo {\n  ref: SocketRef;\n}\n\nexport class Server {\n  private http2ServerList: { server: (http2.Http2Server | http2.Http2SecureServer), channelzRef: SocketRef }[] = [];\n\n  private handlers: Map<string, UntypedHandler> = new Map<\n    string,\n    UntypedHandler\n  >();\n  private sessions = new Map<http2.ServerHttp2Session, ChannelzSessionInfo>();\n  private started = false;\n  private options: ChannelOptions;\n  private serverAddressString: string = 'null'\n\n  // Channelz Info\n  private readonly channelzEnabled: boolean = true;\n  private channelzRef: ServerRef;\n  private channelzTrace = new ChannelzTrace();\n  private callTracker = new ChannelzCallTracker();\n  private listenerChildrenTracker = new ChannelzChildrenTracker();\n  private sessionChildrenTracker = new ChannelzChildrenTracker();\n\n  constructor(options?: ChannelOptions) {\n    this.options = options ?? {};\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzRef = registerChannelzServer(() => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Server created');\n    }\n\n    this.trace('Server constructed');\n  }\n\n  private getChannelzInfo(): ServerInfo {\n    return {\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      listenerChildren: this.listenerChildrenTracker.getChildLists(),\n      sessionChildren: this.sessionChildrenTracker.getChildLists()\n    };\n  }\n\n  private getChannelzSessionInfoGetter(session: http2.ServerHttp2Session): () => SocketInfo {\n    return () => {\n      const sessionInfo = this.sessions.get(session)!;\n      const sessionSocket = session.socket;\n      const remoteAddress = sessionSocket.remoteAddress ? stringToSubchannelAddress(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n      const localAddress = sessionSocket.localAddress ? stringToSubchannelAddress(sessionSocket.localAddress!, sessionSocket.localPort) : null;\n      let tlsInfo: TlsInfo | null;\n      if (session.encrypted) {\n        const tlsSocket: TLSSocket = sessionSocket as TLSSocket;\n        const cipherInfo: CipherNameAndProtocol & {standardName?: string} = tlsSocket.getCipher();\n        const certificate = tlsSocket.getCertificate();\n        const peerCertificate = tlsSocket.getPeerCertificate();\n        tlsInfo = {\n          cipherSuiteStandardName: cipherInfo.standardName ?? null,\n          cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n          localCertificate: (certificate && 'raw' in certificate) ? certificate.raw : null,\n          remoteCertificate: (peerCertificate && 'raw' in peerCertificate) ? peerCertificate.raw : null\n        };\n      } else {\n        tlsInfo = null;\n      }\n      const socketInfo: SocketInfo = {\n        remoteAddress: remoteAddress,\n        localAddress: localAddress,\n        security: tlsInfo,\n        remoteName: null,\n        streamsStarted: sessionInfo.streamTracker.callsStarted,\n        streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n        streamsFailed: sessionInfo.streamTracker.callsFailed,\n        messagesSent: sessionInfo.messagesSent,\n        messagesReceived: sessionInfo.messagesReceived,\n        keepAlivesSent: 0,\n        lastLocalStreamCreatedTimestamp: null,\n        lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n        lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n        lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n        localFlowControlWindow: session.state.localWindowSize ?? null,\n        remoteFlowControlWindow: session.state.remoteWindowSize ?? null\n      };\n      return socketInfo;\n    };\n  }\n\n  private trace(text: string): void {\n    logging.trace(LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);\n  }\n  \n\n  addProtoService(): never {\n    throw new Error('Not implemented. Use addService() instead');\n  }\n\n  addService(\n    service: ServiceDefinition,\n    implementation: UntypedServiceImplementation\n  ): void {\n    if (\n      service === null ||\n      typeof service !== 'object' ||\n      implementation === null ||\n      typeof implementation !== 'object'\n    ) {\n      throw new Error('addService() requires two objects as arguments');\n    }\n\n    const serviceKeys = Object.keys(service);\n\n    if (serviceKeys.length === 0) {\n      throw new Error('Cannot add an empty service to a server');\n    }\n\n    serviceKeys.forEach((name) => {\n      const attrs = service[name];\n      let methodType: HandlerType;\n\n      if (attrs.requestStream) {\n        if (attrs.responseStream) {\n          methodType = 'bidi';\n        } else {\n          methodType = 'clientStream';\n        }\n      } else {\n        if (attrs.responseStream) {\n          methodType = 'serverStream';\n        } else {\n          methodType = 'unary';\n        }\n      }\n\n      let implFn = implementation[name];\n      let impl;\n\n      if (implFn === undefined && typeof attrs.originalName === 'string') {\n        implFn = implementation[attrs.originalName];\n      }\n\n      if (implFn !== undefined) {\n        impl = implFn.bind(implementation);\n      } else {\n        impl = getDefaultHandler(methodType, name);\n      }\n\n      const success = this.register(\n        attrs.path,\n        impl as UntypedHandleCall,\n        attrs.responseSerialize,\n        attrs.requestDeserialize,\n        methodType\n      );\n\n      if (success === false) {\n        throw new Error(`Method handler for ${attrs.path} already provided.`);\n      }\n    });\n  }\n\n  removeService(service: ServiceDefinition): void {\n    if (service === null || typeof service !== 'object') {\n      throw new Error('removeService() requires object as argument');\n    }\n\n    const serviceKeys = Object.keys(service);\n    serviceKeys.forEach((name) => {\n      const attrs = service[name];\n      this.unregister(attrs.path);\n    });\n  }\n\n  bind(port: string, creds: ServerCredentials): never {\n    throw new Error('Not implemented. Use bindAsync() instead');\n  }\n\n  bindAsync(\n    port: string,\n    creds: ServerCredentials,\n    callback: (error: Error | null, port: number) => void\n  ): void {\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n\n    if (typeof port !== 'string') {\n      throw new TypeError('port must be a string');\n    }\n\n    if (creds === null || !(creds instanceof ServerCredentials)) {\n      throw new TypeError('creds must be a ServerCredentials object');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n\n    const initialPortUri = parseUri(port);\n    if (initialPortUri === null) {\n      throw new Error(`Could not parse port \"${port}\"`);\n    }\n    const portUri = mapUriDefaultScheme(initialPortUri);\n    if (portUri === null) {\n      throw new Error(`Could not get a default scheme for port \"${port}\"`);\n    }\n\n    const serverOptions: http2.ServerOptions = {\n      maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER,\n    };\n    if ('grpc-node.max_session_memory' in this.options) {\n      serverOptions.maxSessionMemory = this.options[\n        'grpc-node.max_session_memory'\n      ];\n    } else {\n      /* By default, set a very large max session memory limit, to effectively\n       * disable enforcement of the limit. Some testing indicates that Node's\n       * behavior degrades badly when this limit is reached, so we solve that\n       * by disabling the check entirely. */\n      serverOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n    }\n    if ('grpc.max_concurrent_streams' in this.options) {\n      serverOptions.settings = {\n        maxConcurrentStreams: this.options['grpc.max_concurrent_streams'],\n      };\n    }\n\n    const deferredCallback = (error: Error | null, port: number) => {\n      process.nextTick(() => callback(error, port));\n    }\n\n    const setupServer = (): http2.Http2Server | http2.Http2SecureServer => {\n      let http2Server: http2.Http2Server | http2.Http2SecureServer;\n      if (creds._isSecure()) {\n        const secureServerOptions = Object.assign(\n          serverOptions,\n          creds._getSettings()!\n        );\n        http2Server = http2.createSecureServer(secureServerOptions);\n        http2Server.on('secureConnection', (socket: TLSSocket) => {\n          /* These errors need to be handled by the user of Http2SecureServer,\n           * according to https://github.com/nodejs/node/issues/35824 */\n          socket.on('error', (e: Error) => {\n            this.trace('An incoming TLS connection closed with error: ' + e.message);\n          });\n        });\n      } else {\n        http2Server = http2.createServer(serverOptions);\n      }\n\n      http2Server.setTimeout(0, noop);\n      this._setupHandlers(http2Server);\n      return http2Server;\n    };\n\n    const bindSpecificPort = (\n      addressList: SubchannelAddress[],\n      portNum: number,\n      previousCount: number\n    ): Promise<BindResult> => {\n      if (addressList.length === 0) {\n        return Promise.resolve({ port: portNum, count: previousCount });\n      }\n      return Promise.all(\n        addressList.map((address) => {\n          this.trace('Attempting to bind ' + subchannelAddressToString(address));\n          let addr: SubchannelAddress;\n          if (isTcpSubchannelAddress(address)) {\n            addr = {\n              host: (address as TcpSubchannelAddress).host,\n              port: portNum,\n            };\n          } else {\n            addr = address;\n          }\n\n          const http2Server = setupServer();\n          return new Promise<number | Error>((resolve, reject) => {\n            const onError = (err: Error) => {\n              this.trace('Failed to bind ' + subchannelAddressToString(address) + ' with error ' + err.message);\n              resolve(err);\n            }\n\n            http2Server.once('error', onError);\n\n            http2Server.listen(addr, () => {\n              const boundAddress = http2Server.address()!;\n              let boundSubchannelAddress: SubchannelAddress;\n              if (typeof boundAddress === 'string') {\n                boundSubchannelAddress = {\n                  path: boundAddress\n                };\n              } else {\n                boundSubchannelAddress = {\n                  host: boundAddress.address,\n                  port: boundAddress.port\n                }\n              }\n              let channelzRef: SocketRef;\n              channelzRef = registerChannelzSocket(subchannelAddressToString(boundSubchannelAddress), () => {\n                return {\n                  localAddress: boundSubchannelAddress,\n                  remoteAddress: null,\n                  security: null,\n                  remoteName: null,\n                  streamsStarted: 0,\n                  streamsSucceeded: 0,\n                  streamsFailed: 0,\n                  messagesSent: 0,\n                  messagesReceived: 0,\n                  keepAlivesSent: 0,\n                  lastLocalStreamCreatedTimestamp: null,\n                  lastRemoteStreamCreatedTimestamp: null,\n                  lastMessageSentTimestamp: null,\n                  lastMessageReceivedTimestamp: null,\n                  localFlowControlWindow: null,\n                  remoteFlowControlWindow: null\n                };\n              }, this.channelzEnabled);\n              if (this.channelzEnabled) {\n                this.listenerChildrenTracker.refChild(channelzRef);\n              }\n              this.http2ServerList.push({server: http2Server, channelzRef: channelzRef});\n              this.trace('Successfully bound ' + subchannelAddressToString(boundSubchannelAddress));\n              resolve('port' in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);\n              http2Server.removeListener('error', onError);\n            });\n          });\n        })\n      ).then((results) => {\n        let count = 0;\n        for (const result of results) {\n          if (typeof result === 'number') {\n            count += 1;\n            if (result !== portNum) {\n              throw new Error(\n                'Invalid state: multiple port numbers added from single address'\n              );\n            }\n          }\n        }\n        return {\n          port: portNum,\n          count: count + previousCount,\n        };\n      });\n    };\n\n    const bindWildcardPort = (\n      addressList: SubchannelAddress[]\n    ): Promise<BindResult> => {\n      if (addressList.length === 0) {\n        return Promise.resolve<BindResult>({ port: 0, count: 0 });\n      }\n      const address = addressList[0];\n      const http2Server = setupServer();\n      return new Promise<BindResult>((resolve, reject) => {\n        const onError = (err: Error) => {\n          this.trace('Failed to bind ' + subchannelAddressToString(address) + ' with error ' + err.message);\n          resolve(bindWildcardPort(addressList.slice(1)));\n        }\n\n        http2Server.once('error', onError);\n\n        http2Server.listen(address, () => {\n          const boundAddress = http2Server.address() as AddressInfo;\n          const boundSubchannelAddress: SubchannelAddress = {\n            host: boundAddress.address,\n            port: boundAddress.port\n          };\n          let channelzRef: SocketRef;\n          channelzRef = registerChannelzSocket(subchannelAddressToString(boundSubchannelAddress), () => {\n            return {\n              localAddress: boundSubchannelAddress,\n              remoteAddress: null,\n              security: null,\n              remoteName: null,\n              streamsStarted: 0,\n              streamsSucceeded: 0,\n              streamsFailed: 0,\n              messagesSent: 0,\n              messagesReceived: 0,\n              keepAlivesSent: 0,\n              lastLocalStreamCreatedTimestamp: null,\n              lastRemoteStreamCreatedTimestamp: null,\n              lastMessageSentTimestamp: null,\n              lastMessageReceivedTimestamp: null,\n              localFlowControlWindow: null,\n              remoteFlowControlWindow: null\n            };\n          }, this.channelzEnabled);\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.refChild(channelzRef);\n          }\n          this.http2ServerList.push({server: http2Server, channelzRef: channelzRef});\n          this.trace('Successfully bound ' + subchannelAddressToString(boundSubchannelAddress));\n          resolve(\n            bindSpecificPort(\n              addressList.slice(1),\n              boundAddress.port,\n              1\n            )\n          );\n          http2Server.removeListener('error', onError);\n        });\n      });\n    };\n\n    const resolverListener: ResolverListener = {\n      onSuccessfulResolution: (\n        addressList,\n        serviceConfig,\n        serviceConfigError\n      ) => {\n        // We only want one resolution result. Discard all future results\n        resolverListener.onSuccessfulResolution = () => {};\n        if (addressList.length === 0) {\n          deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);\n          return;\n        }\n        let bindResultPromise: Promise<BindResult>;\n        if (isTcpSubchannelAddress(addressList[0])) {\n          if (addressList[0].port === 0) {\n            bindResultPromise = bindWildcardPort(addressList);\n          } else {\n            bindResultPromise = bindSpecificPort(\n              addressList,\n              addressList[0].port,\n              0\n            );\n          }\n        } else {\n          // Use an arbitrary non-zero port for non-TCP addresses\n          bindResultPromise = bindSpecificPort(addressList, 1, 0);\n        }\n        bindResultPromise.then(\n          (bindResult) => {\n            if (bindResult.count === 0) {\n              const errorString = `No address added out of total ${addressList.length} resolved`;\n              logging.log(LogVerbosity.ERROR, errorString);\n              deferredCallback(new Error(errorString), 0);\n            } else {\n              if (bindResult.count < addressList.length) {\n                logging.log(\n                  LogVerbosity.INFO,\n                  `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`\n                );\n              }\n              deferredCallback(null, bindResult.port);\n            }\n          },\n          (error) => {\n            const errorString = `No address added out of total ${addressList.length} resolved`;\n            logging.log(LogVerbosity.ERROR, errorString);\n            deferredCallback(new Error(errorString), 0);\n          }\n        );\n      },\n      onError: (error) => {\n        deferredCallback(new Error(error.details), 0);\n      },\n    };\n\n    const resolver = createResolver(portUri, resolverListener, this.options);\n    resolver.updateResolution();\n  }\n\n  forceShutdown(): void {\n    // Close the server if it is still running.\n\n    for (const {server: http2Server, channelzRef: ref} of this.http2ServerList) {\n      if (http2Server.listening) {\n        http2Server.close(() => {\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.unrefChild(ref);\n            unregisterChannelzRef(ref);\n          }\n        });\n      }\n    }\n\n    this.started = false;\n\n    // Always destroy any available sessions. It's possible that one or more\n    // tryShutdown() calls are in progress. Don't wait on them to finish.\n    this.sessions.forEach((channelzInfo, session) => {\n      // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n      // recognize destroy(code) as a valid signature.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      session.destroy(http2.constants.NGHTTP2_CANCEL as any);\n    });\n    this.sessions.clear();\n    if (this.channelzEnabled) {\n      unregisterChannelzRef(this.channelzRef);\n    }\n  }\n\n  register<RequestType, ResponseType>(\n    name: string,\n    handler: HandleCall<RequestType, ResponseType>,\n    serialize: Serialize<ResponseType>,\n    deserialize: Deserialize<RequestType>,\n    type: string\n  ): boolean {\n    if (this.handlers.has(name)) {\n      return false;\n    }\n\n    this.handlers.set(name, {\n      func: handler,\n      serialize,\n      deserialize,\n      type,\n      path: name,\n    } as UntypedHandler);\n    return true;\n  }\n\n  unregister(name: string): boolean {\n    return this.handlers.delete(name);\n  }\n\n  start(): void {\n    if (\n      this.http2ServerList.length === 0 ||\n      this.http2ServerList.every(\n        ({server: http2Server}) => http2Server.listening !== true\n      )\n    ) {\n      throw new Error('server must be bound in order to start');\n    }\n\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Starting');\n    }\n    this.started = true;\n  }\n\n  tryShutdown(callback: (error?: Error) => void): void {\n    const wrappedCallback = (error?: Error) => {\n      if (this.channelzEnabled) {\n        unregisterChannelzRef(this.channelzRef);\n      }\n      callback(error);\n    };\n    let pendingChecks = 0;\n\n    function maybeCallback(): void {\n      pendingChecks--;\n\n      if (pendingChecks === 0) {\n        wrappedCallback();\n      }\n    }\n\n    // Close the server if necessary.\n    this.started = false;\n\n    for (const {server: http2Server, channelzRef: ref} of this.http2ServerList) {\n      if (http2Server.listening) {\n        pendingChecks++;\n        http2Server.close(() => {\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.unrefChild(ref);\n            unregisterChannelzRef(ref);\n          }\n          maybeCallback();\n        });\n      }\n    }\n\n    this.sessions.forEach((channelzInfo, session) => {\n      if (!session.closed) {\n        pendingChecks += 1;\n        session.close(maybeCallback);\n      }\n    });\n    if (pendingChecks === 0) {\n      wrappedCallback();\n    }\n  }\n\n  addHttp2Port(): never {\n    throw new Error('Not yet implemented');\n  }\n\n  /**\n   * Get the channelz reference object for this server. The returned value is\n   * garbage if channelz is disabled for this server.\n   * @returns \n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n\n  private _verifyContentType(stream: http2.ServerHttp2Stream, headers: http2.IncomingHttpHeaders): boolean {\n    const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n\n    if (\n      typeof contentType !== 'string' ||\n      !contentType.startsWith('application/grpc')\n    ) {\n      stream.respond(\n        {\n          [http2.constants.HTTP2_HEADER_STATUS]:\n            http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE,\n        },\n        { endStream: true }\n      );\n      return false\n    }\n\n    return true\n  }\n\n  private _retrieveHandler(headers: http2.IncomingHttpHeaders): Handler<any, any> {\n    const path = headers[HTTP2_HEADER_PATH] as string\n\n    this.trace(\n      'Received call to method ' +\n      path +\n      ' at address ' +\n      this.serverAddressString\n    );\n\n    const handler = this.handlers.get(path);\n\n    if (handler === undefined) {\n      this.trace(\n        'No handler registered for method ' +\n        path +\n        '. Sending UNIMPLEMENTED status.'\n      );\n      throw getUnimplementedStatusResponse(path);\n    }\n\n    return handler\n  }\n  \n  private _respondWithError<T extends Partial<ServiceError>>(\n    err: T, \n    stream: http2.ServerHttp2Stream, \n    channelzSessionInfo: ChannelzSessionInfo | null = null\n  ) {\n    const call = new Http2ServerCallStream(stream, null!, this.options);\n    \n    if (err.code === undefined) {\n      err.code = Status.INTERNAL;\n    }\n\n    if (this.channelzEnabled) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo?.streamTracker.addCallFailed()\n    }\n\n    call.sendError(err);\n  }\n\n  private _channelzHandler(stream: http2.ServerHttp2Stream, headers: http2.IncomingHttpHeaders) {\n    const channelzSessionInfo = this.sessions.get(stream.session as http2.ServerHttp2Session);\n    \n    this.callTracker.addCallStarted();\n    channelzSessionInfo?.streamTracker.addCallStarted();\n\n    if (!this._verifyContentType(stream, headers)) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo?.streamTracker.addCallFailed();\n      return\n    }\n\n    let handler: Handler<any, any>\n    try {\n      handler = this._retrieveHandler(headers)\n    } catch (err) {\n      this._respondWithError(err, stream, channelzSessionInfo)\n      return\n    }\n  \n    const call = new Http2ServerCallStream(stream, handler, this.options);\n      \n    call.once('callEnd', (code: Status) => {\n      if (code === Status.OK) {\n        this.callTracker.addCallSucceeded();\n      } else {\n        this.callTracker.addCallFailed();\n      }\n    });\n    \n    if (channelzSessionInfo) {\n      call.once('streamEnd', (success: boolean) => {\n        if (success) {\n          channelzSessionInfo.streamTracker.addCallSucceeded();\n        } else {\n          channelzSessionInfo.streamTracker.addCallFailed();\n        }\n      });\n      call.on('sendMessage', () => {\n        channelzSessionInfo.messagesSent += 1;\n        channelzSessionInfo.lastMessageSentTimestamp = new Date();\n      });\n      call.on('receiveMessage', () => {\n        channelzSessionInfo.messagesReceived += 1;\n        channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n      });\n    }\n\n    if (!this._runHandlerForCall(call, handler, headers)) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo?.streamTracker.addCallFailed()\n\n      call.sendError({\n        code: Status.INTERNAL,\n        details: `Unknown handler type: ${handler.type}`\n      });\n    }\n  }\n\n  private _streamHandler(stream: http2.ServerHttp2Stream, headers: http2.IncomingHttpHeaders) {\n    if (this._verifyContentType(stream, headers) !== true) {\n      return\n    }\n\n    let handler: Handler<any, any>\n    try {\n      handler = this._retrieveHandler(headers)\n    } catch (err) {\n      this._respondWithError(err, stream, null)\n      return\n    }\n\n    const call = new Http2ServerCallStream(stream, handler, this.options)\n    if (!this._runHandlerForCall(call, handler, headers)) {\n      call.sendError({\n        code: Status.INTERNAL,\n        details: `Unknown handler type: ${handler.type}`\n      });\n    }\n  }\n\n  private _runHandlerForCall(call: Http2ServerCallStream<any, any>, handler: Handler<any, any>, headers: http2.IncomingHttpHeaders): boolean {\n    const metadata = call.receiveMetadata(headers);\n    const encoding = (metadata.get('grpc-encoding')[0] as string | undefined) ?? 'identity';\n    metadata.remove('grpc-encoding');\n\n    const { type } = handler\n    if (type === 'unary') {\n      handleUnary(call, handler as UntypedUnaryHandler, metadata, encoding);\n    } else if (type === 'clientStream') {\n      handleClientStreaming(\n        call,\n        handler as UntypedClientStreamingHandler,\n        metadata,\n        encoding\n      );\n    } else if (type === 'serverStream') {\n      handleServerStreaming(\n        call,\n        handler as UntypedServerStreamingHandler,\n        metadata,\n        encoding\n      );\n    } else if (type === 'bidi') {\n      handleBidiStreaming(\n        call,\n        handler as UntypedBidiStreamingHandler,\n        metadata,\n        encoding\n      );\n    } else {\n      return false\n    }\n\n    return true\n  }\n\n  private _setupHandlers(\n    http2Server: http2.Http2Server | http2.Http2SecureServer\n  ): void {\n    if (http2Server === null) {\n      return;\n    }\n\n    const serverAddress = http2Server.address();\n    let serverAddressString = 'null'\n    if (serverAddress) {\n      if (typeof serverAddress === 'string') {\n        serverAddressString = serverAddress\n      } else {\n        serverAddressString =\n          serverAddress.address + ':' + serverAddress.port\n      }\n    }\n    this.serverAddressString = serverAddressString\n\n    const handler = this.channelzEnabled \n      ? this._channelzHandler \n      : this._streamHandler\n\n    http2Server.on('stream', handler.bind(this))\n    http2Server.on('session', (session) => {\n      if (!this.started) {\n        session.destroy();\n        return;\n      }\n\n      let channelzRef: SocketRef;\n      channelzRef = registerChannelzSocket(session.socket.remoteAddress ?? 'unknown', this.getChannelzSessionInfoGetter(session), this.channelzEnabled);\n\n      const channelzSessionInfo: ChannelzSessionInfo = {\n        ref: channelzRef,\n        streamTracker: new ChannelzCallTracker(),\n        messagesSent: 0,\n        messagesReceived: 0,\n        lastMessageSentTimestamp: null,\n        lastMessageReceivedTimestamp: null\n      };\n\n      this.sessions.set(session, channelzSessionInfo);\n      const clientAddress = session.socket.remoteAddress;\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);\n        this.sessionChildrenTracker.refChild(channelzRef);\n      }\n      session.on('close', () => {\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);\n          this.sessionChildrenTracker.unrefChild(channelzRef);\n          unregisterChannelzRef(channelzRef);\n        }\n        this.sessions.delete(session);\n      });\n    });\n  }\n}\n\nfunction handleUnary<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: UnaryHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): void {\n  call.receiveUnaryMessage(encoding, (err, request) => {\n    if (err) {\n      call.sendError(err)\n      return\n    }\n\n    if (request === undefined || call.cancelled) {\n      return;\n    }\n\n    const emitter = new ServerUnaryCallImpl<RequestType, ResponseType>(\n      call,\n      metadata,\n      request\n    );\n\n    handler.func(\n      emitter,\n      (\n        err: ServerErrorResponse | ServerStatusResponse | null,\n        value?: ResponseType | null,\n        trailer?: Metadata,\n        flags?: number\n      ) => {\n        call.sendUnaryMessage(err, value, trailer, flags);\n      }\n    );\n  });\n}\n\nfunction handleClientStreaming<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: ClientStreamingHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): void {\n  const stream = new ServerReadableStreamImpl<RequestType, ResponseType>(\n    call,\n    metadata,\n    handler.deserialize,\n    encoding\n  );\n\n  function respond(\n    err: ServerErrorResponse | ServerStatusResponse | null,\n    value?: ResponseType | null,\n    trailer?: Metadata,\n    flags?: number\n  ) {\n    stream.destroy();\n    call.sendUnaryMessage(err, value, trailer, flags);\n  }\n\n  if (call.cancelled) {\n    return;\n  }\n\n  stream.on('error', respond);\n  handler.func(stream, respond);\n}\n\nfunction handleServerStreaming<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: ServerStreamingHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): void {\n  call.receiveUnaryMessage(encoding, (err, request) => {\n    if (err) {\n      call.sendError(err)\n      return\n    }\n\n    if (request === undefined || call.cancelled) {\n      return;\n    }\n\n    const stream = new ServerWritableStreamImpl<RequestType, ResponseType>(\n      call,\n      metadata,\n      handler.serialize,\n      request\n    );\n\n    handler.func(stream);\n  });\n}\n\nfunction handleBidiStreaming<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: BidiStreamingHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): void {\n  const stream = new ServerDuplexStreamImpl<RequestType, ResponseType>(\n    call,\n    metadata,\n    handler.serialize,\n    handler.deserialize,\n    encoding\n  );\n\n  if (call.cancelled) {\n    return;\n  }\n\n  handler.func(stream);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}