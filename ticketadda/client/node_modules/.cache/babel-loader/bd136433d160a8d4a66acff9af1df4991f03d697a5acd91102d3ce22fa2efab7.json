{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2018, 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnyForTxStrategy = void 0;\nconst transactioneventstrategy_1 = require(\"./transactioneventstrategy\");\nconst Logger = __importStar(require(\"../../logger\"));\nconst logger = Logger.getLogger('AnyForTxStrategy');\n/**\n * Event handling strategy that:\n * - Waits for first successful reponse from an event service.\n * - Fails if all responses are errors.\n * - Succeeds if any reponses are successful.\n *\n * Instances of the strategy are stateful and must only be used for a single transaction.\n * @private\n * @class\n */\nclass AnyForTxStrategy extends transactioneventstrategy_1.TransactionEventStrategy {\n  checkCompletion(counts, successFn, failFn) {\n    const method = 'checkCompletion';\n    logger.debug('%s:%j:', method, counts);\n    const isAllResponsesReceived = counts.success + counts.fail === counts.expected;\n    if (counts.success > 0) {\n      logger.debug('%s: success', method);\n      successFn();\n    } else if (isAllResponsesReceived) {\n      failFn(new Error('No successful events received'));\n    } else {\n      logger.debug('%s - not complete', method);\n    }\n  }\n}\nexports.AnyForTxStrategy = AnyForTxStrategy;","map":{"version":3,"names":["transactioneventstrategy_1","require","Logger","__importStar","logger","getLogger","AnyForTxStrategy","TransactionEventStrategy","checkCompletion","counts","successFn","failFn","method","debug","isAllResponsesReceived","success","fail","expected","Error","exports"],"sources":["../../../src/impl/event/anyfortxstrategy.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,MAAAA,0BAAA,GAAAC,OAAA;AAEA,MAAAC,MAAA,GAAAC,YAAA,CAAAF,OAAA;AACA,MAAMG,MAAM,GAAGF,MAAM,CAACG,SAAS,CAAC,kBAAkB,CAAC;AAEnD;;;;;;;;;;AAUA,MAAaC,gBAAiB,SAAQN,0BAAA,CAAAO,wBAAwB;EACnDC,eAAeA,CAACC,MAAkB,EAAEC,SAA0B,EAAEC,MAAoB;IAC7F,MAAMC,MAAM,GAAG,iBAAiB;IAChCR,MAAM,CAACS,KAAK,CAAC,QAAQ,EAAED,MAAM,EAAEH,MAAM,CAAC;IACtC,MAAMK,sBAAsB,GAAIL,MAAM,CAACM,OAAO,GAAGN,MAAM,CAACO,IAAI,KAAKP,MAAM,CAACQ,QAAS;IACjF,IAAIR,MAAM,CAACM,OAAO,GAAG,CAAC,EAAE;MACvBX,MAAM,CAACS,KAAK,CAAC,aAAa,EAAED,MAAM,CAAC;MACnCF,SAAS,EAAE;KACX,MAAM,IAAII,sBAAsB,EAAE;MAClCH,MAAM,CAAC,IAAIO,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD,MAAM;MACNd,MAAM,CAACS,KAAK,CAAC,mBAAmB,EAAED,MAAM,CAAC;;EAE3C;;AAbDO,OAAA,CAAAb,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}