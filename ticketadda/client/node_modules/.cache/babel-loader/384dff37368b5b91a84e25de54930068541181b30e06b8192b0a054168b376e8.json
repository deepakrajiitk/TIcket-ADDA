{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Channel';\nconst EventService = require('./EventService.js');\nconst DiscoveryService = require('./DiscoveryService.js');\nconst Endorsement = require('./Endorsement.js');\nconst Commit = require('./Commit.js');\nconst Query = require('./Query.js');\nconst fabproto6 = require('fabric-protos');\nconst util = require('util');\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst logger = getLogger(TYPE);\n\n/**\n * Channels provide data isolation for a set of participating organizations.\n * <br><br>\n * A Channel object captures the settings needed to interact with a fabric network in the\n * context of a channel. These settings including the list of participating organizations,\n * represented by instances of Membership Service Providers (MSP), endorsers,\n * and committers.\n *\n * @class\n */\nconst Channel = class {\n  /**\n   * Returns a new instance of the Channel class.\n   *\n   * @param {string} name - Name to identify the channel. This value is used\n   *  as the identifier of the channel when making channel-aware requests\n   *  with the fabric, such as invoking chaincodes to endorse transactions.\n   *  The naming of channels is enforced by the ordering service and must\n   *  be unique within the fabric network. A channel name in fabric network\n   *  is subject to a pattern revealed in the configuration setting\n   *  <code>channel-name-regx-checker</code>.\n   * @param {Client} client - The Client instance.\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let client = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('client');\n    const method = `${TYPE}.constructor[${name}]`;\n    logger.debug('%s - start', method);\n    this.type = TYPE;\n    const channelNameRegxChecker = client.getConfigSetting('channel-name-regx-checker');\n    if (channelNameRegxChecker) {\n      const {\n        pattern,\n        flags\n      } = channelNameRegxChecker;\n      const namePattern = new RegExp(pattern, flags);\n      if (name.match(namePattern)) {\n        logger.debug('%s - channel name is good %s', method, name);\n      } else {\n        throw new Error(`Failed to create Channel. channel name should match Regex ${namePattern}, but got ${name}`);\n      }\n    }\n    this.name = name;\n    this.client = client;\n    this.endorsers = new Map();\n    this.committers = new Map();\n    this.msps = new Map();\n    logger.debug(`Constructed Channel instance: name - ${this.name}`);\n  }\n\n  /**\n   * Close the service connections of all assigned endorsers and committers\n   */\n  close() {\n    const method = `close[${this.name}]`;\n    logger.debug(`${method} - closing connections`);\n    this.endorsers.forEach(endorser => {\n      endorser.disconnect(); // TODO how to handle a shared endorser ???\n    });\n\n    this.committers.forEach(committer => {\n      committer.disconnect();\n    });\n  }\n\n  /**\n   * Gets an Endorsement instance for this channel.\n   * @param {string} chaincodeId\n   */\n  newEndorsement() {\n    let chaincodeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('chaincodeId');\n    const method = `newEndorsement[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return new Endorsement(chaincodeId, this);\n  }\n\n  /**\n   * Gets a Query instance for this channel.\n   * @param {string} chaincodeId\n   */\n  newQuery() {\n    let chaincodeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('chaincodeId');\n    const method = `newQuery[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return new Query(chaincodeId, this);\n  }\n\n  /**\n   * Gets a Commit instance for this channel.\n   * @param {string} chaincodeId\n   */\n  newCommit() {\n    let chaincodeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('chaincodeId');\n    const method = `newCommit[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return new Commit(chaincodeId, this);\n  }\n\n  /**\n   * Returns a new {@link EventService} instance\n   *\n   * @param {string} name - The name of this event service.\n   */\n  newEventService() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    const method = `newEventService[${this.name}]`;\n    logger.debug(`${method} - start`);\n    const eventService = new EventService(name, this);\n    return eventService;\n  }\n\n  /**\n   * Returns a new {@link DiscoveryService} instance\n   *\n   * @param {string} name - The name of this discovery service.\n   */\n  newDiscoveryService() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    const method = `newDiscoveryService[${this.name}]`;\n    logger.debug(`${method} - start`);\n    const discoveryService = new DiscoveryService(name, this);\n    return discoveryService;\n  }\n\n  /**\n   * @typedef {Object} MspConfig\n   * @property {string} id - The identifier for this MSP, Typically the\n   *  organization name.\n   * @property {string} name - The name for this MSP, Typically the\n   *  organization name. To avoid confusion the name and ID should be\n   *  the same. This will be key to finding this MSP configuration.\n   * @property {string[]} organizationalUnitIdentifiers\n   * @property {string[]} rootCerts - List of root certificates trusted by\n   *  this MSP. They are used upon certificate validation.\n   * @property {string[]} intermediateCerts - List of intermediate\n   *  certificates trusted by this MSP. They are used upon certificate\n   *  validation as follows:\n   *     Validation attempts to build a path from the certificate to be\n   *     validated (which is at one end of the path) and one of the certs\n   *     in the RootCerts field (which is at the other end of the path).\n   *     If the path is longer than 2, certificates in the middle are\n   *     searched within the Intermediate Certificates pool.\n   * @property {string} admins - Identity denoting the administrator\n   *  of this MSP\n   * @property {string} tlsRootCerts - TLS root certificates\n   *  trusted by this MSP\n   * @property {string} tlsIntermediateCerts - TLS intermediate certificates\n   *  trusted by this MSP\n   */\n\n  /**\n   * Get an array of msp names (ids) from the MSP's for this channel\n   * @returns {string[]} Array of IDs representing the channel's participating\n   *  organizations\n   */\n  getMspids() {\n    const method = `getMspids[${this.name}]`;\n    logger.debug(`${method} - start`);\n    const ids = [];\n    for (const msp of this.msps.values()) {\n      ids.push(msp.id);\n    }\n    return ids;\n  }\n\n  /**\n   *  Use this method to get {@link MspConfig} object\n   *  for the id provided.\n   *\n   * @returns {MspConfig} The MSP JSON object\n   */\n  getMsp() {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('id');\n    logger.debug(`getMsp[${this.name}] - start id:${id}`);\n    return this.msps.get(id);\n  }\n\n  /**\n   * Remove a MSP from this channel's list.\n   * @param {string} id - The id of the MSP to remove\n   * @return {boolean} true if able to remove from the list\n   */\n  removeMsp() {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('id');\n    logger.debug(`removeMsp[${this.name}] - start`);\n    return this.msps.delete(id);\n  }\n\n  /**\n   * Add a MSP configuration to this channel\n   * @param {MspConfig} msp - The MSP configuration to add to this Channel\n   * @param {boolean} replace - If a MSP config has already been added to\n   *  this channel then replace it with this new configuration.\n   */\n  addMsp() {\n    let msp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('msp');\n    let replace = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `addMsp[${this.name}]`;\n    logger.debug(`${method} - start`);\n    if (!msp.id) {\n      throw Error('MSP does not have an id');\n    }\n    const check = this.msps.get(msp.id);\n    if (check) {\n      if (replace) {\n        logger.debug(`${method} - removing existing MSP  --name: ${msp.id}`);\n        this.removeMsp(check.id);\n      } else {\n        const error = new Error(`MSP ${msp.id} already exists`);\n        logger.error(`${method} - error:${error.message}`);\n        throw error;\n      }\n    }\n    logger.debug(`${method} - adding a new MSP  --name: ${msp.id}`);\n    this.msps.set(msp.id, msp);\n    return this;\n  }\n\n  /**\n   * Add the endorser object to the channel object. A channel object can be optionally\n   * configured with a list of endorser objects, which will be used when calling certain\n   * methods such as [sendInstantiateProposal()]{@link Channel#sendInstantiateProposal},\n   * [sendUpgradeProposal()]{@link Channel#sendUpgradeProposal},\n   * [sendTransactionProposal]{@link Channel#sendTransactionProposal}.\n   *\n   * @param {Endorser} endorser - An instance of the Endorser class\n   * @param {boolean} replace - If a endorser exist with the same name, replace\n   *  with this one.\n   */\n  addEndorser() {\n    let endorser = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('endorser');\n    let replace = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `addEndorser[${this.name}]`;\n    logger.debug(`${method} - start`);\n    if (!endorser.name) {\n      throw Error('Endorser does not have a name');\n    }\n    if (!(endorser.type === 'Endorser')) {\n      throw Error('Missing valid endorser instance');\n    }\n    if (!endorser.isConnectable()) {\n      throw Error('Endorser must be connectable');\n    }\n    const name = endorser.name;\n    const check = this.endorsers.get(name);\n    if (check) {\n      if (replace) {\n        logger.debug(`${method} - removing existing Endorser  --name: ${check.name}`);\n        this.removeEndorser(check);\n      } else {\n        const error = new Error(`Endorser ${name} already exists`);\n        logger.error(error.message);\n        throw error;\n      }\n    }\n    logger.debug(`${method} - adding a new Endorser  --name: ${name}`);\n    this.endorsers.set(name, endorser);\n    return this;\n  }\n\n  /**\n   * Remove the endorser object in the channel object's list of endorsers.\n   * Closes the endorser's endorsement and event service connections.\n   *\n   * @param {Endorser} endorser - An instance of the Endorser class.\n   * @return {boolean} true if able to remove from the list\n   */\n  removeEndorser() {\n    let endorser = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('endorser');\n    const method = `removeEndorser[${this.name}]`;\n    logger.debug(`${method} - start`);\n    if (!(endorser.type === 'Endorser')) {\n      throw Error('Missing valid endorser instance');\n    }\n    return this.endorsers.delete(endorser.name);\n  }\n\n  /**\n   * This method will return a {@link Endorser}.\n   *\n   * @param {string} name - The name of the endorser assigned to this channel\n   * @returns {Endorser} The Endorser instance\n   */\n  getEndorser() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    const method = `getEndorser[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return this.endorsers.get(name);\n  }\n\n  /**\n   * Will return an array of {@link Endorser} instances that have been\n   * assigned to this channel instance. Include a MSPID to only return endorsers\n   * in a specific organization.\n   *\n   * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n   * @return {Endorser[]} the list of {@link Endorser}s.\n   */\n  getEndorsers(mspid) {\n    const method = `getEndorsers[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return Channel._getServiceEndpoints(this.endorsers.values(), 'Endorser', mspid);\n  }\n\n  /**\n   * Add the committer object to the channel object\n   *\n   * @param {Committer} committer - An instance of the Committer class.\n   * @param {boolean} replace - If an committer exist with the same name, replace\n   *  with this one.\n   */\n  addCommitter() {\n    let committer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('committer');\n    let replace = arguments.length > 1 ? arguments[1] : undefined;\n    const method = `addCommitter[${this.name}]`;\n    logger.debug(`${method} - start`);\n    if (!committer.name) {\n      throw Error('Committer does not have a name');\n    }\n    if (!(committer.type === 'Committer')) {\n      throw Error('Missing valid committer instance');\n    }\n    if (!committer.isConnectable()) {\n      throw Error('Committer must be connectable');\n    }\n    const name = committer.name;\n    const check = this.committers.get(name);\n    if (check) {\n      if (replace) {\n        logger.debug(`${method} - removing existing Committer  --name: ${check.name}`);\n        this.removeCommitter(check);\n      } else {\n        const error = new Error(`Committer ${name} already exists`);\n        logger.error(`${method} - error::${error.message}`);\n        throw error;\n      }\n    }\n    logger.debug(`${method} - adding a new Committer  --name: ${name}`);\n    this.committers.set(name, committer);\n    return this;\n  }\n\n  /**\n   * Remove the committer object from channel object's list of committers.\n   * Closes the committer before removal.\n   *\n   * @param {Committer} committer - An instance of the Committer class.\n   * @return {boolean} true if able to remove from the list\n   */\n  removeCommitter() {\n    let committer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('committer');\n    const method = `removeCommitter[${this.name}]`;\n    logger.debug(`${method} - start`);\n    if (!(committer.type === 'Committer')) {\n      throw Error('Missing valid committer instance');\n    }\n    return this.committers.delete(committer.name);\n  }\n\n  /**\n   * This method will return a {@link Committer} instance if assigned to this\n   * channel. Endorsers that have been created by the {@link Client#newCommitter}\n   * method and then added to this channel may be reference by the url if no\n   * name was provided in the options during the create.\n   *\n   * @param {string} name - The name or url of the committer\n   * @returns {Committer} The Committer instance.\n   */\n  getCommitter() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    const method = `getCommitter[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return this.committers.get(name);\n  }\n\n  /**\n   * Will return an array of {@link Committer} instances that have been\n   * assigned to this channel instance. Include a MSPID to only return committers\n   * in a specific organization.\n   *\n   * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n   * @return {Committer[]} the list of {@link Committer}s.\n   */\n  getCommitters(mspid) {\n    const method = `getCommitters[${this.name}]`;\n    logger.debug(`${method} - start`);\n    return Channel._getServiceEndpoints(this.committers.values(), 'Committer', mspid);\n  }\n  static _getServiceEndpoints(remotes, type, mspid) {\n    const method = '_getServiceEndpoints';\n    logger.debug(`${method} - start - ${mspid}`);\n    const results = [];\n    for (const remote of remotes) {\n      if (mspid) {\n        if (remote.mspid === mspid) {\n          results.push(remote);\n          logger.debug(`${method} - ${type} mspid matched, added ${remote.name} connected: ${remote.connected}`);\n        } else {\n          logger.debug(`${method} - ${type} mspid not matched, not added ${remote.name} - ${remote.mspid}`);\n        }\n      } else {\n        results.push(remote);\n        logger.debug(`${method} - ${type} added ${remote.name} connected: ${remote.connected}`);\n      }\n    }\n    return results;\n  }\n\n  /*\n   * Internal utility method to get a list of Committer objects\n   * Throws an Error if no committers are found\n   */\n  getTargetCommitters() {\n    let targets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('targets');\n    const method = `getTargetCommitters[${this.name}]`;\n    return this._getTargets(targets, this.committers, 'Committer', method);\n  }\n\n  /*\n   * utility method to decide on the targets for requests\n   * Returns an array of one or more {@link Endorsers}.\n   * Throws an Error if no targets are found.\n   */\n  getTargetEndorsers() {\n    let targets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('targets');\n    const method = `getTargetEndorsers[${this.name}]`;\n    return this._getTargets(targets, this.endorsers, 'Endorser', method);\n  }\n  _getTargets(targets, this_list, type, method) {\n    logger.debug(`${method} - start`);\n    if (!Array.isArray(targets)) {\n      throw Error('Targets must be an array');\n    }\n    const list = [];\n    for (const target of targets) {\n      if (typeof target === 'string') {\n        const found = this_list.get(target);\n        if (!found) {\n          throw Error(`${type} named ${target} not found`);\n        }\n        list.push(found);\n      } else if (target && target.type === type) {\n        list.push(target);\n      } else {\n        throw Error(`Target ${type} is not valid`);\n      }\n    }\n    return list;\n  }\n\n  /*\n   * This function will build a common channel header\n   */\n  buildChannelHeader() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('type');\n    let chaincode_id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('chaincode_id');\n    let tx_id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : checkParameter('tx_id');\n    const method = `buildChannelHeader[${this.name}]`;\n    logger.debug(`${method} - start - type ${type} chaincode_id ${util.inspect(chaincode_id)} tx_id ${tx_id}`);\n    const chaincodeID = fabproto6.protos.ChaincodeID.create(typeof chaincode_id === 'string' ? {\n      name: chaincode_id\n    } : chaincode_id);\n    logger.debug('%s - chaincodeID %j', method, chaincodeID);\n    let fields = {\n      chaincode_id: chaincodeID\n    };\n    let check = fabproto6.protos.ChaincodeHeaderExtension.verify(fields);\n    if (check) {\n      logger.error('%s - channel header is not valid =>%s<=', method, check);\n      throw Error(`Not able to build channel header ${check}`);\n    }\n    const chaincodeHeaderExtension = fabproto6.protos.ChaincodeHeaderExtension.create(fields);\n    const chaincodeHeaderExtensionBuf = fabproto6.protos.ChaincodeHeaderExtension.encode(chaincodeHeaderExtension).finish();\n    logger.debug('%s - ChaincodeHeaderExtension %j', method, chaincodeHeaderExtensionBuf);\n    fields = {\n      type: type,\n      version: 1,\n      channel_id: this.name,\n      tx_id: tx_id,\n      extension: chaincodeHeaderExtensionBuf,\n      timestamp: buildCurrentTimestamp(),\n      tls_cert_hash: this.client.getClientCertHash()\n    };\n    check = fabproto6.common.ChannelHeader.verify(fields);\n    if (check) {\n      logger.error('%s - channel header is not valid =>%s<=', method, check);\n      throw Error(`Not able to build channel header ${check}`);\n    }\n    const channelHeader = fabproto6.common.ChannelHeader.create(fields);\n    return fabproto6.common.ChannelHeader.encode(channelHeader).finish();\n  }\n\n  /**\n   * return a printable representation of this channel object\n   */\n  toString() {\n    const committers = [];\n    for (const committer of this.getCommitters()) {\n      committers.push(committer.toString());\n    }\n    const endorsers = [];\n    for (const endorser of this.getEndorsers()) {\n      endorsers.push(endorser.toString());\n    }\n    const state = {\n      name: this.name,\n      committers: committers.length > 0 ? committers : 'N/A',\n      endorsers: endorsers.length > 0 ? endorsers : 'N/A'\n    };\n    return JSON.stringify(state).toString();\n  }\n};\nfunction buildCurrentTimestamp() {\n  const method = `buildCurrentTimestamp[${this.name}]`;\n  logger.debug(`${method} - start`);\n  const now = new Date();\n  const seconds = parseInt(now.getTime() / 1000);\n  const nanos = now.getTime() % 1000 * 1000000;\n  logger.debug('%s - seconds %s nanos %s', method, seconds, nanos);\n  const timestamp = fabproto6.google.protobuf.Timestamp.create({\n    seconds: seconds,\n    nanos: nanos\n  });\n  return timestamp;\n}\nmodule.exports = Channel;","map":{"version":3,"names":["TYPE","EventService","require","DiscoveryService","Endorsement","Commit","Query","fabproto6","util","checkParameter","getLogger","logger","Channel","constructor","name","arguments","length","undefined","client","method","debug","type","channelNameRegxChecker","getConfigSetting","pattern","flags","namePattern","RegExp","match","Error","endorsers","Map","committers","msps","close","forEach","endorser","disconnect","committer","newEndorsement","chaincodeId","newQuery","newCommit","newEventService","eventService","newDiscoveryService","discoveryService","getMspids","ids","msp","values","push","id","getMsp","get","removeMsp","delete","addMsp","replace","check","error","message","set","addEndorser","isConnectable","removeEndorser","getEndorser","getEndorsers","mspid","_getServiceEndpoints","addCommitter","removeCommitter","getCommitter","getCommitters","remotes","results","remote","connected","getTargetCommitters","targets","_getTargets","getTargetEndorsers","this_list","Array","isArray","list","target","found","buildChannelHeader","chaincode_id","tx_id","inspect","chaincodeID","protos","ChaincodeID","create","fields","ChaincodeHeaderExtension","verify","chaincodeHeaderExtension","chaincodeHeaderExtensionBuf","encode","finish","version","channel_id","extension","timestamp","buildCurrentTimestamp","tls_cert_hash","getClientCertHash","common","ChannelHeader","channelHeader","toString","state","JSON","stringify","now","Date","seconds","parseInt","getTime","nanos","google","protobuf","Timestamp","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Channel.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Channel';\n\nconst EventService = require('./EventService.js');\nconst DiscoveryService = require('./DiscoveryService.js');\nconst Endorsement = require('./Endorsement.js');\nconst Commit = require('./Commit.js');\nconst Query = require('./Query.js');\nconst fabproto6 = require('fabric-protos');\nconst util = require('util');\nconst {checkParameter, getLogger} = require('./Utils.js');\n\nconst logger = getLogger(TYPE);\n\n/**\n * Channels provide data isolation for a set of participating organizations.\n * <br><br>\n * A Channel object captures the settings needed to interact with a fabric network in the\n * context of a channel. These settings including the list of participating organizations,\n * represented by instances of Membership Service Providers (MSP), endorsers,\n * and committers.\n *\n * @class\n */\nconst Channel = class {\n\n\t/**\n\t * Returns a new instance of the Channel class.\n\t *\n\t * @param {string} name - Name to identify the channel. This value is used\n\t *  as the identifier of the channel when making channel-aware requests\n\t *  with the fabric, such as invoking chaincodes to endorse transactions.\n\t *  The naming of channels is enforced by the ordering service and must\n\t *  be unique within the fabric network. A channel name in fabric network\n\t *  is subject to a pattern revealed in the configuration setting\n\t *  <code>channel-name-regx-checker</code>.\n\t * @param {Client} client - The Client instance.\n\t */\n\tconstructor(name = checkParameter('name'), client = checkParameter('client')) {\n\t\tconst method = `${TYPE}.constructor[${name}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tthis.type = TYPE;\n\n\t\tconst channelNameRegxChecker = client.getConfigSetting('channel-name-regx-checker');\n\t\tif (channelNameRegxChecker) {\n\t\t\tconst {pattern, flags} = channelNameRegxChecker;\n\t\t\tconst namePattern = new RegExp(pattern, flags);\n\t\t\tif (name.match(namePattern)) {\n\t\t\t\tlogger.debug('%s - channel name is good %s', method, name);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Failed to create Channel. channel name should match Regex ${namePattern}, but got ${name}`);\n\t\t\t}\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.client = client;\n\t\tthis.endorsers = new Map();\n\t\tthis.committers = new Map();\n\t\tthis.msps = new Map();\n\n\t\tlogger.debug(`Constructed Channel instance: name - ${this.name}`);\n\t}\n\n\t/**\n\t * Close the service connections of all assigned endorsers and committers\n\t */\n\tclose() {\n\t\tconst method = `close[${this.name}]`;\n\t\tlogger.debug(`${method} - closing connections`);\n\t\tthis.endorsers.forEach((endorser) => {\n\t\t\tendorser.disconnect(); // TODO how to handle a shared endorser ???\n\t\t});\n\t\tthis.committers.forEach((committer) => {\n\t\t\tcommitter.disconnect();\n\t\t});\n\t}\n\n\t/**\n\t * Gets an Endorsement instance for this channel.\n\t * @param {string} chaincodeId\n\t */\n\tnewEndorsement(chaincodeId = checkParameter('chaincodeId')) {\n\t\tconst method = `newEndorsement[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\treturn new Endorsement(chaincodeId, this);\n\t}\n\n\t/**\n\t * Gets a Query instance for this channel.\n\t * @param {string} chaincodeId\n\t */\n\tnewQuery(chaincodeId = checkParameter('chaincodeId')) {\n\t\tconst method = `newQuery[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\treturn new Query(chaincodeId, this);\n\t}\n\n\t/**\n\t * Gets a Commit instance for this channel.\n\t * @param {string} chaincodeId\n\t */\n\tnewCommit(chaincodeId = checkParameter('chaincodeId')) {\n\t\tconst method = `newCommit[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\treturn new Commit(chaincodeId, this);\n\t}\n\n\t/**\n\t * Returns a new {@link EventService} instance\n\t *\n\t * @param {string} name - The name of this event service.\n\t */\n\tnewEventService(name = checkParameter('name')) {\n\t\tconst method = `newEventService[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\tconst eventService = new EventService(name, this);\n\n\t\treturn eventService;\n\t}\n\n\t/**\n\t * Returns a new {@link DiscoveryService} instance\n\t *\n\t * @param {string} name - The name of this discovery service.\n\t */\n\tnewDiscoveryService(name = checkParameter('name')) {\n\t\tconst method = `newDiscoveryService[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tconst discoveryService = new DiscoveryService(name, this);\n\n\t\treturn discoveryService;\n\t}\n\n\t/**\n\t * @typedef {Object} MspConfig\n\t * @property {string} id - The identifier for this MSP, Typically the\n\t *  organization name.\n\t * @property {string} name - The name for this MSP, Typically the\n\t *  organization name. To avoid confusion the name and ID should be\n\t *  the same. This will be key to finding this MSP configuration.\n\t * @property {string[]} organizationalUnitIdentifiers\n\t * @property {string[]} rootCerts - List of root certificates trusted by\n\t *  this MSP. They are used upon certificate validation.\n\t * @property {string[]} intermediateCerts - List of intermediate\n\t *  certificates trusted by this MSP. They are used upon certificate\n\t *  validation as follows:\n\t *     Validation attempts to build a path from the certificate to be\n\t *     validated (which is at one end of the path) and one of the certs\n\t *     in the RootCerts field (which is at the other end of the path).\n\t *     If the path is longer than 2, certificates in the middle are\n\t *     searched within the Intermediate Certificates pool.\n\t * @property {string} admins - Identity denoting the administrator\n\t *  of this MSP\n\t * @property {string} tlsRootCerts - TLS root certificates\n\t *  trusted by this MSP\n\t * @property {string} tlsIntermediateCerts - TLS intermediate certificates\n\t *  trusted by this MSP\n\t */\n\n\t/**\n\t * Get an array of msp names (ids) from the MSP's for this channel\n\t * @returns {string[]} Array of IDs representing the channel's participating\n\t *  organizations\n\t */\n\tgetMspids() {\n\t\tconst method = `getMspids[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\tconst ids = [];\n\t\tfor (const msp of this.msps.values()) {\n\t\t\tids.push(msp.id);\n\t\t}\n\n\t\treturn ids;\n\t}\n\n\t/**\n\t *  Use this method to get {@link MspConfig} object\n\t *  for the id provided.\n\t *\n\t * @returns {MspConfig} The MSP JSON object\n\t */\n\tgetMsp(id = checkParameter('id')) {\n\t\tlogger.debug(`getMsp[${this.name}] - start id:${id}`);\n\n\t\treturn this.msps.get(id);\n\t}\n\n\t/**\n\t * Remove a MSP from this channel's list.\n\t * @param {string} id - The id of the MSP to remove\n\t * @return {boolean} true if able to remove from the list\n\t */\n\tremoveMsp(id = checkParameter('id')) {\n\t\tlogger.debug(`removeMsp[${this.name}] - start`);\n\n\t\treturn this.msps.delete(id);\n\t}\n\n\t/**\n\t * Add a MSP configuration to this channel\n\t * @param {MspConfig} msp - The MSP configuration to add to this Channel\n\t * @param {boolean} replace - If a MSP config has already been added to\n\t *  this channel then replace it with this new configuration.\n\t */\n\taddMsp(msp = checkParameter('msp'), replace) {\n\t\tconst method = `addMsp[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tif (!msp.id) {\n\t\t\tthrow Error('MSP does not have an id');\n\t\t}\n\t\tconst check = this.msps.get(msp.id);\n\t\tif (check) {\n\t\t\tif (replace) {\n\t\t\t\tlogger.debug(`${method} - removing existing MSP  --name: ${msp.id}`);\n\t\t\t\tthis.removeMsp(check.id);\n\t\t\t} else {\n\t\t\t\tconst error = new Error(`MSP ${msp.id} already exists`);\n\t\t\t\tlogger.error(`${method} - error:${error.message}`);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\tlogger.debug(`${method} - adding a new MSP  --name: ${msp.id}`);\n\t\tthis.msps.set(msp.id, msp);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add the endorser object to the channel object. A channel object can be optionally\n\t * configured with a list of endorser objects, which will be used when calling certain\n\t * methods such as [sendInstantiateProposal()]{@link Channel#sendInstantiateProposal},\n\t * [sendUpgradeProposal()]{@link Channel#sendUpgradeProposal},\n\t * [sendTransactionProposal]{@link Channel#sendTransactionProposal}.\n\t *\n\t * @param {Endorser} endorser - An instance of the Endorser class\n\t * @param {boolean} replace - If a endorser exist with the same name, replace\n\t *  with this one.\n\t */\n\taddEndorser(endorser = checkParameter('endorser'), replace) {\n\t\tconst method = `addEndorser[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tif (!endorser.name) {\n\t\t\tthrow Error('Endorser does not have a name');\n\t\t}\n\t\tif (!(endorser.type === 'Endorser')) {\n\t\t\tthrow Error('Missing valid endorser instance');\n\t\t}\n\t\tif (!endorser.isConnectable()) {\n\t\t\tthrow Error('Endorser must be connectable');\n\t\t}\n\t\tconst name = endorser.name;\n\t\tconst check = this.endorsers.get(name);\n\t\tif (check) {\n\t\t\tif (replace) {\n\t\t\t\tlogger.debug(`${method} - removing existing Endorser  --name: ${check.name}`);\n\t\t\t\tthis.removeEndorser(check);\n\t\t\t} else {\n\t\t\t\tconst error = new Error(`Endorser ${name} already exists`);\n\t\t\t\tlogger.error(error.message);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\tlogger.debug(`${method} - adding a new Endorser  --name: ${name}`);\n\t\tthis.endorsers.set(name, endorser);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the endorser object in the channel object's list of endorsers.\n\t * Closes the endorser's endorsement and event service connections.\n\t *\n\t * @param {Endorser} endorser - An instance of the Endorser class.\n\t * @return {boolean} true if able to remove from the list\n\t */\n\tremoveEndorser(endorser = checkParameter('endorser')) {\n\t\tconst method = `removeEndorser[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tif (!(endorser.type === 'Endorser')) {\n\t\t\tthrow Error('Missing valid endorser instance');\n\t\t}\n\n\t\treturn this.endorsers.delete(endorser.name);\n\t}\n\n\t/**\n\t * This method will return a {@link Endorser}.\n\t *\n\t * @param {string} name - The name of the endorser assigned to this channel\n\t * @returns {Endorser} The Endorser instance\n\t */\n\tgetEndorser(name = checkParameter('name')) {\n\t\tconst method = `getEndorser[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\treturn this.endorsers.get(name);\n\t}\n\n\t/**\n\t * Will return an array of {@link Endorser} instances that have been\n\t * assigned to this channel instance. Include a MSPID to only return endorsers\n\t * in a specific organization.\n\t *\n\t * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n\t * @return {Endorser[]} the list of {@link Endorser}s.\n\t */\n\tgetEndorsers(mspid) {\n\t\tconst method = `getEndorsers[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\treturn Channel._getServiceEndpoints(this.endorsers.values(), 'Endorser', mspid);\n\t}\n\n\t/**\n\t * Add the committer object to the channel object\n\t *\n\t * @param {Committer} committer - An instance of the Committer class.\n\t * @param {boolean} replace - If an committer exist with the same name, replace\n\t *  with this one.\n\t */\n\taddCommitter(committer = checkParameter('committer'), replace) {\n\t\tconst method = `addCommitter[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tif (!committer.name) {\n\t\t\tthrow Error('Committer does not have a name');\n\t\t}\n\t\tif (!(committer.type === 'Committer')) {\n\t\t\tthrow Error('Missing valid committer instance');\n\t\t}\n\t\tif (!committer.isConnectable()) {\n\t\t\tthrow Error('Committer must be connectable');\n\t\t}\n\t\tconst name = committer.name;\n\t\tconst check = this.committers.get(name);\n\t\tif (check) {\n\t\t\tif (replace) {\n\t\t\t\tlogger.debug(`${method} - removing existing Committer  --name: ${check.name}`);\n\t\t\t\tthis.removeCommitter(check);\n\t\t\t} else {\n\t\t\t\tconst error = new Error(`Committer ${name} already exists`);\n\t\t\t\tlogger.error(`${method} - error::${error.message}`);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\tlogger.debug(`${method} - adding a new Committer  --name: ${name}`);\n\t\tthis.committers.set(name, committer);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the committer object from channel object's list of committers.\n\t * Closes the committer before removal.\n\t *\n\t * @param {Committer} committer - An instance of the Committer class.\n\t * @return {boolean} true if able to remove from the list\n\t */\n\tremoveCommitter(committer = checkParameter('committer')) {\n\t\tconst method = `removeCommitter[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tif (!(committer.type === 'Committer')) {\n\t\t\tthrow Error('Missing valid committer instance');\n\t\t}\n\t\treturn this.committers.delete(committer.name);\n\t}\n\n\t/**\n\t * This method will return a {@link Committer} instance if assigned to this\n\t * channel. Endorsers that have been created by the {@link Client#newCommitter}\n\t * method and then added to this channel may be reference by the url if no\n\t * name was provided in the options during the create.\n\t *\n\t * @param {string} name - The name or url of the committer\n\t * @returns {Committer} The Committer instance.\n\t */\n\tgetCommitter(name = checkParameter('name')) {\n\t\tconst method = `getCommitter[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\treturn this.committers.get(name);\n\t}\n\n\t/**\n\t * Will return an array of {@link Committer} instances that have been\n\t * assigned to this channel instance. Include a MSPID to only return committers\n\t * in a specific organization.\n\t *\n\t * @param {string} [mspid] - Optional. The mspid of the endorsers to return\n\t * @return {Committer[]} the list of {@link Committer}s.\n\t */\n\tgetCommitters(mspid) {\n\t\tconst method = `getCommitters[${this.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\treturn Channel._getServiceEndpoints(this.committers.values(), 'Committer', mspid);\n\t}\n\n\tstatic _getServiceEndpoints(remotes, type, mspid) {\n\t\tconst method = '_getServiceEndpoints';\n\t\tlogger.debug(`${method} - start - ${mspid}`);\n\t\tconst results = [];\n\t\tfor (const remote of remotes) {\n\t\t\tif (mspid) {\n\t\t\t\tif (remote.mspid === mspid) {\n\t\t\t\t\tresults.push(remote);\n\t\t\t\t\tlogger.debug(`${method} - ${type} mspid matched, added ${remote.name} connected: ${remote.connected}`);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${method} - ${type} mspid not matched, not added ${remote.name} - ${remote.mspid}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresults.push(remote);\n\t\t\t\tlogger.debug(`${method} - ${type} added ${remote.name} connected: ${remote.connected}`);\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/*\n\t * Internal utility method to get a list of Committer objects\n\t * Throws an Error if no committers are found\n\t */\n\tgetTargetCommitters(targets = checkParameter('targets')) {\n\t\tconst method = `getTargetCommitters[${this.name}]`;\n\n\t\treturn this._getTargets(targets, this.committers, 'Committer', method);\n\t}\n\n\t/*\n\t * utility method to decide on the targets for requests\n\t * Returns an array of one or more {@link Endorsers}.\n\t * Throws an Error if no targets are found.\n\t */\n\tgetTargetEndorsers(targets = checkParameter('targets')) {\n\t\tconst method = `getTargetEndorsers[${this.name}]`;\n\n\t\treturn this._getTargets(targets, this.endorsers, 'Endorser', method);\n\t}\n\n\t_getTargets(targets, this_list, type, method) {\n\t\tlogger.debug(`${method} - start`);\n\t\tif (!Array.isArray(targets)) {\n\t\t\tthrow Error('Targets must be an array');\n\t\t}\n\n\t\tconst list = [];\n\t\tfor (const target of targets) {\n\t\t\tif (typeof target === 'string') {\n\t\t\t\tconst found = this_list.get(target);\n\t\t\t\tif (!found) {\n\t\t\t\t\tthrow Error(`${type} named ${target} not found`);\n\t\t\t\t}\n\t\t\t\tlist.push(found);\n\t\t\t} else if (target && target.type === type) {\n\t\t\t\tlist.push(target);\n\t\t\t} else {\n\t\t\t\tthrow Error(`Target ${type} is not valid`);\n\t\t\t}\n\t\t}\n\n\t\treturn list;\n\t}\n\n\t/*\n\t * This function will build a common channel header\n\t */\n\tbuildChannelHeader(type = checkParameter('type'), chaincode_id = checkParameter('chaincode_id'), tx_id = checkParameter('tx_id')) {\n\t\tconst method = `buildChannelHeader[${this.name}]`;\n\t\tlogger.debug(`${method} - start - type ${type} chaincode_id ${util.inspect(chaincode_id)} tx_id ${tx_id}`);\n\n\t\tconst chaincodeID = fabproto6.protos.ChaincodeID.create(typeof chaincode_id === 'string' ? {\n\t\t\tname: chaincode_id\n\t\t} : chaincode_id);\n\n\t\tlogger.debug('%s - chaincodeID %j', method, chaincodeID);\n\n\t\tlet fields = {\n\t\t\tchaincode_id: chaincodeID\n\t\t};\n\n\t\tlet check = fabproto6.protos.ChaincodeHeaderExtension.verify(fields);\n\t\tif (check) {\n\t\t\tlogger.error('%s - channel header is not valid =>%s<=', method, check);\n\t\t\tthrow Error(`Not able to build channel header ${check}`);\n\t\t}\n\n\t\tconst chaincodeHeaderExtension = fabproto6.protos.ChaincodeHeaderExtension.create(fields);\n\t\tconst chaincodeHeaderExtensionBuf = fabproto6.protos.ChaincodeHeaderExtension.encode(chaincodeHeaderExtension).finish();\n\n\t\tlogger.debug('%s - ChaincodeHeaderExtension %j', method, chaincodeHeaderExtensionBuf);\n\n\t\tfields = {\n\t\t\ttype: type,\n\t\t\tversion: 1,\n\t\t\tchannel_id: this.name,\n\t\t\ttx_id: tx_id,\n\t\t\textension: chaincodeHeaderExtensionBuf,\n\t\t\ttimestamp: buildCurrentTimestamp(),\n\t\t\ttls_cert_hash: this.client.getClientCertHash()\n\t\t};\n\n\t\tcheck = fabproto6.common.ChannelHeader.verify(fields);\n\t\tif (check) {\n\t\t\tlogger.error('%s - channel header is not valid =>%s<=', method, check);\n\t\t\tthrow Error(`Not able to build channel header ${check}`);\n\t\t}\n\n\t\tconst channelHeader = fabproto6.common.ChannelHeader.create(fields);\n\t\treturn fabproto6.common.ChannelHeader.encode(channelHeader).finish();\n\t}\n\n\t/**\n\t * return a printable representation of this channel object\n\t */\n\ttoString() {\n\t\tconst committers = [];\n\t\tfor (const committer of this.getCommitters()) {\n\t\t\tcommitters.push(committer.toString());\n\t\t}\n\n\t\tconst endorsers = [];\n\t\tfor (const endorser of this.getEndorsers()) {\n\t\t\tendorsers.push(endorser.toString());\n\t\t}\n\n\t\tconst state = {\n\t\t\tname: this.name,\n\t\t\tcommitters: committers.length > 0 ? committers : 'N/A',\n\t\t\tendorsers: endorsers.length > 0 ? endorsers : 'N/A'\n\t\t};\n\n\t\treturn JSON.stringify(state).toString();\n\t}\n};\n\nfunction buildCurrentTimestamp() {\n\tconst method = `buildCurrentTimestamp[${this.name}]`;\n\tlogger.debug(`${method} - start`);\n\tconst now = new Date();\n\tconst seconds = parseInt(now.getTime() / 1000);\n\tconst nanos = (now.getTime() % 1000) * 1000000;\n\tlogger.debug('%s - seconds %s nanos %s', method, seconds, nanos);\n\tconst timestamp = fabproto6.google.protobuf.Timestamp.create({\n\t\tseconds: seconds,\n\t\tnanos: nanos\n\t});\n\n\treturn timestamp;\n}\n\nmodule.exports = Channel;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}