{"ast":null,"code":"/*\n * Copyright 2022 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'DiscoveryResultsProcessor';\nconst Long = require('long');\nconst {\n  byteToNormalizedPEM,\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst logger = getLogger(TYPE);\nconst fabproto6 = require('fabric-protos');\nclass DiscoveryResultsProcessor {\n  constructor(service, results) {\n    this.service = service;\n    this.results = results;\n    this.parsedResults = {};\n  }\n  async parseDiscoveryResults() {\n    const method = `parseDiscoveryResults[${this.service.name}]`;\n    logger.debug(`${method} - start`);\n    for (const index in this.results) {\n      const result = this.results[index];\n      if (result.result === 'error') {\n        logger.error(`${method} - Channel:${this.service.channel.name} received discovery error:${result.error.content}`);\n        throw Error(`DiscoveryService: ${this.service.name} error: ${result.error.content}`);\n      }\n      logger.debug(`${method} - process result index:${index}`);\n      if (result.config_result) {\n        logger.debug(`${method} - process result - have configResult in ${index}`);\n        const config = this._processConfig(result.config_result);\n        this.parsedResults.msps = config.msps;\n        this.parsedResults.orderers = await this._buildOrderers(config.orderers);\n      }\n      if (result.members) {\n        logger.debug(`${method} - process result - have members in ${index}`);\n        this.parsedResults.peers_by_org = await this._processMembership(result.members);\n      }\n      if (result.cc_query_res) {\n        logger.debug(`${method} - process result - have ccQueryRes in ${index}`);\n        this.parsedResults.endorsement_plan = await this._processChaincode(result.cc_query_res);\n      }\n      logger.debug(`${method} - completed processing result ${index}`);\n    }\n    return this.parsedResults;\n  }\n  _processConfig(q_config) {\n    const method = `_processConfig[${this.service.name}]`;\n    logger.debug(`${method} - start`);\n    const config = {};\n    config.msps = {};\n    config.orderers = {};\n    try {\n      if (q_config.msps) {\n        for (const id in q_config.msps) {\n          logger.debug(`${method} - found organization ${id}`);\n          const q_msp = q_config.msps[id];\n          const msp_config = {\n            id: id,\n            name: id,\n            organizationalUnitIdentifiers: q_msp.organizational_unit_identifiers,\n            rootCerts: byteToNormalizedPEM(q_msp.root_certs),\n            intermediateCerts: byteToNormalizedPEM(q_msp.intermediate_certs),\n            admins: byteToNormalizedPEM(q_msp.admins),\n            tlsRootCerts: byteToNormalizedPEM(q_msp.tls_root_certs),\n            tlsIntermediateCerts: byteToNormalizedPEM(q_msp.tls_intermediate_certs)\n          };\n          config.msps[id] = msp_config;\n          this.service.channel.addMsp(msp_config, true);\n        }\n      } else {\n        logger.debug(`${method} - no msps found`);\n      }\n      /*\n      \"orderers\":{\"OrdererMSP\":{\"endpoint\":[{\"host\":\"orderer.example.com\",\"port\":7050}]}}}\n      */\n      if (q_config.orderers) {\n        for (const mspid in q_config.orderers) {\n          logger.debug(`${method} - found orderer org: ${mspid}`);\n          config.orderers[mspid] = {};\n          config.orderers[mspid].endpoints = [];\n          for (const endpoint of q_config.orderers[mspid].endpoint) {\n            config.orderers[mspid].endpoints.push(endpoint);\n          }\n        }\n      } else {\n        logger.debug(`${method} - no orderers found`);\n      }\n    } catch (err) {\n      logger.error(`${method} - Problem with discovery config: ${err}`);\n    }\n    return config;\n  }\n  async _buildOrderers(orderers) {\n    const method = `_buildOrderers[${this.service.name}]`;\n    logger.debug(`${method} - start`);\n    if (!orderers) {\n      logger.debug('%s - no orderers to build', method);\n    } else {\n      for (const msp_id in orderers) {\n        logger.debug(`${method} - orderer msp:${msp_id}`);\n        for (const endpoint of orderers[msp_id].endpoints) {\n          endpoint.name = await this._buildOrderer(endpoint.host, endpoint.port, msp_id);\n        }\n      }\n    }\n    return orderers;\n  }\n  async _buildOrderer(host, port, msp_id) {\n    const method = `_buildOrderer[${this.service.name}]`;\n    logger.debug(`${method} - start mspid:${msp_id} endpoint:${host}:${port}`);\n    const name = `${host}:${port}`;\n    const url = this.service._buildUrl(host, port);\n    logger.debug(`${method} - create a new orderer ${url}`);\n    const orderer = this.service.client.newCommitter(name, msp_id);\n    const end_point = this.service.client.newEndpoint(this._buildOptions(name, url, host, msp_id));\n    try {\n      // first check to see if orderer is already on this channel\n      let same;\n      const channelOrderers = this.service.channel.getCommitters();\n      for (const channelOrderer of channelOrderers) {\n        logger.debug('%s - checking %s', method, channelOrderer);\n        if (channelOrderer.endpoint && channelOrderer.endpoint.url === url) {\n          same = channelOrderer;\n          break;\n        }\n      }\n      if (!same) {\n        await orderer.connect(end_point);\n        this.service.channel.addCommitter(orderer);\n      } else {\n        await same.checkConnection();\n        logger.debug('%s - orderer already added to this channel', method);\n      }\n    } catch (error) {\n      logger.error(`${method} - Unable to connect to the discovered orderer ${name} due to ${error}`);\n    }\n    return name;\n  }\n  _buildOptions(name, url, host, msp_id) {\n    const method = `_buildOptions[${this.service.name}]`;\n    logger.debug(`${method} - start`);\n    const caroots = this._buildTlsRootCerts(msp_id);\n    return {\n      url: url,\n      pem: caroots,\n      'ssl-target-name-override': host,\n      name: name\n    };\n  }\n  _buildTlsRootCerts() {\n    let msp_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('msp_id');\n    const method = `_buildTlsRootCerts[${this.service.name}]`;\n    logger.debug(`${method} - start`);\n    let ca_roots = '';\n    if (!this.parsedResults.msps) {\n      logger.error('Missing MSPs discovery results');\n      return ca_roots;\n    }\n    const mspDiscovered = this.parsedResults.msps[msp_id];\n    if (!mspDiscovered) {\n      logger.error(`Missing msp ${msp_id} in discovery results`);\n      return ca_roots;\n    }\n    logger.debug(`Found msp ${msp_id}`);\n    if (mspDiscovered.tlsRootCerts) {\n      ca_roots = ca_roots + mspDiscovered.tlsRootCerts;\n    } else {\n      logger.debug('%s - no tls root certs', method);\n    }\n    if (mspDiscovered.tlsIntermediateCerts) {\n      ca_roots = ca_roots + mspDiscovered.tlsIntermediateCerts;\n    } else {\n      logger.debug('%s - no tls intermediate certs', method);\n    }\n    return ca_roots;\n  }\n  async _processMembership(q_members) {\n    const method = `_processMembership[${this.service.name}]`;\n    logger.debug(`${method} - start`);\n    const peersByOrg = {};\n    if (q_members.peers_by_org) {\n      for (const mspid in q_members.peers_by_org) {\n        logger.debug(`${method} - found org:${mspid}`);\n        peersByOrg[mspid] = {};\n        peersByOrg[mspid].peers = await this._processPeers(q_members.peers_by_org[mspid].peers);\n      }\n    } else {\n      logger.debug(`${method} - missing peers by org`);\n    }\n    return peersByOrg;\n  }\n\n  // message Peers\n  async _processPeers(q_peers) {\n    const method = `_processPeers[${this.service.name}]`;\n    const peers = [];\n    // message Peer\n    for (const q_peer of q_peers) {\n      const peer = {};\n      // IDENTITY\n      const q_identity = fabproto6.msp.SerializedIdentity.decode(q_peer.identity);\n      peer.mspid = q_identity.mspid;\n\n      // MEMBERSHIP - Peer.membership_info\n      // fabproto6.gossip.Envelope.payload\n      const q_membership_message = fabproto6.gossip.GossipMessage.decode(q_peer.membership_info.payload);\n      peer.endpoint = q_membership_message.alive_msg.membership.endpoint;\n      peer.name = q_membership_message.alive_msg.membership.endpoint;\n      logger.debug(`${method} - peer :${peer.endpoint}`);\n\n      // STATE\n      if (q_peer.state_info) {\n        const message_s = fabproto6.gossip.GossipMessage.decode(q_peer.state_info.payload);\n        peer.ledgerHeight = Long.fromValue(message_s.state_info.properties.ledger_height);\n        logger.debug(`${method} - ledgerHeight :${peer.ledgerHeight}`);\n        peer.chaincodes = [];\n        for (const index in message_s.state_info.properties.chaincodes) {\n          const q_chaincode = message_s.state_info.properties.chaincodes[index];\n          const chaincode = {};\n          chaincode.name = q_chaincode.name;\n          chaincode.version = q_chaincode.version;\n          // TODO metadata ?\n          logger.debug(`${method} - chaincode :${JSON.stringify(chaincode)}`);\n          peer.chaincodes.push(chaincode);\n        }\n      } else {\n        logger.debug(`${method} - no state info for peer ${peer.endpoint}`);\n      }\n\n      // all done with this peer\n      peers.push(peer);\n      // build the GRPC instance\n      await this._buildPeer(peer);\n    }\n    return peers;\n  }\n  async _buildPeer(discovery_peer) {\n    const method = `_buildPeer[${this.service.name}]`;\n    logger.debug(`${method} - start`);\n    if (!discovery_peer) {\n      throw Error('Missing discovery_peer parameter');\n    }\n    const address = discovery_peer.endpoint;\n    const msp_id = discovery_peer.mspid;\n    const host_port = address.split(':');\n    const url = this.service._buildUrl(host_port[0], host_port[1]);\n\n    // first check to see if peer is already on this channel\n    let peer;\n    const channelPeers = this.service.channel.getEndorsers();\n    for (const channelPeer of channelPeers) {\n      logger.debug('%s - checking channel peer %s', method, channelPeer.name);\n      if (channelPeer.endpoint && channelPeer.endpoint.url === url) {\n        logger.debug('%s - url: %s - already added to this channel', method, url);\n        peer = channelPeer;\n        break;\n      }\n    }\n    if (!peer) {\n      logger.debug(`${method} - create a new endorser ${url}`);\n      peer = this.service.client.newEndorser(address, msp_id);\n      const end_point = this.service.client.newEndpoint(this._buildOptions(address, url, host_port[0], msp_id));\n      try {\n        logger.debug(`${method} - about to connect to endorser ${address} url:${url}`);\n        await peer.connect(end_point);\n        this.service.channel.addEndorser(peer);\n        logger.debug(`${method} - connected to peer ${address} url:${url}`);\n      } catch (error) {\n        logger.error(`${method} - Unable to connect to the discovered peer ${address} due to ${error}`);\n      }\n    } else {\n      // make sure the existing connect is still good\n      await peer.checkConnection();\n    }\n\n    // indicate that this peer has been touched by the discovery service\n    peer.discovered = true;\n\n    // make sure that this peer has all the found installed chaincodes\n    if (discovery_peer.chaincodes) {\n      for (const chaincode of discovery_peer.chaincodes) {\n        logger.debug(`${method} - adding chaincode ${chaincode.name} to peer ${peer.name}`);\n        peer.addChaincode(chaincode.name);\n      }\n    }\n    logger.debug(`${method} - end`);\n    return peer;\n  }\n\n  // -- process the ChaincodeQueryResult - fabproto6.discovery.QueryResult.ChaincodeQueryResult\n  async _processChaincode(q_chaincodes) {\n    const method = '_processChaincode';\n    logger.debug(`${method} - start`);\n    const endorsement_plan = {};\n    // repeated EndorsementDescriptor content, but we should only have one\n    if (q_chaincodes && q_chaincodes.content && Array.isArray(q_chaincodes.content)) {\n      for (const q_endors_desc of q_chaincodes.content) {\n        endorsement_plan.chaincode = q_endors_desc.chaincode;\n\n        // named groups of Peers\n        endorsement_plan.groups = {};\n        for (const group_name in q_endors_desc.endorsers_by_groups) {\n          logger.debug(`${method} - found group: ${group_name}`);\n          const group = {};\n          group.peers = await this._processPeers(q_endors_desc.endorsers_by_groups[group_name].peers);\n          // all done with this group\n          endorsement_plan.groups[group_name] = group;\n        }\n\n        // LAYOUTS\n        endorsement_plan.layouts = [];\n        for (const q_layout of q_endors_desc.layouts) {\n          const layout = Object.assign({}, q_layout.quantities_by_group);\n          logger.debug(`${method} - layout :${layout}`);\n          endorsement_plan.layouts.push(layout);\n        }\n      }\n    } else {\n      throw Error('Plan layouts are invalid');\n    }\n    return endorsement_plan;\n  }\n}\nmodule.exports = DiscoveryResultsProcessor;","map":{"version":3,"names":["TYPE","Long","require","byteToNormalizedPEM","checkParameter","getLogger","logger","fabproto6","DiscoveryResultsProcessor","constructor","service","results","parsedResults","parseDiscoveryResults","method","name","debug","index","result","error","channel","content","Error","config_result","config","_processConfig","msps","orderers","_buildOrderers","members","peers_by_org","_processMembership","cc_query_res","endorsement_plan","_processChaincode","q_config","id","q_msp","msp_config","organizationalUnitIdentifiers","organizational_unit_identifiers","rootCerts","root_certs","intermediateCerts","intermediate_certs","admins","tlsRootCerts","tls_root_certs","tlsIntermediateCerts","tls_intermediate_certs","addMsp","mspid","endpoints","endpoint","push","err","msp_id","_buildOrderer","host","port","url","_buildUrl","orderer","client","newCommitter","end_point","newEndpoint","_buildOptions","same","channelOrderers","getCommitters","channelOrderer","connect","addCommitter","checkConnection","caroots","_buildTlsRootCerts","pem","arguments","length","undefined","ca_roots","mspDiscovered","q_members","peersByOrg","peers","_processPeers","q_peers","q_peer","peer","q_identity","msp","SerializedIdentity","decode","identity","q_membership_message","gossip","GossipMessage","membership_info","payload","alive_msg","membership","state_info","message_s","ledgerHeight","fromValue","properties","ledger_height","chaincodes","q_chaincode","chaincode","version","JSON","stringify","_buildPeer","discovery_peer","address","host_port","split","channelPeers","getEndorsers","channelPeer","newEndorser","addEndorser","discovered","addChaincode","q_chaincodes","Array","isArray","q_endors_desc","groups","group_name","endorsers_by_groups","group","layouts","q_layout","layout","Object","assign","quantities_by_group","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/DiscoveryResultsProcessor.js"],"sourcesContent":["/*\n * Copyright 2022 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'DiscoveryResultsProcessor';\nconst Long = require('long');\n\nconst {byteToNormalizedPEM, checkParameter, getLogger} = require('./Utils.js');\n\nconst logger = getLogger(TYPE);\n\nconst fabproto6 = require('fabric-protos');\n\nclass DiscoveryResultsProcessor {\n\tconstructor(service, results) {\n\t\tthis.service = service;\n\t\tthis.results = results;\n\t\tthis.parsedResults = {};\n\t}\n\n\tasync parseDiscoveryResults() {\n\t\tconst method = `parseDiscoveryResults[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\tfor (const index in this.results) {\n\t\t\tconst result = this.results[index];\n\t\t\tif (result.result === 'error') {\n\t\t\t\tlogger.error(`${method} - Channel:${this.service.channel.name} received discovery error:${result.error.content}`);\n\t\t\t\tthrow Error(`DiscoveryService: ${this.service.name} error: ${result.error.content}`);\n\t\t\t}\n\n\t\t\tlogger.debug(`${method} - process result index:${index}`);\n\t\t\tif (result.config_result) {\n\t\t\t\tlogger.debug(`${method} - process result - have configResult in ${index}`);\n\t\t\t\tconst config = this._processConfig(result.config_result);\n\t\t\t\tthis.parsedResults.msps = config.msps;\n\t\t\t\tthis.parsedResults.orderers = await this._buildOrderers(config.orderers);\n\t\t\t}\n\t\t\tif (result.members) {\n\t\t\t\tlogger.debug(`${method} - process result - have members in ${index}`);\n\t\t\t\tthis.parsedResults.peers_by_org = await this._processMembership(result.members);\n\t\t\t}\n\t\t\tif (result.cc_query_res) {\n\t\t\t\tlogger.debug(`${method} - process result - have ccQueryRes in ${index}`);\n\t\t\t\tthis.parsedResults.endorsement_plan = await this._processChaincode(result.cc_query_res);\n\t\t\t}\n\t\t\tlogger.debug(`${method} - completed processing result ${index}`);\n\t\t}\n\n\t\treturn this.parsedResults;\n\t}\n\n\t_processConfig(q_config) {\n\t\tconst method = `_processConfig[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tconst config = {};\n\t\tconfig.msps = {};\n\t\tconfig.orderers = {};\n\n\t\ttry {\n\t\t\tif (q_config.msps) {\n\t\t\t\tfor (const id in q_config.msps) {\n\t\t\t\t\tlogger.debug(`${method} - found organization ${id}`);\n\t\t\t\t\tconst q_msp = q_config.msps[id];\n\t\t\t\t\tconst msp_config = {\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\tname: id,\n\t\t\t\t\t\torganizationalUnitIdentifiers: q_msp.organizational_unit_identifiers,\n\t\t\t\t\t\trootCerts: byteToNormalizedPEM(q_msp.root_certs),\n\t\t\t\t\t\tintermediateCerts: byteToNormalizedPEM(q_msp.intermediate_certs),\n\t\t\t\t\t\tadmins: byteToNormalizedPEM(q_msp.admins),\n\t\t\t\t\t\ttlsRootCerts: byteToNormalizedPEM(q_msp.tls_root_certs),\n\t\t\t\t\t\ttlsIntermediateCerts: byteToNormalizedPEM(q_msp.tls_intermediate_certs)\n\t\t\t\t\t};\n\t\t\t\t\tconfig.msps[id] = msp_config;\n\t\t\t\t\tthis.service.channel.addMsp(msp_config, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${method} - no msps found`);\n\t\t\t}\n\t\t\t/*\n\t\t\t\"orderers\":{\"OrdererMSP\":{\"endpoint\":[{\"host\":\"orderer.example.com\",\"port\":7050}]}}}\n\t\t\t*/\n\t\t\tif (q_config.orderers) {\n\t\t\t\tfor (const mspid in q_config.orderers) {\n\t\t\t\t\tlogger.debug(`${method} - found orderer org: ${mspid}`);\n\t\t\t\t\tconfig.orderers[mspid] = {};\n\t\t\t\t\tconfig.orderers[mspid].endpoints = [];\n\t\t\t\t\tfor (const endpoint of q_config.orderers[mspid].endpoint) {\n\t\t\t\t\t\tconfig.orderers[mspid].endpoints.push(endpoint);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${method} - no orderers found`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlogger.error(`${method} - Problem with discovery config: ${err}`);\n\t\t}\n\n\t\treturn config;\n\t}\n\n\tasync _buildOrderers(orderers) {\n\t\tconst method = `_buildOrderers[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\tif (!orderers) {\n\t\t\tlogger.debug('%s - no orderers to build', method);\n\t\t} else {\n\t\t\tfor (const msp_id in orderers) {\n\t\t\t\tlogger.debug(`${method} - orderer msp:${msp_id}`);\n\t\t\t\tfor (const endpoint of orderers[msp_id].endpoints) {\n\t\t\t\t\tendpoint.name = await this._buildOrderer(endpoint.host, endpoint.port, msp_id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn orderers;\n\t}\n\n\tasync _buildOrderer(host, port, msp_id) {\n\t\tconst method = `_buildOrderer[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start mspid:${msp_id} endpoint:${host}:${port}`);\n\n\t\tconst name = `${host}:${port}`;\n\t\tconst url = this.service._buildUrl(host, port);\n\t\tlogger.debug(`${method} - create a new orderer ${url}`);\n\t\tconst orderer = this.service.client.newCommitter(name, msp_id);\n\t\tconst end_point = this.service.client.newEndpoint(this._buildOptions(name, url, host, msp_id));\n\t\ttry {\n\t\t\t// first check to see if orderer is already on this channel\n\t\t\tlet same;\n\t\t\tconst channelOrderers = this.service.channel.getCommitters();\n\t\t\tfor (const channelOrderer of channelOrderers) {\n\t\t\t\tlogger.debug('%s - checking %s', method, channelOrderer);\n\t\t\t\tif (channelOrderer.endpoint && channelOrderer.endpoint.url === url) {\n\t\t\t\t\tsame = channelOrderer;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!same) {\n\t\t\t\tawait orderer.connect(end_point);\n\t\t\t\tthis.service.channel.addCommitter(orderer);\n\t\t\t} else {\n\t\t\t\tawait same.checkConnection();\n\t\t\t\tlogger.debug('%s - orderer already added to this channel', method);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(`${method} - Unable to connect to the discovered orderer ${name} due to ${error}`);\n\t\t}\n\n\t\treturn name;\n\t}\n\n\t_buildOptions(name, url, host, msp_id) {\n\t\tconst method = `_buildOptions[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tconst caroots = this._buildTlsRootCerts(msp_id);\n\t\treturn {\n\t\t\turl: url,\n\t\t\tpem: caroots,\n\t\t\t'ssl-target-name-override': host,\n\t\t\tname: name\n\t\t};\n\t}\n\n\t_buildTlsRootCerts(msp_id = checkParameter('msp_id')) {\n\t\tconst method = `_buildTlsRootCerts[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tlet ca_roots = '';\n\n\t\tif (!this.parsedResults.msps) {\n\t\t\tlogger.error('Missing MSPs discovery results');\n\t\t\treturn ca_roots;\n\t\t}\n\n\t\tconst mspDiscovered = this.parsedResults.msps[msp_id];\n\t\tif (!mspDiscovered) {\n\t\t\tlogger.error(`Missing msp ${msp_id} in discovery results`);\n\t\t\treturn ca_roots;\n\t\t}\n\n\t\tlogger.debug(`Found msp ${msp_id}`);\n\n\t\tif (mspDiscovered.tlsRootCerts) {\n\t\t\tca_roots = ca_roots + mspDiscovered.tlsRootCerts;\n\t\t} else {\n\t\t\tlogger.debug('%s - no tls root certs', method);\n\t\t}\n\t\tif (mspDiscovered.tlsIntermediateCerts) {\n\t\t\tca_roots = ca_roots + mspDiscovered.tlsIntermediateCerts;\n\t\t} else {\n\t\t\tlogger.debug('%s - no tls intermediate certs', method);\n\t\t}\n\n\t\treturn ca_roots;\n\t}\n\n\tasync _processMembership(q_members) {\n\t\tconst method = `_processMembership[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\t\tconst peersByOrg = {};\n\t\tif (q_members.peers_by_org) {\n\t\t\tfor (const mspid in q_members.peers_by_org) {\n\t\t\t\tlogger.debug(`${method} - found org:${mspid}`);\n\t\t\t\tpeersByOrg[mspid] = {};\n\t\t\t\tpeersByOrg[mspid].peers = await this._processPeers(q_members.peers_by_org[mspid].peers);\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.debug(`${method} - missing peers by org`);\n\t\t}\n\t\treturn peersByOrg;\n\t}\n\n\t// message Peers\n\tasync _processPeers(q_peers) {\n\t\tconst method = `_processPeers[${this.service.name}]`;\n\t\tconst peers = [];\n\t\t// message Peer\n\t\tfor (const q_peer of q_peers) {\n\t\t\tconst peer = {};\n\t\t\t// IDENTITY\n\t\t\tconst q_identity = fabproto6.msp.SerializedIdentity.decode(q_peer.identity);\n\t\t\tpeer.mspid = q_identity.mspid;\n\n\t\t\t// MEMBERSHIP - Peer.membership_info\n\t\t\t// fabproto6.gossip.Envelope.payload\n\t\t\tconst q_membership_message = fabproto6.gossip.GossipMessage.decode(q_peer.membership_info.payload);\n\t\t\tpeer.endpoint = q_membership_message.alive_msg.membership.endpoint;\n\t\t\tpeer.name = q_membership_message.alive_msg.membership.endpoint;\n\t\t\tlogger.debug(`${method} - peer :${peer.endpoint}`);\n\n\t\t\t// STATE\n\t\t\tif (q_peer.state_info) {\n\t\t\t\tconst message_s = fabproto6.gossip.GossipMessage.decode(q_peer.state_info.payload);\n\t\t\t\tpeer.ledgerHeight = Long.fromValue(message_s.state_info.properties.ledger_height);\n\t\t\t\tlogger.debug(`${method} - ledgerHeight :${peer.ledgerHeight}`);\n\t\t\t\tpeer.chaincodes = [];\n\t\t\t\tfor (const index in message_s.state_info.properties.chaincodes) {\n\t\t\t\t\tconst q_chaincode = message_s.state_info.properties.chaincodes[index];\n\t\t\t\t\tconst chaincode = {};\n\t\t\t\t\tchaincode.name = q_chaincode.name;\n\t\t\t\t\tchaincode.version = q_chaincode.version;\n\t\t\t\t\t// TODO metadata ?\n\t\t\t\t\tlogger.debug(`${method} - chaincode :${JSON.stringify(chaincode)}`);\n\t\t\t\t\tpeer.chaincodes.push(chaincode);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${method} - no state info for peer ${peer.endpoint}`);\n\t\t\t}\n\n\t\t\t// all done with this peer\n\t\t\tpeers.push(peer);\n\t\t\t// build the GRPC instance\n\t\t\tawait this._buildPeer(peer);\n\t\t}\n\n\t\treturn peers;\n\t}\n\n\tasync _buildPeer(discovery_peer) {\n\t\tconst method = `_buildPeer[${this.service.name}]`;\n\t\tlogger.debug(`${method} - start`);\n\n\t\tif (!discovery_peer) {\n\t\t\tthrow Error('Missing discovery_peer parameter');\n\t\t}\n\t\tconst address = discovery_peer.endpoint;\n\t\tconst msp_id = discovery_peer.mspid;\n\n\t\tconst host_port = address.split(':');\n\t\tconst url = this.service._buildUrl(host_port[0], host_port[1]);\n\n\t\t// first check to see if peer is already on this channel\n\t\tlet peer;\n\t\tconst channelPeers = this.service.channel.getEndorsers();\n\t\tfor (const channelPeer of channelPeers) {\n\t\t\tlogger.debug('%s - checking channel peer %s', method, channelPeer.name);\n\t\t\tif (channelPeer.endpoint && channelPeer.endpoint.url === url) {\n\t\t\t\tlogger.debug('%s - url: %s - already added to this channel', method, url);\n\t\t\t\tpeer = channelPeer;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!peer) {\n\t\t\tlogger.debug(`${method} - create a new endorser ${url}`);\n\t\t\tpeer = this.service.client.newEndorser(address, msp_id);\n\t\t\tconst end_point = this.service.client.newEndpoint(this._buildOptions(address, url, host_port[0], msp_id));\n\t\t\ttry {\n\t\t\t\tlogger.debug(`${method} - about to connect to endorser ${address} url:${url}`);\n\t\t\t\tawait peer.connect(end_point);\n\t\t\t\tthis.service.channel.addEndorser(peer);\n\t\t\t\tlogger.debug(`${method} - connected to peer ${address} url:${url}`);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error(`${method} - Unable to connect to the discovered peer ${address} due to ${error}`);\n\t\t\t}\n\t\t} else {\n\t\t\t// make sure the existing connect is still good\n\t\t\tawait peer.checkConnection();\n\t\t}\n\n\t\t// indicate that this peer has been touched by the discovery service\n\t\tpeer.discovered = true;\n\n\t\t// make sure that this peer has all the found installed chaincodes\n\t\tif (discovery_peer.chaincodes) {\n\t\t\tfor (const chaincode of discovery_peer.chaincodes) {\n\t\t\t\tlogger.debug(`${method} - adding chaincode ${chaincode.name} to peer ${peer.name}`);\n\t\t\t\tpeer.addChaincode(chaincode.name);\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${method} - end`);\n\t\treturn peer;\n\t}\n\n\t// -- process the ChaincodeQueryResult - fabproto6.discovery.QueryResult.ChaincodeQueryResult\n\tasync _processChaincode(q_chaincodes) {\n\t\tconst method = '_processChaincode';\n\t\tlogger.debug(`${method} - start`);\n\t\tconst endorsement_plan = {};\n\t\t// repeated EndorsementDescriptor content, but we should only have one\n\t\tif (q_chaincodes && q_chaincodes.content && Array.isArray(q_chaincodes.content)) {\n\t\t\tfor (const q_endors_desc of q_chaincodes.content) {\n\t\t\t\tendorsement_plan.chaincode = q_endors_desc.chaincode;\n\n\t\t\t\t// named groups of Peers\n\t\t\t\tendorsement_plan.groups = {};\n\t\t\t\tfor (const group_name in q_endors_desc.endorsers_by_groups) {\n\t\t\t\t\tlogger.debug(`${method} - found group: ${group_name}`);\n\t\t\t\t\tconst group = {};\n\t\t\t\t\tgroup.peers = await this._processPeers(q_endors_desc.endorsers_by_groups[group_name].peers);\n\t\t\t\t\t// all done with this group\n\t\t\t\t\tendorsement_plan.groups[group_name] = group;\n\t\t\t\t}\n\n\t\t\t\t// LAYOUTS\n\t\t\t\tendorsement_plan.layouts = [];\n\t\t\t\tfor (const q_layout of q_endors_desc.layouts) {\n\t\t\t\t\tconst layout = Object.assign({}, q_layout.quantities_by_group);\n\t\t\t\t\tlogger.debug(`${method} - layout :${layout}`);\n\t\t\t\t\tendorsement_plan.layouts.push(layout);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow Error('Plan layouts are invalid');\n\t\t}\n\n\t\treturn endorsement_plan;\n\t}\n}\n\nmodule.exports = DiscoveryResultsProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}