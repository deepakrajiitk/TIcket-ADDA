{"ast":null,"code":"/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst Identity = require('./Identity');\n\n/**\n * SigningIdentity is an extension of Identity to cover signing capabilities. E.g., signing identity\n * should be requested in the case of a client who wishes to sign proposal responses and transactions\n *\n * @class\n */\nclass SigningIdentity extends Identity {\n  /**\n   * @param {string} certificate HEX string for the PEM encoded certificate\n   * @param {module:api.Key} publicKey The public key represented by the certificate\n   * @param {string} mspId The associated MSP's ID that manages this identity\n   * @param {module:api.CryptoSuite} cryptoSuite The underlying {@link CryptoSuite} implementation for the digital\n   * signature algorithm\n   * @param {Signer} signer The signer object encapsulating the opaque private key and the corresponding\n   * digital signature algorithm to be used for signing operations\n   */\n  constructor(certificate, publicKey, mspId, cryptoSuite, signer) {\n    if (!certificate) {\n      throw new Error('Missing required parameter \"certificate\".');\n    }\n    if (!publicKey) {\n      throw new Error('Missing required parameter \"publicKey\".');\n    }\n    if (!mspId) {\n      throw new Error('Missing required parameter \"mspId\".');\n    }\n    if (!cryptoSuite) {\n      throw new Error('Missing required parameter \"cryptoSuite\".');\n    }\n    super(certificate, publicKey, mspId, cryptoSuite);\n    if (!signer) {\n      throw new Error('Missing required parameter \"signer\".');\n    }\n    this._signer = signer;\n  }\n\n  /**\n   * Signs digest with the private key contained inside the signer.\n   *\n   * @param {byte[]} msg The message to sign\n   * @param {Object} opts Options object for the signing, contains one field 'hashFunction' that allows\n   *   different hashing algorithms to be used. If not present, will default to the hash function\n   *   configured for the identity's own crypto suite object\n   */\n  sign(msg, opts) {\n    // calculate the hash for the message before signing\n    let hashFunction;\n    if (opts && opts.hashFunction) {\n      if (typeof opts.hashFunction !== 'function') {\n        throw new Error('The \"hashFunction\" field must be a function');\n      }\n      hashFunction = opts.hashFunction;\n    } else {\n      hashFunction = this._cryptoSuite.hash.bind(this._cryptoSuite);\n    }\n    const digest = hashFunction(msg);\n    return this._signer.sign(Buffer.from(digest, 'hex'), null);\n  }\n  static isInstance(object) {\n    return object._certificate && object._publicKey && object._mspId && object._cryptoSuite && object._signer;\n  }\n}\nmodule.exports = SigningIdentity;","map":{"version":3,"names":["Identity","require","SigningIdentity","constructor","certificate","publicKey","mspId","cryptoSuite","signer","Error","_signer","sign","msg","opts","hashFunction","_cryptoSuite","hash","bind","digest","Buffer","from","isInstance","object","_certificate","_publicKey","_mspId","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/SigningIdentity.js"],"sourcesContent":["/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst Identity = require('./Identity');\n\n/**\n * SigningIdentity is an extension of Identity to cover signing capabilities. E.g., signing identity\n * should be requested in the case of a client who wishes to sign proposal responses and transactions\n *\n * @class\n */\nclass SigningIdentity extends Identity {\n\t/**\n\t * @param {string} certificate HEX string for the PEM encoded certificate\n\t * @param {module:api.Key} publicKey The public key represented by the certificate\n\t * @param {string} mspId The associated MSP's ID that manages this identity\n\t * @param {module:api.CryptoSuite} cryptoSuite The underlying {@link CryptoSuite} implementation for the digital\n\t * signature algorithm\n\t * @param {Signer} signer The signer object encapsulating the opaque private key and the corresponding\n\t * digital signature algorithm to be used for signing operations\n\t */\n\tconstructor(certificate, publicKey, mspId, cryptoSuite, signer) {\n\t\tif (!certificate) {\n\t\t\tthrow new Error('Missing required parameter \"certificate\".');\n\t\t}\n\t\tif (!publicKey) {\n\t\t\tthrow new Error('Missing required parameter \"publicKey\".');\n\t\t}\n\t\tif (!mspId) {\n\t\t\tthrow new Error('Missing required parameter \"mspId\".');\n\t\t}\n\t\tif (!cryptoSuite) {\n\t\t\tthrow new Error('Missing required parameter \"cryptoSuite\".');\n\t\t}\n\t\tsuper(certificate, publicKey, mspId, cryptoSuite);\n\n\t\tif (!signer) {\n\t\t\tthrow new Error('Missing required parameter \"signer\".');\n\t\t}\n\n\t\tthis._signer = signer;\n\t}\n\n\t/**\n\t * Signs digest with the private key contained inside the signer.\n\t *\n\t * @param {byte[]} msg The message to sign\n\t * @param {Object} opts Options object for the signing, contains one field 'hashFunction' that allows\n\t *   different hashing algorithms to be used. If not present, will default to the hash function\n\t *   configured for the identity's own crypto suite object\n\t */\n\tsign(msg, opts) {\n\t\t// calculate the hash for the message before signing\n\t\tlet hashFunction;\n\t\tif (opts && opts.hashFunction) {\n\t\t\tif (typeof opts.hashFunction !== 'function') {\n\t\t\t\tthrow new Error('The \"hashFunction\" field must be a function');\n\t\t\t}\n\n\t\t\thashFunction = opts.hashFunction;\n\t\t} else {\n\t\t\thashFunction = this._cryptoSuite.hash.bind(this._cryptoSuite);\n\t\t}\n\n\t\tconst digest = hashFunction(msg);\n\t\treturn this._signer.sign(Buffer.from(digest, 'hex'), null);\n\t}\n\n\tstatic isInstance(object) {\n\t\treturn object._certificate &&\n\t\t\tobject._publicKey &&\n\t\t\tobject._mspId &&\n\t\t\tobject._cryptoSuite &&\n\t\t\tobject._signer;\n\t}\n}\n\nmodule.exports = SigningIdentity;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASF,QAAQ,CAAC;EACtC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCG,WAAWA,CAACC,WAAW,EAAEC,SAAS,EAAEC,KAAK,EAAEC,WAAW,EAAEC,MAAM,EAAE;IAC/D,IAAI,CAACJ,WAAW,EAAE;MACjB,MAAM,IAAIK,KAAK,CAAC,2CAA2C,CAAC;IAC7D;IACA,IAAI,CAACJ,SAAS,EAAE;MACf,MAAM,IAAII,KAAK,CAAC,yCAAyC,CAAC;IAC3D;IACA,IAAI,CAACH,KAAK,EAAE;MACX,MAAM,IAAIG,KAAK,CAAC,qCAAqC,CAAC;IACvD;IACA,IAAI,CAACF,WAAW,EAAE;MACjB,MAAM,IAAIE,KAAK,CAAC,2CAA2C,CAAC;IAC7D;IACA,KAAK,CAACL,WAAW,EAAEC,SAAS,EAAEC,KAAK,EAAEC,WAAW,CAAC;IAEjD,IAAI,CAACC,MAAM,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;IACxD;IAEA,IAAI,CAACC,OAAO,GAAGF,MAAM;EACtB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCG,IAAIA,CAACC,GAAG,EAAEC,IAAI,EAAE;IACf;IACA,IAAIC,YAAY;IAChB,IAAID,IAAI,IAAIA,IAAI,CAACC,YAAY,EAAE;MAC9B,IAAI,OAAOD,IAAI,CAACC,YAAY,KAAK,UAAU,EAAE;QAC5C,MAAM,IAAIL,KAAK,CAAC,6CAA6C,CAAC;MAC/D;MAEAK,YAAY,GAAGD,IAAI,CAACC,YAAY;IACjC,CAAC,MAAM;MACNA,YAAY,GAAG,IAAI,CAACC,YAAY,CAACC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACF,YAAY,CAAC;IAC9D;IAEA,MAAMG,MAAM,GAAGJ,YAAY,CAACF,GAAG,CAAC;IAChC,OAAO,IAAI,CAACF,OAAO,CAACC,IAAI,CAACQ,MAAM,CAACC,IAAI,CAACF,MAAM,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC;EAC3D;EAEA,OAAOG,UAAUA,CAACC,MAAM,EAAE;IACzB,OAAOA,MAAM,CAACC,YAAY,IACzBD,MAAM,CAACE,UAAU,IACjBF,MAAM,CAACG,MAAM,IACbH,MAAM,CAACP,YAAY,IACnBO,MAAM,CAACZ,OAAO;EAChB;AACD;AAEAgB,MAAM,CAACC,OAAO,GAAGzB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}