{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'IdentityContext';\nconst {\n  checkParameter,\n  getLogger,\n  getNonce\n} = require('./Utils.js');\nconst HashPrimitives = require('./HashPrimitives.js');\nconst logger = getLogger(TYPE);\n\n/**\n * @classdesc\n * This class represents a IdentityContext, the user identity.\n * This object will be used to provide the identity on outbound\n * requests to the fabric network.\n * This object will be the source of transaction ids that must\n * be based on an identity. The nonce values will be also\n * be calculated and kept here for convenience.\n * <br><br>\n * see the tutorial {@tutorial proposal}\n * <br><br>\n *\n * @class\n */\nconst IdentityContext = class {\n  /**\n   * Construct a IdentityContext object.\n   *\n   * @param {User} user - The user identity instance\n   * @param {Client} client\n   * @returns {IdentityContext} The IdentityContext instance.\n   */\n  constructor() {\n    let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('user');\n    let client = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('client');\n    this.type = TYPE;\n    this.client = client;\n    this.user = user;\n    if (!user.getName) {\n      throw Error('Missing valid user parameter');\n    }\n    this.name = user.getName();\n    this.mspid = user.getMspid();\n    this.transactionId = null;\n    this.nonce = null;\n  }\n\n  /**\n   * Create a new transaction ID value. The new transaction ID will be set both on this object and on the return\n   * value, which is a copy of this identity context. Calls to this function will not affect the transaction ID value\n   * on copies returned from previous calls.\n   * @returns IdentityContext A copy of this identity context.\n   */\n  calculateTransactionId() {\n    const method = 'calculateTransactionId';\n    logger.debug('%s - start', method);\n    this.nonce = getNonce();\n    logger.debug('%s - nonce:%s', method, this.nonce.toString('hex'));\n    const creator_bytes = this.serializeIdentity(); // same as signatureHeader.Creator\n    const trans_bytes = Buffer.concat([this.nonce, creator_bytes]);\n    const trans_hash = HashPrimitives.SHA2_256(trans_bytes);\n    this.transactionId = Buffer.from(trans_hash).toString();\n    logger.debug('%s - txid:%s', method, this.transactionId);\n    return this.clone({\n      nonce: this.nonce,\n      transactionId: this.transactionId\n    });\n  }\n\n  /**\n   * Get the protobuf serialized identity of this user\n   * @returns {Buffer} serialized identity in bytes\n   */\n  serializeIdentity() {\n    const method = 'serializeIdentity';\n    logger.debug('%s - start', method);\n    return this.user.getIdentity().serialize();\n  }\n\n  /**\n   * Sign the bytes provided\n   * @param {Buffer} payload - The payload bytes that require a signature\n   * @return {Buffer} - The signature as promise bytes\n   */\n  sign() {\n    let payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('payload');\n    const method = 'sign';\n    logger.debug('%s - start', method);\n    const signer = this.user.getSigningIdentity();\n    const signature = Buffer.from(signer.sign(payload));\n    logger.debug('%s - end', method);\n    return signature;\n  }\n\n  /**\n   * return a printable representation of this object\n   */\n  toString() {\n    return `IdentityContext: { user: ${this.user.getName()}, transactionId: ${this.transactionId}, nonce:${this.nonce}}`;\n  }\n\n  /**\n   * Creates a copy of this object.\n   * @private\n   * @return {IdentityContext} An identity context.\n   */\n  clone(state) {\n    const result = new IdentityContext(this.user, this.client);\n    result.transactionId = state.transactionId;\n    result.nonce = state.nonce;\n    return result;\n  }\n};\nmodule.exports = IdentityContext;\nmodule.exports.TYPE = TYPE;","map":{"version":3,"names":["TYPE","checkParameter","getLogger","getNonce","require","HashPrimitives","logger","IdentityContext","constructor","user","arguments","length","undefined","client","type","getName","Error","name","mspid","getMspid","transactionId","nonce","calculateTransactionId","method","debug","toString","creator_bytes","serializeIdentity","trans_bytes","Buffer","concat","trans_hash","SHA2_256","from","clone","getIdentity","serialize","sign","payload","signer","getSigningIdentity","signature","state","result","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/IdentityContext.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'IdentityContext';\n\nconst {checkParameter, getLogger, getNonce} = require('./Utils.js');\nconst HashPrimitives = require('./HashPrimitives.js');\nconst logger = getLogger(TYPE);\n\n/**\n * @classdesc\n * This class represents a IdentityContext, the user identity.\n * This object will be used to provide the identity on outbound\n * requests to the fabric network.\n * This object will be the source of transaction ids that must\n * be based on an identity. The nonce values will be also\n * be calculated and kept here for convenience.\n * <br><br>\n * see the tutorial {@tutorial proposal}\n * <br><br>\n *\n * @class\n */\nconst IdentityContext = class {\n\t/**\n\t * Construct a IdentityContext object.\n\t *\n\t * @param {User} user - The user identity instance\n\t * @param {Client} client\n\t * @returns {IdentityContext} The IdentityContext instance.\n\t */\n\tconstructor(user = checkParameter('user'), client = checkParameter('client')) {\n\t\tthis.type = TYPE;\n\t\tthis.client = client;\n\t\tthis.user = user;\n\t\tif (!user.getName) {\n\t\t\tthrow Error('Missing valid user parameter');\n\t\t}\n\t\tthis.name = user.getName();\n\t\tthis.mspid = user.getMspid();\n\t\tthis.transactionId = null;\n\t\tthis.nonce = null;\n\t}\n\n\t/**\n\t * Create a new transaction ID value. The new transaction ID will be set both on this object and on the return\n\t * value, which is a copy of this identity context. Calls to this function will not affect the transaction ID value\n\t * on copies returned from previous calls.\n\t * @returns IdentityContext A copy of this identity context.\n\t */\n\tcalculateTransactionId() {\n\t\tconst method = 'calculateTransactionId';\n\t\tlogger.debug('%s - start', method);\n\t\tthis.nonce = getNonce();\n\t\tlogger.debug('%s - nonce:%s', method, this.nonce.toString('hex'));\n\t\tconst creator_bytes = this.serializeIdentity();// same as signatureHeader.Creator\n\t\tconst trans_bytes = Buffer.concat([this.nonce, creator_bytes]);\n\t\tconst trans_hash = HashPrimitives.SHA2_256(trans_bytes);\n\t\tthis.transactionId = Buffer.from(trans_hash).toString();\n\t\tlogger.debug('%s - txid:%s', method, this.transactionId);\n\n\t\treturn this.clone({\n\t\t\tnonce: this.nonce,\n\t\t\ttransactionId: this.transactionId\n\t\t});\n\t}\n\n\t/**\n\t * Get the protobuf serialized identity of this user\n\t * @returns {Buffer} serialized identity in bytes\n\t */\n\tserializeIdentity() {\n\t\tconst method = 'serializeIdentity';\n\t\tlogger.debug('%s - start', method);\n\n\t\treturn this.user.getIdentity().serialize();\n\t}\n\n\t/**\n\t * Sign the bytes provided\n\t * @param {Buffer} payload - The payload bytes that require a signature\n\t * @return {Buffer} - The signature as promise bytes\n\t */\n\tsign(payload = checkParameter('payload')) {\n\t\tconst method = 'sign';\n\t\tlogger.debug('%s - start', method);\n\t\tconst signer = this.user.getSigningIdentity();\n\t\tconst signature = Buffer.from(signer.sign(payload));\n\n\t\tlogger.debug('%s - end', method);\n\t\treturn signature;\n\t}\n\n\t/**\n\t * return a printable representation of this object\n\t */\n\ttoString() {\n\t\treturn `IdentityContext: { user: ${this.user.getName()}, transactionId: ${this.transactionId}, nonce:${this.nonce}}`;\n\t}\n\n\t/**\n\t * Creates a copy of this object.\n\t * @private\n\t * @return {IdentityContext} An identity context.\n\t */\n\tclone(state) {\n\t\tconst result = new IdentityContext(this.user, this.client);\n\t\tresult.transactionId = state.transactionId;\n\t\tresult.nonce = state.nonce;\n\t\treturn result;\n\t}\n};\n\nmodule.exports = IdentityContext;\nmodule.exports.TYPE = TYPE;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}