{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2020 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventServiceManager = void 0;\nconst GatewayUtils = __importStar(require(\"../gatewayutils\"));\nconst Logger = __importStar(require(\"../../logger\"));\nconst logger = Logger.getLogger('EventSourceManager');\nclass EventServiceManager {\n  constructor(network) {\n    this.eventServices = new Map();\n    this.network = network;\n    this.channel = network.getChannel();\n    this.mspId = network.getGateway().getIdentity().mspId;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.identityContext = this.network.getGateway().identityContext;\n    logger.debug('constructor - network:%s', this.network.getChannel().name);\n  }\n  /**\n   * Get a shared event service that can only be used for realtime listening to filtered events. These event services\n   * provide high performance event listening for commit events.\n   * @param peer Peer from which to receive events.\n   * @returns An event service.\n   */\n  getCommitEventService(peer) {\n    let eventService = this.eventServices.get(peer);\n    if (!eventService) {\n      eventService = this.newEventService([peer]);\n      this.eventServices.set(peer, eventService);\n    }\n    return eventService;\n  }\n  /**\n   * Use this method to be sure the event service has been connected and has been started. If the event service is not\n   * started, it will start the service based on the options provided. If the event service is already started, it\n   * will check that the event service is compatible with the options provided.\n   * @param eventService EventService to be started if it not already started.\n   * @param options The options to start the event service.\n   */\n  async startEventService(eventService) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    logger.debug('startEventService - start %s', this.network.getChannel().name);\n    if (eventService.isStarted() || eventService.isInUse()) {\n      return this.assertValidOptionsForStartedService(options, eventService);\n    }\n    eventService.build(this.identityContext, options);\n    eventService.sign(this.identityContext);\n    // targets must be previously assigned\n    await eventService.send();\n  }\n  newDefaultEventService() {\n    const peers = this.getEventPeers();\n    GatewayUtils.shuffle(peers);\n    return this.newEventService(peers);\n  }\n  close() {\n    this.eventServices.forEach(eventService => eventService.close());\n  }\n  /**\n   * This method will build fabric-common Eventers and the fabric-common\n   * EventService. The Eventers will not be connected to the endpoint at\n   * this time. Since the endorsers have been previously connected, the\n   * endpoint should be accessable. The EventService will check the connection\n   * and perform the connect during the send() when it starts the service.\n   * @param peers The Endorser service endpoints used to build a\n   *  a list of {@link Eventer} service endpoints that will be used as the\n   *  targets of the new EventService.\n   */\n  newEventService(peers) {\n    const serviceName = this.createName(peers);\n    const eventService = this.channel.newEventService(serviceName);\n    const eventers = peers.map(peer => this.newEventer(peer));\n    eventService.setTargets(eventers);\n    return eventService;\n  }\n  newEventer(peer) {\n    const eventer = this.channel.client.newEventer(peer.name);\n    eventer.setEndpoint(peer.endpoint);\n    return eventer;\n  }\n  createName(peers) {\n    return peers.map(peer => peer.name).join(',');\n  }\n  assertValidOptionsForStartedService(options, eventService) {\n    if (options.blockType && options.blockType !== eventService.blockType) {\n      throw new Error('EventService is not receiving the correct blockType');\n    }\n    if (options.startBlock) {\n      throw new Error('EventService is started and not usable for replay');\n    }\n  }\n  getEventPeers() {\n    const orgPeers = this.getOrganizationPeers();\n    return orgPeers.length > 0 ? orgPeers : this.getNetworkPeers();\n  }\n  getOrganizationPeers() {\n    return this.channel.getEndorsers(this.mspId);\n  }\n  getNetworkPeers() {\n    return this.channel.getEndorsers();\n  }\n}\nexports.EventServiceManager = EventServiceManager;","map":{"version":3,"names":["GatewayUtils","__importStar","require","Logger","logger","getLogger","EventServiceManager","constructor","network","eventServices","Map","channel","getChannel","mspId","getGateway","getIdentity","identityContext","debug","name","getCommitEventService","peer","eventService","get","newEventService","set","startEventService","options","arguments","length","undefined","isStarted","isInUse","assertValidOptionsForStartedService","build","sign","send","newDefaultEventService","peers","getEventPeers","shuffle","close","forEach","serviceName","createName","eventers","map","newEventer","setTargets","eventer","client","setEndpoint","endpoint","join","blockType","Error","startBlock","orgPeers","getOrganizationPeers","getNetworkPeers","getEndorsers","exports"],"sources":["../../../src/impl/event/eventservicemanager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}