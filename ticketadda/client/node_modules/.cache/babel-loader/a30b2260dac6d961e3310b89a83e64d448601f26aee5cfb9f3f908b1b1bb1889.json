{"ast":null,"code":"'use strict';\n\nconst {\n  Gateway,\n  Wallets\n} = require('fabric-network');\nconst fs = require('fs');\nconst path = require('path');\nasync function createPassenger(passengerId, name, age, gender) {\n  try {\n    // Load connection profile; will be used to locate a gateway\n    const ccpPath = path.resolve(__dirname, '..', '..', '..', 'test-network', 'organizations', 'peerOrganizations', 'org1.example.com', 'connection-org1.json');\n    const ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));\n\n    // Create a new file system based wallet for managing identities\n    const walletPath = path.join(process.cwd(), 'wallet');\n    const wallet = await Wallets.newFileSystemWallet(walletPath);\n\n    // Check to see if we've already enrolled the user\n    const identity = await wallet.get(passengerId);\n    if (!identity) {\n      console.log(`An identity for the user ${passengerId} does not exist in the wallet`);\n      console.log('Run the registerUser.js application before retrying');\n      return;\n    }\n\n    // Create a new gateway for connecting to our peer node\n    const gateway = new Gateway();\n    await gateway.connect(ccp, {\n      wallet,\n      identity: passengerId,\n      discovery: {\n        enabled: true,\n        asLocalhost: true\n      }\n    });\n\n    // Get the network (channel) our contract is deployed to\n    const network = await gateway.getNetwork('mychannel');\n\n    // Get the contract from the network\n    const contract = network.getContract('ticketadda');\n\n    // Submit the transaction to the network\n    await contract.submitTransaction('createPassenger', passengerId, name, age, gender, true);\n    console.log(`Passenger ${passengerId} has been created`);\n\n    // Disconnect from the gateway\n    await gateway.disconnect();\n  } catch (error) {\n    console.error(`Failed to create passenger: ${error}`);\n    process.exit(1);\n  }\n}\nmodule.exports = createPassenger;","map":{"version":3,"names":["Gateway","Wallets","require","fs","path","createPassenger","passengerId","name","age","gender","ccpPath","resolve","__dirname","ccp","JSON","parse","readFileSync","walletPath","join","process","cwd","wallet","newFileSystemWallet","identity","get","console","log","gateway","connect","discovery","enabled","asLocalhost","network","getNetwork","contract","getContract","submitTransaction","disconnect","error","exit","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/src/createPassenger.js"],"sourcesContent":["'use strict';\n\nconst { Gateway, Wallets } = require('fabric-network');\nconst fs = require('fs');\nconst path = require('path');\n\nasync function createPassenger(passengerId, name, age, gender) {\n  try {\n    // Load connection profile; will be used to locate a gateway\n    const ccpPath = path.resolve(__dirname, '..', '..', '..', 'test-network', 'organizations', 'peerOrganizations', 'org1.example.com', 'connection-org1.json');\n    const ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));\n\n    // Create a new file system based wallet for managing identities\n    const walletPath = path.join(process.cwd(), 'wallet');\n    const wallet = await Wallets.newFileSystemWallet(walletPath);\n\n    // Check to see if we've already enrolled the user\n    const identity = await wallet.get(passengerId);\n    if (!identity) {\n      console.log(`An identity for the user ${passengerId} does not exist in the wallet`);\n      console.log('Run the registerUser.js application before retrying');\n      return;\n    }\n\n    // Create a new gateway for connecting to our peer node\n    const gateway = new Gateway();\n    await gateway.connect(ccp, {\n      wallet,\n      identity: passengerId,\n      discovery: { enabled: true, asLocalhost: true }\n    });\n\n    // Get the network (channel) our contract is deployed to\n    const network = await gateway.getNetwork('mychannel');\n\n    // Get the contract from the network\n    const contract = network.getContract('ticketadda');\n\n    // Submit the transaction to the network\n    await contract.submitTransaction('createPassenger', passengerId, name, age, gender, true);\n\n    console.log(`Passenger ${passengerId} has been created`);\n\n    // Disconnect from the gateway\n    await gateway.disconnect();\n  } catch (error) {\n    console.error(`Failed to create passenger: ${error}`);\n    process.exit(1);\n  }\n}\n\nmodule.exports = createPassenger;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,OAAO;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtD,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,eAAeG,eAAeA,CAACC,WAAW,EAAEC,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAE;EAC7D,IAAI;IACF;IACA,MAAMC,OAAO,GAAGN,IAAI,CAACO,OAAO,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,EAAE,eAAe,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,sBAAsB,CAAC;IAC3J,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACZ,EAAE,CAACa,YAAY,CAACN,OAAO,EAAE,MAAM,CAAC,CAAC;;IAExD;IACA,MAAMO,UAAU,GAAGb,IAAI,CAACc,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE,EAAE,QAAQ,CAAC;IACrD,MAAMC,MAAM,GAAG,MAAMpB,OAAO,CAACqB,mBAAmB,CAACL,UAAU,CAAC;;IAE5D;IACA,MAAMM,QAAQ,GAAG,MAAMF,MAAM,CAACG,GAAG,CAAClB,WAAW,CAAC;IAC9C,IAAI,CAACiB,QAAQ,EAAE;MACbE,OAAO,CAACC,GAAG,CAAE,4BAA2BpB,WAAY,+BAA8B,CAAC;MACnFmB,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;MAClE;IACF;;IAEA;IACA,MAAMC,OAAO,GAAG,IAAI3B,OAAO,EAAE;IAC7B,MAAM2B,OAAO,CAACC,OAAO,CAACf,GAAG,EAAE;MACzBQ,MAAM;MACNE,QAAQ,EAAEjB,WAAW;MACrBuB,SAAS,EAAE;QAAEC,OAAO,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAK;IAChD,CAAC,CAAC;;IAEF;IACA,MAAMC,OAAO,GAAG,MAAML,OAAO,CAACM,UAAU,CAAC,WAAW,CAAC;;IAErD;IACA,MAAMC,QAAQ,GAAGF,OAAO,CAACG,WAAW,CAAC,YAAY,CAAC;;IAElD;IACA,MAAMD,QAAQ,CAACE,iBAAiB,CAAC,iBAAiB,EAAE9B,WAAW,EAAEC,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAE,IAAI,CAAC;IAEzFgB,OAAO,CAACC,GAAG,CAAE,aAAYpB,WAAY,mBAAkB,CAAC;;IAExD;IACA,MAAMqB,OAAO,CAACU,UAAU,EAAE;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAE,+BAA8BA,KAAM,EAAC,CAAC;IACrDnB,OAAO,CAACoB,IAAI,CAAC,CAAC,CAAC;EACjB;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGpC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}