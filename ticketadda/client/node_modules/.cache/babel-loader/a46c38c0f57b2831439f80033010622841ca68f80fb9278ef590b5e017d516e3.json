{"ast":null,"code":"const CRLF = '\\r\\n';\nconst DASHES = '--';\n\n// generate the payload, boundary and header for a multipart/related request\n// to upload binary attachments to CouchDB.\n// https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\nclass MultiPartFactory {\n  // constructor\n  constructor(parts) {\n    // generate a unique id that forms the boundary between parts\n    this.boundary = this.uuid();\n    const bufferList = [];\n\n    // for each part to be processed\n    for (const part of parts) {\n      // start with the boundary e.g. --0559337432997171\\r\\n\n      bufferList.push(Buffer.from(DASHES + this.boundary + CRLF));\n\n      // state the type and length of the following part\n      bufferList.push(Buffer.from(`content-type: ${part.content_type}${CRLF}`));\n      bufferList.push(Buffer.from(`content-length: ${part.data.length}${CRLF}`));\n\n      // two \\r\\n marks start of the part itself\n      bufferList.push(Buffer.from(CRLF));\n\n      // output the string/buffer\n      bufferList.push(typeof part.data === 'string' ? Buffer.from(part.data) : part.data);\n\n      // followed by /r/n\n      bufferList.push(Buffer.from(CRLF));\n    }\n\n    // right at the end we have an end marker e.g. --0559337432997171--\\r\\n\n    bufferList.push(Buffer.from(DASHES + this.boundary + DASHES + CRLF));\n\n    // buid up a single Buffer from the array of bits\n    this.data = Buffer.concat(bufferList);\n\n    // calculate the Content-Type header required to send with this request\n    this.header = `multipart/related; boundary=${this.boundary}`;\n  }\n  uuid() {\n    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    let retval = '';\n    for (let i = 0; i < 16; i++) {\n      retval += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return retval;\n  }\n}\nmodule.exports = MultiPartFactory;","map":{"version":3,"names":["CRLF","DASHES","MultiPartFactory","constructor","parts","boundary","uuid","bufferList","part","push","Buffer","from","content_type","data","length","concat","header","chars","split","retval","i","Math","floor","random","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/nano/lib/multipart.js"],"sourcesContent":["const CRLF = '\\r\\n'\nconst DASHES = '--'\n\n// generate the payload, boundary and header for a multipart/related request\n// to upload binary attachments to CouchDB.\n// https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\nclass MultiPartFactory {\n  // constructor\n  constructor (parts) {\n    // generate a unique id that forms the boundary between parts\n    this.boundary = this.uuid()\n    const bufferList = []\n\n    // for each part to be processed\n    for (const part of parts) {\n      // start with the boundary e.g. --0559337432997171\\r\\n\n      bufferList.push(Buffer.from(DASHES + this.boundary + CRLF))\n\n      // state the type and length of the following part\n      bufferList.push(Buffer.from(`content-type: ${part.content_type}${CRLF}`))\n      bufferList.push(Buffer.from(`content-length: ${part.data.length}${CRLF}`))\n\n      // two \\r\\n marks start of the part itself\n      bufferList.push(Buffer.from(CRLF))\n\n      // output the string/buffer\n      bufferList.push(typeof part.data === 'string' ? Buffer.from(part.data) : part.data)\n\n      // followed by /r/n\n      bufferList.push(Buffer.from(CRLF))\n    }\n\n    // right at the end we have an end marker e.g. --0559337432997171--\\r\\n\n    bufferList.push(Buffer.from(DASHES + this.boundary + DASHES + CRLF))\n\n    // buid up a single Buffer from the array of bits\n    this.data = Buffer.concat(bufferList)\n\n    // calculate the Content-Type header required to send with this request\n    this.header = `multipart/related; boundary=${this.boundary}`\n  }\n\n  uuid () {\n    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('')\n    let retval = ''\n    for (let i = 0; i < 16; i++) {\n      retval += chars[Math.floor(Math.random() * chars.length)]\n    }\n    return retval\n  }\n}\n\nmodule.exports = MultiPartFactory\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,MAAM;AACnB,MAAMC,MAAM,GAAG,IAAI;;AAEnB;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACrB;EACAC,WAAWA,CAAEC,KAAK,EAAE;IAClB;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,IAAI,EAAE;IAC3B,MAAMC,UAAU,GAAG,EAAE;;IAErB;IACA,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;MACxB;MACAG,UAAU,CAACE,IAAI,CAACC,MAAM,CAACC,IAAI,CAACV,MAAM,GAAG,IAAI,CAACI,QAAQ,GAAGL,IAAI,CAAC,CAAC;;MAE3D;MACAO,UAAU,CAACE,IAAI,CAACC,MAAM,CAACC,IAAI,CAAE,iBAAgBH,IAAI,CAACI,YAAa,GAAEZ,IAAK,EAAC,CAAC,CAAC;MACzEO,UAAU,CAACE,IAAI,CAACC,MAAM,CAACC,IAAI,CAAE,mBAAkBH,IAAI,CAACK,IAAI,CAACC,MAAO,GAAEd,IAAK,EAAC,CAAC,CAAC;;MAE1E;MACAO,UAAU,CAACE,IAAI,CAACC,MAAM,CAACC,IAAI,CAACX,IAAI,CAAC,CAAC;;MAElC;MACAO,UAAU,CAACE,IAAI,CAAC,OAAOD,IAAI,CAACK,IAAI,KAAK,QAAQ,GAAGH,MAAM,CAACC,IAAI,CAACH,IAAI,CAACK,IAAI,CAAC,GAAGL,IAAI,CAACK,IAAI,CAAC;;MAEnF;MACAN,UAAU,CAACE,IAAI,CAACC,MAAM,CAACC,IAAI,CAACX,IAAI,CAAC,CAAC;IACpC;;IAEA;IACAO,UAAU,CAACE,IAAI,CAACC,MAAM,CAACC,IAAI,CAACV,MAAM,GAAG,IAAI,CAACI,QAAQ,GAAGJ,MAAM,GAAGD,IAAI,CAAC,CAAC;;IAEpE;IACA,IAAI,CAACa,IAAI,GAAGH,MAAM,CAACK,MAAM,CAACR,UAAU,CAAC;;IAErC;IACA,IAAI,CAACS,MAAM,GAAI,+BAA8B,IAAI,CAACX,QAAS,EAAC;EAC9D;EAEAC,IAAIA,CAAA,EAAI;IACN,MAAMW,KAAK,GAAG,gEAAgE,CAACC,KAAK,CAAC,EAAE,CAAC;IACxF,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BD,MAAM,IAAIF,KAAK,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,KAAK,CAACH,MAAM,CAAC,CAAC;IAC3D;IACA,OAAOK,MAAM;EACf;AACF;AAEAK,MAAM,CAACC,OAAO,GAAGvB,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}