{"ast":null,"code":"/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst nconf = require('nconf');\n\n//\n// The class representing the hierarchy of configuration settings.\n//\n\nclass Config {\n  constructor() {\n    nconf.argv();\n    nconf.env({\n      parseValues: true,\n      lowerCase: true,\n      transform: function (obj) {\n        obj.key = obj.key.replace(/_/g, '-');\n        return obj;\n      }\n    });\n    nconf.use('mapenv', {\n      type: 'memory'\n    });\n    nconf.stores.mapenv.store = nconf.stores.env.store;\n    this._fileStores = [];\n    // reference to configuration settings\n    this._config = nconf;\n  }\n\n  //\n  //\t utility method to reload the file based stores so\n  //\t the last one added is on the top of the files hierarchy\n  //\t unless the bottom flag indicates to add otherwise\n  //\n  reorderFileStores(path, bottom) {\n    // first remove all the file stores\n    for (const fileStore of this._fileStores) {\n      this._config.remove(fileStore);\n    }\n    if (bottom) {\n      // add to the bottom of the list\n      this._fileStores.push(path);\n    } else {\n      // add this new file to the front of the list\n      this._fileStores.unshift(path);\n    }\n\n    // now load all the file stores\n    for (const fileStore of this._fileStores) {\n      this._config.file(fileStore, fileStore);\n    }\n  }\n\n  //\n  //    Add an additional file\n  //\n  file(path) {\n    if (typeof path !== 'string') {\n      throw new Error('The \"path\" parameter must be a string');\n    }\n    // just reuse the path name as the store name...will be unique\n    this.reorderFileStores(path);\n  }\n\n  //\n  //   Get the config setting with name.\n  //   If the setting is not found returns the default value provided.\n  //\n  get(name, default_value) {\n    let return_value = null;\n    try {\n      return_value = this._config.get(name);\n    } catch (err) {\n      return_value = default_value;\n    }\n    if (return_value === null || return_value === undefined) {\n      return_value = default_value;\n    }\n    return return_value;\n  }\n\n  //\n  //\t  Set a value into the 'memory' store of config settings. This will override all other settings\n  //\n  set(name, value) {\n    this._config.set(name, value);\n  }\n}\nmodule.exports = Config;","map":{"version":3,"names":["nconf","require","Config","constructor","argv","env","parseValues","lowerCase","transform","obj","key","replace","use","type","stores","mapenv","store","_fileStores","_config","reorderFileStores","path","bottom","fileStore","remove","push","unshift","file","Error","get","name","default_value","return_value","err","undefined","set","value","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Config.js"],"sourcesContent":["/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\nconst nconf = require('nconf');\n\n//\n// The class representing the hierarchy of configuration settings.\n//\n\nclass Config {\n\n\tconstructor() {\n\t\tnconf.argv();\n\t\tnconf.env({\n\t\t\tparseValues: true,\n\t\t\tlowerCase: true,\n\t\t\ttransform: function(obj) {\n\t\t\t\tobj.key = obj.key.replace(/_/g, '-');\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t});\n\t\tnconf.use('mapenv', {type:'memory'});\n\t\tnconf.stores.mapenv.store = nconf.stores.env.store;\n\t\tthis._fileStores = [];\n\t\t// reference to configuration settings\n\t\tthis._config = nconf;\n\t}\n\n\t//\n\t//\t utility method to reload the file based stores so\n\t//\t the last one added is on the top of the files hierarchy\n\t//\t unless the bottom flag indicates to add otherwise\n\t//\n\treorderFileStores(path, bottom) {\n\t\t// first remove all the file stores\n\t\tfor (const fileStore of this._fileStores) {\n\t\t\tthis._config.remove(fileStore);\n\t\t}\n\n\t\tif (bottom) {\n\t\t\t// add to the bottom of the list\n\t\t\tthis._fileStores.push(path);\n\t\t} else {\n\t\t\t// add this new file to the front of the list\n\t\t\tthis._fileStores.unshift(path);\n\t\t}\n\n\t\t// now load all the file stores\n\t\tfor (const fileStore of this._fileStores) {\n\t\t\tthis._config.file(fileStore, fileStore);\n\t\t}\n\t}\n\n\t//\n\t//    Add an additional file\n\t//\n\tfile(path) {\n\t\tif (typeof path !== 'string') {\n\t\t\tthrow new Error('The \"path\" parameter must be a string');\n\t\t}\n\t\t// just reuse the path name as the store name...will be unique\n\t\tthis.reorderFileStores(path);\n\t}\n\n\t//\n\t//   Get the config setting with name.\n\t//   If the setting is not found returns the default value provided.\n\t//\n\tget(name, default_value) {\n\t\tlet return_value = null;\n\n\t\ttry {\n\t\t\treturn_value = this._config.get(name);\n\t\t} catch (err) {\n\t\t\treturn_value = default_value;\n\t\t}\n\n\t\tif (return_value === null || return_value === undefined) {\n\t\t\treturn_value = default_value;\n\t\t}\n\n\t\treturn return_value;\n\t}\n\n\t//\n\t//\t  Set a value into the 'memory' store of config settings. This will override all other settings\n\t//\n\tset(name, value) {\n\t\tthis._config.set(name, value);\n\t}\n\n}\n\nmodule.exports = Config;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;;AAE9B;AACA;AACA;;AAEA,MAAMC,MAAM,CAAC;EAEZC,WAAWA,CAAA,EAAG;IACbH,KAAK,CAACI,IAAI,EAAE;IACZJ,KAAK,CAACK,GAAG,CAAC;MACTC,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,SAAAA,CAASC,GAAG,EAAE;QACxBA,GAAG,CAACC,GAAG,GAAGD,GAAG,CAACC,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;QACpC,OAAOF,GAAG;MACX;IACD,CAAC,CAAC;IACFT,KAAK,CAACY,GAAG,CAAC,QAAQ,EAAE;MAACC,IAAI,EAAC;IAAQ,CAAC,CAAC;IACpCb,KAAK,CAACc,MAAM,CAACC,MAAM,CAACC,KAAK,GAAGhB,KAAK,CAACc,MAAM,CAACT,GAAG,CAACW,KAAK;IAClD,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB;IACA,IAAI,CAACC,OAAO,GAAGlB,KAAK;EACrB;;EAEA;EACA;EACA;EACA;EACA;EACAmB,iBAAiBA,CAACC,IAAI,EAAEC,MAAM,EAAE;IAC/B;IACA,KAAK,MAAMC,SAAS,IAAI,IAAI,CAACL,WAAW,EAAE;MACzC,IAAI,CAACC,OAAO,CAACK,MAAM,CAACD,SAAS,CAAC;IAC/B;IAEA,IAAID,MAAM,EAAE;MACX;MACA,IAAI,CAACJ,WAAW,CAACO,IAAI,CAACJ,IAAI,CAAC;IAC5B,CAAC,MAAM;MACN;MACA,IAAI,CAACH,WAAW,CAACQ,OAAO,CAACL,IAAI,CAAC;IAC/B;;IAEA;IACA,KAAK,MAAME,SAAS,IAAI,IAAI,CAACL,WAAW,EAAE;MACzC,IAAI,CAACC,OAAO,CAACQ,IAAI,CAACJ,SAAS,EAAEA,SAAS,CAAC;IACxC;EACD;;EAEA;EACA;EACA;EACAI,IAAIA,CAACN,IAAI,EAAE;IACV,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC7B,MAAM,IAAIO,KAAK,CAAC,uCAAuC,CAAC;IACzD;IACA;IACA,IAAI,CAACR,iBAAiB,CAACC,IAAI,CAAC;EAC7B;;EAEA;EACA;EACA;EACA;EACAQ,GAAGA,CAACC,IAAI,EAAEC,aAAa,EAAE;IACxB,IAAIC,YAAY,GAAG,IAAI;IAEvB,IAAI;MACHA,YAAY,GAAG,IAAI,CAACb,OAAO,CAACU,GAAG,CAACC,IAAI,CAAC;IACtC,CAAC,CAAC,OAAOG,GAAG,EAAE;MACbD,YAAY,GAAGD,aAAa;IAC7B;IAEA,IAAIC,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKE,SAAS,EAAE;MACxDF,YAAY,GAAGD,aAAa;IAC7B;IAEA,OAAOC,YAAY;EACpB;;EAEA;EACA;EACA;EACAG,GAAGA,CAACL,IAAI,EAAEM,KAAK,EAAE;IAChB,IAAI,CAACjB,OAAO,CAACgB,GAAG,CAACL,IAAI,EAAEM,KAAK,CAAC;EAC9B;AAED;AAEAC,MAAM,CAACC,OAAO,GAAGnC,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}