{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.X509Provider = void 0;\nconst fabric_common_1 = require(\"fabric-common\");\nclass X509Provider {\n  constructor() {\n    this.type = 'X.509';\n    this.cryptoSuite = fabric_common_1.User.newCryptoSuite();\n  }\n  getCryptoSuite() {\n    return this.cryptoSuite;\n  }\n  fromJson(data) {\n    if (data.type !== this.type) {\n      throw new Error('Invalid identity type: ' + data.type);\n    }\n    if (data.version === 1) {\n      const x509Data = data;\n      return {\n        credentials: {\n          certificate: x509Data.credentials.certificate,\n          privateKey: x509Data.credentials.privateKey\n        },\n        mspId: x509Data.mspId,\n        type: 'X.509'\n      };\n    } else {\n      throw new Error(`Unsupported identity version: ${data.version}`);\n    }\n  }\n  toJson(identity) {\n    const data = {\n      credentials: {\n        certificate: identity.credentials.certificate,\n        privateKey: identity.credentials.privateKey\n      },\n      mspId: identity.mspId,\n      type: 'X.509',\n      version: 1\n    };\n    return data;\n  }\n  async getUserContext(identity, name) {\n    if (!identity) {\n      throw Error('X.509 identity is missing');\n    } else if (!identity.credentials) {\n      throw Error('X.509 identity is missing the credential data.');\n    } else if (!identity.credentials.privateKey) {\n      throw Error('X.509 identity data is missing the private key.');\n    }\n    const user = new fabric_common_1.User(name);\n    user.setCryptoSuite(this.cryptoSuite);\n    const importedKey = this.cryptoSuite.createKeyFromRaw(identity.credentials.privateKey.toString());\n    await user.setEnrollment(importedKey, identity.credentials.certificate.toString(), identity.mspId);\n    return user;\n  }\n}\nexports.X509Provider = X509Provider;","map":{"version":3,"names":["fabric_common_1","require","X509Provider","constructor","type","cryptoSuite","User","newCryptoSuite","getCryptoSuite","fromJson","data","Error","version","x509Data","credentials","certificate","privateKey","mspId","toJson","identity","getUserContext","name","user","setCryptoSuite","importedKey","createKeyFromRaw","toString","setEnrollment","exports"],"sources":["../../../src/impl/wallet/x509identity.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;AAMA,MAAAA,eAAA,GAAAC,OAAA;AAwBA,MAAaC,YAAY;EAAzBC,YAAA;IACiB,KAAAC,IAAI,GAAW,OAAO;IACrB,KAAAC,WAAW,GAAiBL,eAAA,CAAAM,IAAI,CAACC,cAAc,EAAE;EAwDnE;EAtDQC,cAAcA,CAAA;IACpB,OAAO,IAAI,CAACH,WAAW;EACxB;EAEOI,QAAQA,CAACC,IAAkB;IACjC,IAAIA,IAAI,CAACN,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE;MAC5B,MAAM,IAAIO,KAAK,CAAC,yBAAyB,GAAGD,IAAI,CAACN,IAAI,CAAC;;IAGvD,IAAIM,IAAI,CAACE,OAAO,KAAK,CAAC,EAAE;MACvB,MAAMC,QAAQ,GAAuBH,IAA0B;MAC/D,OAAO;QACNI,WAAW,EAAE;UACZC,WAAW,EAAEF,QAAQ,CAACC,WAAW,CAACC,WAAW;UAC7CC,UAAU,EAAEH,QAAQ,CAACC,WAAW,CAACE;SACjC;QACDC,KAAK,EAAEJ,QAAQ,CAACI,KAAK;QACrBb,IAAI,EAAE;OACN;KACD,MAAM;MACN,MAAM,IAAIO,KAAK,CAAC,iCAAiCD,IAAI,CAACE,OAAO,EAAE,CAAC;;EAElE;EAEOM,MAAMA,CAACC,QAAsB;IACnC,MAAMT,IAAI,GAAuB;MAChCI,WAAW,EAAE;QACZC,WAAW,EAAEI,QAAQ,CAACL,WAAW,CAACC,WAAW;QAC7CC,UAAU,EAAEG,QAAQ,CAACL,WAAW,CAACE;OACjC;MACDC,KAAK,EAAEE,QAAQ,CAACF,KAAK;MACrBb,IAAI,EAAE,OAAO;MACbQ,OAAO,EAAE;KACT;IACD,OAAOF,IAAI;EACZ;EAEO,MAAMU,cAAcA,CAACD,QAAsB,EAAEE,IAAY;IAC/D,IAAI,CAACF,QAAQ,EAAE;MACd,MAAMR,KAAK,CAAC,2BAA2B,CAAC;KACxC,MAAM,IAAI,CAACQ,QAAQ,CAACL,WAAW,EAAE;MACjC,MAAMH,KAAK,CAAC,gDAAgD,CAAC;KAC7D,MAAM,IAAI,CAACQ,QAAQ,CAACL,WAAW,CAACE,UAAU,EAAE;MAC5C,MAAML,KAAK,CAAC,iDAAiD,CAAC;;IAG/D,MAAMW,IAAI,GAAS,IAAItB,eAAA,CAAAM,IAAI,CAACe,IAAI,CAAC;IACjCC,IAAI,CAACC,cAAc,CAAC,IAAI,CAAClB,WAAW,CAAC;IAErC,MAAMmB,WAAW,GAAe,IAAI,CAACnB,WAAW,CAACoB,gBAAgB,CAACN,QAAQ,CAACL,WAAW,CAACE,UAAU,CAACU,QAAQ,EAAE,CAAC;IAC7G,MAAMJ,IAAI,CAACK,aAAa,CAACH,WAAW,EAAEL,QAAQ,CAACL,WAAW,CAACC,WAAW,CAACW,QAAQ,EAAE,EAAEP,QAAQ,CAACF,KAAK,CAAC;IAElG,OAAOK,IAAI;EACZ;;AAzDDM,OAAA,CAAA1B,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}