{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HsmX509Provider = void 0;\nconst fabric_common_1 = require(\"fabric-common\");\n/**\n * Identity provider to handle X.509 identities where the private key is stored in a hardware security module.\n * @memberof module:fabric-network\n * @implements module:fabric-network.IdentityProvider\n */\nclass HsmX509Provider {\n  /**\n   * Create a provider instance.\n   * @param {module:fabric-network.HsmOptions} [options={}] Options specifying how to connect to the HSM. Mandatory\n   * unless this information is provided through external configuration.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.type = 'HSM-X.509';\n    // options.software must be set to false to enable HSM\n    const cryptoOptions = Object.assign({}, options, {\n      software: false\n    });\n    this.cryptoSuite = fabric_common_1.User.newCryptoSuite(cryptoOptions);\n  }\n  getCryptoSuite() {\n    return this.cryptoSuite;\n  }\n  fromJson(data) {\n    if (data.type !== this.type) {\n      throw new Error('Invalid identity type: ' + data.type);\n    }\n    if (data.version === 2) {\n      const x509Data = data;\n      return {\n        credentials: {\n          certificate: x509Data.credentials.certificate\n        },\n        mspId: x509Data.mspId,\n        type: 'HSM-X.509'\n      };\n    } else if (data.version === 1) {\n      const x509Data = data;\n      return {\n        credentials: {\n          certificate: x509Data.credentials.certificate\n        },\n        mspId: x509Data.mspId,\n        type: 'HSM-X.509'\n      };\n    } else {\n      throw new Error(`Unsupported identity version: ${data.version}`);\n    }\n  }\n  toJson(identity) {\n    const data = {\n      credentials: {\n        certificate: identity.credentials.certificate\n      },\n      mspId: identity.mspId,\n      type: 'HSM-X.509',\n      version: 1\n    };\n    return data;\n  }\n  async getUserContext(identity, name) {\n    if (!identity) {\n      throw Error('HSM X.509 identity is missing');\n    } else if (!identity.credentials) {\n      throw Error('HSM X.509 identity is missing the credential data.');\n    }\n    const user = new fabric_common_1.User(name);\n    user.setCryptoSuite(this.cryptoSuite);\n    const publicKey = await this.cryptoSuite.importKey(identity.credentials.certificate);\n    const privateKey = await this.cryptoSuite.getKey(publicKey.getSKI());\n    await user.setEnrollment(privateKey, identity.credentials.certificate, identity.mspId);\n    return user;\n  }\n}\nexports.HsmX509Provider = HsmX509Provider;","map":{"version":3,"names":["fabric_common_1","require","HsmX509Provider","constructor","options","arguments","length","undefined","type","cryptoOptions","Object","assign","software","cryptoSuite","User","newCryptoSuite","getCryptoSuite","fromJson","data","Error","version","x509Data","credentials","certificate","mspId","toJson","identity","getUserContext","name","user","setCryptoSuite","publicKey","importKey","privateKey","getKey","getSKI","setEnrollment","exports"],"sources":["../../../src/impl/wallet/hsmx509identity.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;AAMA,MAAAA,eAAA,GAAAC,OAAA;AAqCA;;;;;AAKA,MAAaC,eAAe;EAI3B;;;;;EAKAC,YAAA,EAA2C;IAAA,IAAxBC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsB,EAAE;IAR3B,KAAAG,IAAI,GAAW,WAAW;IASzC;IACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEP,OAAO,EAAE;MAACQ,QAAQ,EAAE;IAAK,CAAC,CAAC;IACnE,IAAI,CAACC,WAAW,GAAGb,eAAA,CAAAc,IAAI,CAACC,cAAc,CAACN,aAAa,CAAC;EACtD;EAEOO,cAAcA,CAAA;IACpB,OAAO,IAAI,CAACH,WAAW;EACxB;EAEOI,QAAQA,CAACC,IAAkB;IACjC,IAAIA,IAAI,CAACV,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE;MAC5B,MAAM,IAAIW,KAAK,CAAC,yBAAyB,GAAGD,IAAI,CAACV,IAAI,CAAC;;IAGvD,IAAIU,IAAI,CAACE,OAAO,KAAK,CAAC,EAAE;MACvB,MAAMC,QAAQ,GAA0BH,IAA6B;MACrE,OAAO;QACNI,WAAW,EAAE;UACZC,WAAW,EAAEF,QAAQ,CAACC,WAAW,CAACC;SAClC;QACDC,KAAK,EAAEH,QAAQ,CAACG,KAAK;QACrBhB,IAAI,EAAE;OACN;KACD,MAAM,IAAIU,IAAI,CAACE,OAAO,KAAK,CAAC,EAAE;MAC9B,MAAMC,QAAQ,GAA0BH,IAA6B;MACrE,OAAO;QACNI,WAAW,EAAE;UACZC,WAAW,EAAEF,QAAQ,CAACC,WAAW,CAACC;SAClC;QACDC,KAAK,EAAEH,QAAQ,CAACG,KAAK;QACrBhB,IAAI,EAAE;OACN;KACD,MAAM;MACN,MAAM,IAAIW,KAAK,CAAC,iCAAiCD,IAAI,CAACE,OAAO,EAAE,CAAC;;EAElE;EAEOK,MAAMA,CAACC,QAAyB;IACtC,MAAMR,IAAI,GAA0B;MACnCI,WAAW,EAAE;QACZC,WAAW,EAAEG,QAAQ,CAACJ,WAAW,CAACC;OAClC;MACDC,KAAK,EAAEE,QAAQ,CAACF,KAAK;MACrBhB,IAAI,EAAE,WAAW;MACjBY,OAAO,EAAE;KACT;IACD,OAAOF,IAAI;EACZ;EAEO,MAAMS,cAAcA,CAACD,QAAyB,EAAEE,IAAY;IAClE,IAAI,CAACF,QAAQ,EAAE;MACd,MAAMP,KAAK,CAAC,+BAA+B,CAAC;KAC5C,MAAM,IAAI,CAACO,QAAQ,CAACJ,WAAW,EAAE;MACjC,MAAMH,KAAK,CAAC,oDAAoD,CAAC;;IAElE,MAAMU,IAAI,GAAG,IAAI7B,eAAA,CAAAc,IAAI,CAACc,IAAI,CAAC;IAC3BC,IAAI,CAACC,cAAc,CAAC,IAAI,CAACjB,WAAW,CAAC;IAErC,MAAMkB,SAAS,GAAG,MAAM,IAAI,CAAClB,WAAW,CAACmB,SAAS,CAACN,QAAQ,CAACJ,WAAW,CAACC,WAAW,CAAC;IACpF,MAAMU,UAAU,GAAG,MAAM,IAAI,CAACpB,WAAW,CAACqB,MAAM,CAACH,SAAS,CAACI,MAAM,EAAE,CAAC;IACpE,MAAMN,IAAI,CAACO,aAAa,CAACH,UAAU,EAAEP,QAAQ,CAACJ,WAAW,CAACC,WAAW,EAAEG,QAAQ,CAACF,KAAK,CAAC;IAEtF,OAAOK,IAAI;EACZ;;AAzEDQ,OAAA,CAAAnC,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}