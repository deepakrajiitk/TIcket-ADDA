{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = void 0;\nconst identityproviderregistry_1 = require(\"./identityproviderregistry\");\nconst encoding = 'utf8';\n/**\n * Stores identity information for use when connecting a Gateway. The wallet is backed by a store that handles\n * persistence of identity information. Default implementations using various stores can be obtained using static\n * factory functions on [Wallets]{@link module:fabric-network.Wallets}.\n * @memberof module:fabric-network\n */\nclass Wallet {\n  /**\n   * Create a wallet instance backed by a given store. This can be used to create a wallet using your own\n   * custom store implementation.\n   * @param {module:fabric-network.WalletStore} store Backing store implementation.\n   */\n  constructor(store) {\n    this.providerRegistry = (0, identityproviderregistry_1.newDefaultProviderRegistry)();\n    this.store = store;\n  }\n  /**\n   * Put an identity in the wallet.\n   * @param {string} label Label used to identify the identity within the wallet.\n   * @param {module:fabric-network.Identity} identity Identity to store in the wallet.\n   * @returns {Promise<void>}\n   */\n  async put(label, identity) {\n    const json = this.providerRegistry.getProvider(identity.type).toJson(identity);\n    const jsonString = JSON.stringify(json);\n    const buffer = Buffer.from(jsonString, encoding);\n    await this.store.put(label, buffer);\n  }\n  /**\n   * Get an identity from the wallet. The actual properties of this identity object will vary depending on its type.\n   * @param label Label used to identify the identity within the wallet.\n   * @returns {Promise<module:fabric-network.Identity|undefined>} An identity if it exists; otherwise undefined.\n   */\n  async get(label) {\n    const buffer = await this.store.get(label);\n    if (!buffer) {\n      return undefined;\n    }\n    const jsonString = buffer.toString(encoding);\n    const json = JSON.parse(jsonString);\n    return this.providerRegistry.getProvider(json.type).fromJson(json);\n  }\n  /**\n   * Get the labels of all identities in the wallet.\n   * @returns {Promise<string[]>} Identity labels.\n   */\n  async list() {\n    return await this.store.list();\n  }\n  /**\n   * Remove an identity from the wallet.\n   * @param label Label used to identify the identity within the wallet.\n   * @returns {Promise<void>}\n   */\n  async remove(label) {\n    await this.store.remove(label);\n  }\n  /**\n   * Get the identity provider registry for this wallet. All identity types stored in the wallet must have a\n   * corresponding provider in the registry.\n   * @returns {module:fabric-network.IdentityProviderRegistry} An identity provider registry.\n   */\n  getProviderRegistry() {\n    return this.providerRegistry;\n  }\n}\nexports.Wallet = Wallet;","map":{"version":3,"names":["identityproviderregistry_1","require","encoding","Wallet","constructor","store","providerRegistry","newDefaultProviderRegistry","put","label","identity","json","getProvider","type","toJson","jsonString","JSON","stringify","buffer","Buffer","from","get","undefined","toString","parse","fromJson","list","remove","getProviderRegistry","exports"],"sources":["../../../src/impl/wallet/wallet.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;AAQA,MAAAA,0BAAA,GAAAC,OAAA;AAGA,MAAMC,QAAQ,GAAG,MAAM;AAEvB;;;;;;AAMA,MAAaC,MAAM;EAIlB;;;;;EAKAC,YAAmBC,KAAkB;IARpB,KAAAC,gBAAgB,GAAG,IAAAN,0BAAA,CAAAO,0BAA0B,GAAE;IAS/D,IAAI,CAACF,KAAK,GAAGA,KAAK;EACnB;EAEA;;;;;;EAMO,MAAMG,GAAGA,CAACC,KAAa,EAAEC,QAAkB;IACjD,MAAMC,IAAI,GAAG,IAAI,CAACL,gBAAgB,CAACM,WAAW,CAACF,QAAQ,CAACG,IAAI,CAAC,CAACC,MAAM,CAACJ,QAAQ,CAAC;IAC9E,MAAMK,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;IACvC,MAAMO,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACL,UAAU,EAAEb,QAAQ,CAAC;IAChD,MAAM,IAAI,CAACG,KAAK,CAACG,GAAG,CAACC,KAAK,EAAES,MAAM,CAAC;EACpC;EAEA;;;;;EAKO,MAAMG,GAAGA,CAACZ,KAAa;IAC7B,MAAMS,MAAM,GAAG,MAAM,IAAI,CAACb,KAAK,CAACgB,GAAG,CAACZ,KAAK,CAAC;IAC1C,IAAI,CAACS,MAAM,EAAE;MACZ,OAAOI,SAAS;;IAEjB,MAAMP,UAAU,GAAGG,MAAM,CAACK,QAAQ,CAACrB,QAAQ,CAAC;IAC5C,MAAMS,IAAI,GAAGK,IAAI,CAACQ,KAAK,CAACT,UAAU,CAAiB;IACnD,OAAO,IAAI,CAACT,gBAAgB,CAACM,WAAW,CAACD,IAAI,CAACE,IAAI,CAAC,CAACY,QAAQ,CAACd,IAAI,CAAC;EACnE;EAEA;;;;EAIO,MAAMe,IAAIA,CAAA;IAChB,OAAO,MAAM,IAAI,CAACrB,KAAK,CAACqB,IAAI,EAAE;EAC/B;EAEA;;;;;EAKO,MAAMC,MAAMA,CAAClB,KAAa;IAChC,MAAM,IAAI,CAACJ,KAAK,CAACsB,MAAM,CAAClB,KAAK,CAAC;EAC/B;EAEA;;;;;EAKOmB,mBAAmBA,CAAA;IACzB,OAAO,IAAI,CAACtB,gBAAgB;EAC7B;;AAjEDuB,OAAA,CAAA1B,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}