{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2018, 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractImpl = void 0;\nconst transaction_1 = require(\"./transaction\");\nconst contractlistenersession_1 = require(\"./impl/event/contractlistenersession\");\nconst listenersession_1 = require(\"./impl/event/listenersession\");\nconst Logger = __importStar(require(\"./logger\"));\nconst logger = Logger.getLogger('Contract');\nconst util = __importStar(require(\"util\"));\nconst gatewayutils_1 = require(\"./impl/gatewayutils\");\n/**\n * Ensure transaction name is a non-empty string.\n * @private\n * @param {string} name Transaction name.\n * @throws {Error} if the name is invalid.\n */\nfunction verifyTransactionName(name) {\n  if (typeof name !== 'string' || name.length === 0) {\n    const msg = util.format('Transaction name must be a non-empty string: %j', name);\n    logger.error('verifyTransactionName:', msg);\n    throw new Error(msg);\n  }\n}\n/**\n * Ensure that, if a namespace is defined, it is a non-empty string\n * @private\n * @param {string|undefined} namespace Transaction namespace.\n * @throws {Error} if the namespace is invalid.\n */\nfunction verifyNamespace(namespace) {\n  if (namespace && typeof namespace !== 'string') {\n    const msg = util.format('Namespace must be a non-empty string: %j', namespace);\n    logger.error('verifyNamespace:', msg);\n    throw new Error(msg);\n  }\n}\n/**\n * <p>Represents a smart contract (chaincode) instance in a network.\n * Applications should get a Contract instance using the\n * networks's [getContract]{@link module:fabric-network.Network#getContract} method.</p>\n *\n * <p>The Contract allows applications to:</p>\n * <ul>\n *   <li>Submit transactions that store state to the ledger using\n *       [submitTransaction]{@link module:fabric-network.Contract#submitTransaction}.</li>\n *   <li>Evaluate transactions that query state from the ledger using\n *       [evaluateTransaction]{@link module:fabric-network.Contract#evaluateTransaction}.</li>\n *   <li>Listen for new chaincode events and replay previous chaincode events emitted by the smart contract using\n *       [addContractListener]{@link module:fabric-network.Contract#addContractListener}.</li>\n * </ul>\n *\n * <p>If more control over transaction invocation is required, such as including transient data,\n * [createTransaction]{@link module:fabric-network.Contract#createTransaction} can be used to build a transaction\n * request that is submitted to or evaluated by the smart contract.</p>\n * @interface Contract\n * @memberof module:fabric-network\n */\n/**\n * Create an object representing a specific invocation of a transaction\n * function implemented by this contract, and provides more control over\n * the transaction invocation. A new transaction object <strong>must</strong>\n * be created for each transaction invocation.\n * @method Contract#createTransaction\n * @memberof module:fabric-network\n * @param {string} name Transaction function name.\n * @returns {module:fabric-network.Transaction} A transaction object.\n */\n/**\n * Deserialize a transaction from previously saved state.\n * @method Contract#deserializeTransaction\n * @memberof module:fabric-network\n * @param {Buffer} data Serialized transaction data.\n * @return {module:fabric-network.Transaction} A transaction object.\n */\n/**\n * Submit a transaction to the ledger. The transaction function <code>name</code>\n * will be evaluated on the endorsing peers and then submitted to the ordering service\n * for committing to the ledger.\n * This function is equivalent to calling <code>createTransaction(name).submit()</code>.\n * @method Contract#submitTransaction\n * @memberof module:fabric-network\n * @param {string} name Transaction function name.\n * @param {...string} [args] Transaction function arguments.\n * @returns {Buffer} Payload response from the transaction function.\n * @throws {module:fabric-network.TimeoutError} If the transaction was successfully submitted to the orderer but\n * timed out before a commit event was received from peers.\n */\n/**\n * Evaluate a transaction function and return its results.\n * The transaction function <code>name</code>\n * will be evaluated on the endorsing peers but the responses will not be sent to\n * the ordering service and hence will not be committed to the ledger.\n * This is used for querying the world state.\n * This function is equivalent to calling <code>createTransaction(name).evaluate()</code>.\n * @method Contract#evaluateTransaction\n * @memberof module:fabric-network\n * @param {string} name Transaction function name.\n * @param {...string} [args] Transaction function arguments.\n * @returns {Buffer} Payload response from the transaction function.\n */\n/**\n * Add a listener to receive all chaincode events emitted by the smart contract as part of successfully committed\n * transactions. The default is to listen for full contract events from the current block position.\n * @method Contract#addContractListener\n * @memberof module:fabric-network\n * @param {module:fabric-network.ContractListener} listener A contract listener callback function.\n * @param {module:fabric-network.ListenerOptions} [options] Listener options.\n * @returns {Promise<module:fabric-network.ContractListener>} The added listener.\n * @example\n * const listener: ContractListener = async (event) => {\n *     if (event.eventName === 'newOrder') {\n *         const details = event.payload.toString('utf8');\n *         // Run business process to handle orders\n *     }\n * };\n * contract.addContractListener(listener);\n */\n/**\n * Remove a previously added contract listener.\n * @method Contract#removeContractListener\n * @memberof module:fabric-network\n * @param {module:fabric-network.ContractListener} listener A contract listener callback function.\n */\n/**\n * Provide a Discovery Interest settings to help the peer's discovery service\n * build an endorsement plan. This chaincode Id will be include by default in\n * the list of discovery interests. If this contract's chaincode is in one or\n * more collections then use this method with this chaincode Id to change the\n * default discovery interest to include those collection names.\n * @method Contract#addDiscoveryInterest\n * @memberof module:fabric-network\n * @param {DiscoveryInterest} interest - These will be added to the existing discovery interests and used when\n * {@link module:fabric-network.Transaction#submit} is called.\n * @return {Contract} This Contract instance\n */\n/**\n * reset Discovery interest to default of this contracts chaincode name\n * and no collection names and no other chaincode names.\n * @method Contract#resetDiscoveryInterests\n * @memberof module:fabric-network\n * @return {Contract} This Contract instance\n */\n/**\n * Retrieve the Discovery Interest settings that will help the peer's\n * discovery service build an endorsement plan.\n * @method Contract#getDiscoveryInterests\n * @memberof module:fabric-network\n * @return {DiscoveryInterest[]} - An array of DiscoveryInterest\n */\n/**\n * A callback function that will be invoked when a block event is received.\n * @callback ContractListener\n * @memberof module:fabric-network\n * @async\n * @param {module:fabric-network.ContractEvent} event Contract event.\n * @returns {Promise<void>}\n */\nclass ContractImpl {\n  constructor(network, chaincodeId, namespace) {\n    this.contractListeners = new Map();\n    const method = `constructor[${namespace}]`;\n    logger.debug('%s - start', method);\n    verifyNamespace(namespace);\n    this.network = network;\n    this.chaincodeId = chaincodeId;\n    this.gateway = network.getGateway();\n    this.namespace = namespace;\n    this.contractListeners = new Map();\n    this.discoveryInterests = [{\n      name: chaincodeId\n    }];\n  }\n  createTransaction(name) {\n    verifyTransactionName(name);\n    const qualifiedName = this._getQualifiedName(name);\n    const transaction = new transaction_1.Transaction(this, qualifiedName);\n    return transaction;\n  }\n  deserializeTransaction(data) {\n    const state = JSON.parse(data.toString());\n    return new transaction_1.Transaction(this, state.name, state);\n  }\n  async submitTransaction(name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.createTransaction(name).submit(...args);\n  }\n  async evaluateTransaction(name) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    return this.createTransaction(name).evaluate(...args);\n  }\n  async addContractListener(listener, options) {\n    const sessionSupplier = () => Promise.resolve(new contractlistenersession_1.ContractListenerSession(listener, this.chaincodeId, this.network, options));\n    const contractListener = await (0, listenersession_1.addListener)(listener, this.contractListeners, sessionSupplier);\n    return contractListener;\n  }\n  removeContractListener(listener) {\n    (0, listenersession_1.removeListener)(listener, this.contractListeners);\n  }\n  /**\n   * Internal use\n   * Use this method to get the DiscoveryHandler to get the endorsements\n   * needed to commit a transaction.\n   * The first time this method is called, this contract's DiscoveryService\n   * instance will be setup.\n   * The service will make a discovery request to the same\n   * target as that used by the Network. The request will include this contract's\n   * discovery interests. This will enable the peer's discovery\n   * service to generate an endorsement plan based on the chaincode's\n   * endorsement policy, the collection configuration, and the current active\n   * peers.\n   * Note: It is assumed that the discovery interests will not\n   * change on successive calls. The handler's DiscoveryService will use the\n   * \"refreshAge\" discovery option after the first call to determine if the\n   * endorsement plan should be refreshed by a new call to the peer's\n   * discovery service.\n   * @private\n   * @return {DiscoveryHandler} The handler that will work with the discovery\n   * endorsement plan to send a proposal to be endorsed to the peers as described\n   * in the plan.\n   */\n  async getDiscoveryHandler() {\n    const method = `getDiscoveryHandler[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    // Contract is only using discovery if the network is too\n    if (!this.network.discoveryService) {\n      logger.debug('%s - not using discovery - return null handler', method);\n      return undefined;\n    }\n    // check if we have initialized this contract's discovery\n    if (!this.discoveryService) {\n      logger.debug('%s - setting up contract discovery', method);\n      this.discoveryService = this.newDiscoveryService(this.network.discoveryService.targets);\n    }\n    const service = await (0, gatewayutils_1.withTimeout)(this.discoveryService, 30000, 'Timed out waiting for discovery results');\n    if (!service.hasDiscoveryResults()) {\n      const error = new Error('Failed to retrieve discovery results');\n      logger.error('%s - %s', method, error);\n      throw error;\n    }\n    // The handler will have access to the endorsement plan fetched\n    // by the parent DiscoveryService instance.\n    logger.debug('%s - returning a new discovery service handler', method);\n    return service.newHandler();\n  }\n  async newDiscoveryService(targets) {\n    const method = `newDiscoveryService[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    const result = this.network.getChannel().newDiscoveryService(this.chaincodeId);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const identityContext = this.gateway.identityContext;\n    const asLocalhost = this.gateway.getOptions().discovery.asLocalhost;\n    logger.debug('%s - using discovery interest %j', method, this.discoveryInterests);\n    result.build(identityContext, {\n      interest: this.discoveryInterests\n    });\n    result.sign(identityContext);\n    // go get the endorsement plan from the peer's discovery service\n    // to be ready to be used by the transaction's submit\n    await result.send({\n      asLocalhost,\n      targets\n    });\n    logger.debug('%s - endorsement plan retrieved', method);\n    logger.debug('%s - exit', method);\n    return result;\n  }\n  addDiscoveryInterest(interest) {\n    const method = `addDiscoveryInterest[${this.chaincodeId}]`;\n    if (typeof interest !== 'object') {\n      throw Error('\"interest\" parameter must be a DiscoveryInterest object');\n    }\n    logger.debug('%s - adding %s', method, interest);\n    const existingIndex = this.discoveryInterests.findIndex(entry => entry.name === interest.name);\n    if (existingIndex >= 0) {\n      this.discoveryInterests[existingIndex] = interest;\n    } else {\n      this.discoveryInterests.push(interest);\n    }\n    return this;\n  }\n  resetDiscoveryInterests() {\n    const method = `resetDiscoveryInterest[${this.chaincodeId}]`;\n    logger.debug('%s - start', method);\n    this.discoveryInterests = [{\n      name: this.chaincodeId\n    }];\n    this.discoveryService = undefined;\n    return this;\n  }\n  getDiscoveryInterests() {\n    return this.discoveryInterests;\n  }\n  _getQualifiedName(name) {\n    return this.namespace ? `${this.namespace}:${name}` : name;\n  }\n}\nexports.ContractImpl = ContractImpl;","map":{"version":3,"names":["transaction_1","require","contractlistenersession_1","listenersession_1","Logger","__importStar","logger","getLogger","util","gatewayutils_1","verifyTransactionName","name","length","msg","format","error","Error","verifyNamespace","namespace","ContractImpl","constructor","network","chaincodeId","contractListeners","Map","method","debug","gateway","getGateway","discoveryInterests","createTransaction","qualifiedName","_getQualifiedName","transaction","Transaction","deserializeTransaction","data","state","JSON","parse","toString","submitTransaction","_len","arguments","args","Array","_key","submit","evaluateTransaction","_len2","_key2","evaluate","addContractListener","listener","options","sessionSupplier","Promise","resolve","ContractListenerSession","contractListener","addListener","removeContractListener","removeListener","getDiscoveryHandler","discoveryService","undefined","newDiscoveryService","targets","service","withTimeout","hasDiscoveryResults","newHandler","result","getChannel","identityContext","asLocalhost","getOptions","discovery","build","interest","sign","send","addDiscoveryInterest","existingIndex","findIndex","entry","push","resetDiscoveryInterests","getDiscoveryInterests","exports"],"sources":["../src/contract.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}