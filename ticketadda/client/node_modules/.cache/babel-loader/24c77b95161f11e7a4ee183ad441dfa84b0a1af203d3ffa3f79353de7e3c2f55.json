{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Query';\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst logger = getLogger(TYPE);\nconst Proposal = require('./Proposal.js');\n\n/**\n * @classdesc\n * This class represents a Query definition.\n * This class allows an application to contain all proposal attributes and\n * artifacts in one place during a query.\n *\n * @class\n */\nclass Query extends Proposal {\n  /**\n   * Construct a Proposal object.\n   *\n   * @param {string} chaincodeId - The chaincode this proposal will execute\n   * @param {Channel} channel - The channel of this proposal\n   * @returns {Proposal} The Proposal instance.\n   */\n  constructor() {\n    let chaincodeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('chaincodeId');\n    let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('channel');\n    super(chaincodeId, channel);\n    const method = `constructor[${chaincodeId}]`;\n    logger.debug('%s - start', method);\n    this.type = TYPE;\n    this._queryResults = [];\n  }\n\n  /**\n   * return a printable representation of this object\n   */\n  toString() {\n    return `Query: {chaincodeId: ${this.chaincodeId}, channel: ${this.channel.name}}`;\n  }\n\n  /**\n   * Send a signed transaction query proposal\n   * @override\n   * @param {SendProposalRequest} request options\n   * @returns {ProposalResponse} The results of sending\n   */\n  async send() {\n    let request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const return_results = await super.send(request);\n    return_results.responses.forEach(response => {\n      if (response.endorsement && response.response && response.response.payload) {\n        this._queryResults.push(response.response.payload);\n      }\n    });\n    return_results.queryResults = this._queryResults;\n    return return_results;\n  }\n}\nmodule.exports = Query;","map":{"version":3,"names":["TYPE","checkParameter","getLogger","require","logger","Proposal","Query","constructor","chaincodeId","arguments","length","undefined","channel","method","debug","type","_queryResults","toString","name","send","request","return_results","responses","forEach","response","endorsement","payload","push","queryResults","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Query.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Query';\n\nconst {checkParameter, getLogger} = require('./Utils.js');\nconst logger = getLogger(TYPE);\n\nconst Proposal = require('./Proposal.js');\n\n/**\n * @classdesc\n * This class represents a Query definition.\n * This class allows an application to contain all proposal attributes and\n * artifacts in one place during a query.\n *\n * @class\n */\nclass Query extends Proposal {\n\n\t/**\n\t * Construct a Proposal object.\n\t *\n\t * @param {string} chaincodeId - The chaincode this proposal will execute\n\t * @param {Channel} channel - The channel of this proposal\n\t * @returns {Proposal} The Proposal instance.\n\t */\n\tconstructor(chaincodeId = checkParameter('chaincodeId'), channel = checkParameter('channel')) {\n\t\tsuper(chaincodeId, channel);\n\n\t\tconst method = `constructor[${chaincodeId}]`;\n\t\tlogger.debug('%s - start', method);\n\t\tthis.type = TYPE;\n\t\tthis._queryResults = [];\n\t}\n\n\t/**\n\t * return a printable representation of this object\n\t */\n\ttoString() {\n\n\t\treturn `Query: {chaincodeId: ${this.chaincodeId}, channel: ${this.channel.name}}`;\n\t}\n\n\t/**\n\t * Send a signed transaction query proposal\n\t * @override\n\t * @param {SendProposalRequest} request options\n\t * @returns {ProposalResponse} The results of sending\n\t */\n\tasync send(request = {}) {\n\t\tconst return_results = await super.send(request);\n\t\treturn_results.responses.forEach((response) => {\n\t\t\tif (response.endorsement && response.response && response.response.payload) {\n\t\t\t\tthis._queryResults.push(response.response.payload);\n\t\t\t}\n\t\t});\n\t\treturn_results.queryResults = this._queryResults;\n\t\treturn return_results;\n\t}\n}\n\nmodule.exports = Query;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAG,OAAO;AAEpB,MAAM;EAACC,cAAc;EAAEC;AAAS,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AACzD,MAAMC,MAAM,GAAGF,SAAS,CAACF,IAAI,CAAC;AAE9B,MAAMK,QAAQ,GAAGF,OAAO,CAAC,eAAe,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,KAAK,SAASD,QAAQ,CAAC;EAE5B;AACD;AACA;AACA;AACA;AACA;AACA;EACCE,WAAWA,CAAA,EAAmF;IAAA,IAAlFC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,cAAc,CAAC,aAAa,CAAC;IAAA,IAAEW,OAAO,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,cAAc,CAAC,SAAS,CAAC;IAC3F,KAAK,CAACO,WAAW,EAAEI,OAAO,CAAC;IAE3B,MAAMC,MAAM,GAAI,eAAcL,WAAY,GAAE;IAC5CJ,MAAM,CAACU,KAAK,CAAC,YAAY,EAAED,MAAM,CAAC;IAClC,IAAI,CAACE,IAAI,GAAGf,IAAI;IAChB,IAAI,CAACgB,aAAa,GAAG,EAAE;EACxB;;EAEA;AACD;AACA;EACCC,QAAQA,CAAA,EAAG;IAEV,OAAQ,wBAAuB,IAAI,CAACT,WAAY,cAAa,IAAI,CAACI,OAAO,CAACM,IAAK,GAAE;EAClF;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC,MAAMC,IAAIA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAX,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACtB,MAAMY,cAAc,GAAG,MAAM,KAAK,CAACF,IAAI,CAACC,OAAO,CAAC;IAChDC,cAAc,CAACC,SAAS,CAACC,OAAO,CAAEC,QAAQ,IAAK;MAC9C,IAAIA,QAAQ,CAACC,WAAW,IAAID,QAAQ,CAACA,QAAQ,IAAIA,QAAQ,CAACA,QAAQ,CAACE,OAAO,EAAE;QAC3E,IAAI,CAACV,aAAa,CAACW,IAAI,CAACH,QAAQ,CAACA,QAAQ,CAACE,OAAO,CAAC;MACnD;IACD,CAAC,CAAC;IACFL,cAAc,CAACO,YAAY,GAAG,IAAI,CAACZ,aAAa;IAChD,OAAOK,cAAc;EACtB;AACD;AAEAQ,MAAM,CAACC,OAAO,GAAGxB,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}