{"ast":null,"code":"/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('../common');\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\nvar Memory = exports.Memory = function (options) {\n  options = options || {};\n  this.type = 'memory';\n  this.store = {};\n  this.mtimes = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n  this.parseValues = options.parseValues || false;\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n};\n\n//\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\nMemory.prototype.get = function (key) {\n  var target = this.store,\n    path = common.path(key, this.logicalSeparator);\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 0) {\n    key = path.shift();\n    if (target && typeof target !== 'string' && Object.hasOwnProperty.call(target, key)) {\n      target = target[key];\n      continue;\n    }\n    return undefined;\n  }\n  return target;\n};\n\n//\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n  var target = this.store,\n    path = common.path(key, this.logicalSeparator);\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    } else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  }\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key] || typeof target[key] !== 'object' || !Object.hasOwnProperty.call(target, key)) {\n      target[key] = {};\n    }\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n  if (this.parseValues) {\n    value = common.parseValues.call(common, value);\n  }\n  target[key] = value;\n  return true;\n};\n\n//\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n  var target = this.store,\n    value = target,\n    path = common.path(key, this.logicalSeparator);\n\n  //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n  delete this.mtimes[key];\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n    target = value;\n  }\n\n  // Delete the key from the nested JSON structure\n  key = path[i];\n  delete target[key];\n  return true;\n};\n\n//\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n  var self = this,\n    target = this.store,\n    path = common.path(key, this.logicalSeparator),\n    fullKey = key;\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key]) {\n      target[key] = {};\n    }\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n\n  //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n};\n\n//\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n  this.mtimes = {};\n  this.store = {};\n  return true;\n};\n\n//\n// ### function loadSync\n// Returns the store managed by this instance\n//\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};","map":{"version":3,"names":["common","require","Memory","exports","options","type","store","mtimes","readOnly","loadFrom","logicalSeparator","parseValues","loadFilesSync","prototype","get","key","target","path","length","shift","Object","hasOwnProperty","call","undefined","set","value","reset","Date","now","clear","i","merge","Array","isArray","self","fullKey","keys","every","nested","keyed","loadSync"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/nconf/lib/nconf/stores/memory.js"],"sourcesContent":["/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('../common');\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\nvar Memory = exports.Memory = function (options) {\n  options       = options || {};\n  this.type     = 'memory';\n  this.store    = {};\n  this.mtimes   = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n  this.parseValues = options.parseValues || false;\n\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n};\n\n//\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\nMemory.prototype.get = function (key) {\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 0) {\n    key = path.shift();\n    if (target && typeof target !== 'string' && Object.hasOwnProperty.call(target, key)) {\n      target = target[key];\n      continue;\n    }\n    return undefined;\n  }\n\n  return target;\n};\n\n//\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    }\n    else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  }\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key] || typeof target[key] !== 'object' || !Object.hasOwnProperty.call(target, key)) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n  if (this.parseValues) {\n    value = common.parseValues.call(common, value);\n  }\n  target[key] = value;\n  return true;\n};\n\n//\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      value  = target,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n  delete this.mtimes[key];\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n    target = value;\n  }\n\n  // Delete the key from the nested JSON structure\n  key = path[i];\n  delete target[key];\n  return true;\n};\n\n//\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n\n  var self    = this,\n      target  = this.store,\n      path    = common.path(key, this.logicalSeparator),\n      fullKey = key;\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key]) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n\n  //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n};\n\n//\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n\n  this.mtimes = {};\n  this.store  = {};\n  return true;\n};\n\n//\n// ### function loadSync\n// Returns the store managed by this instance\n//\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}