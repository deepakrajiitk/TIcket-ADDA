{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Committer';\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst ServiceEndpoint = require('./ServiceEndpoint');\nconst fabproto6 = require('fabric-protos');\nconst logger = getLogger(TYPE);\n\n/**\n * @typedef {Error} SYSTEM TIMEOUT The Error message string that indicates that\n *  the request operation has timed out due to a system issue. This will\n *  indicate that the issue is local rather than remote. If there is\n *  an issue with the remote node a 'REQUEST TIMEOUT' error message\n *  will be returned.\n *  The operation will only use one timer for both types of timeouts.\n *  The timer will start running as the operation begins. If the timer\n *  expires before the local instance is able to make the outbound\n *  request then 'SYSTEM TIMEOUT' error will be returned. If the local\n *  instance is able to make the outbound request and the timer expires\n *  before the remote node responds then the 'REQUEST TIMEOUT' is\n *  returned. The timer is controlled by the 'requestTimeout' setting\n *  or passed on a call that makes an outbound request\n *  @example 'client.setConfigSetting('requestTimeout', 3000)'\n *  @example 'channel.sendTranaction(request, 3000)'\n */\n\n/**\n * @typedef {Error} REQUEST TIMEOUT The Error message string that indicates that\n *  the request operation has timed out due to a remote node issue.\n *  If there is an issue with the local system a 'SYSTEM TIMEOUT'\n *  error message will be returned.\n *  The operation will only use one timer for both types of timeouts.\n *  The timer will start running as the operation begins. If the timer\n *  expires before the local instance is able to make the outbound\n *  request then 'SYSTEM TIMEOUT' error will be returned. If the local\n *  instance is able to make the outbound request and the timer expires\n *  before the remote node responds then the 'REQUEST TIMEOUT' is\n *  returned. The timer is controlled by the 'requestTimeout' setting\n *  or passed on a call that makes an outbound request\n *  @example 'client.setConfigSetting('requestTimeout', 3000)'\n *  @example 'channel.sendTranaction(request, 3000)'\n */\n\n/**\n * The Committer class encapsulates the client capabilities to interact with\n * an Committer node in the target blockchain network. The committer node exposes\n * two APIs: broadcast() and deliver(). Both are streaming APIs so there's\n * a persistent grpc streaming connection between the client and the committer\n * where messages are exchanged in both directions. The broadcast() API is\n * for sending transactions to the committer for processing. The deliver() API\n * is for asking the committer for information such as channel configurations.\n *\n * @class\n * @extends ServiceEndpoint\n */\nclass Committer extends ServiceEndpoint {\n  /**\n   * Constructs an Committer object with the given name. An committer object\n   * encapsulates the properties of an committer node and the interactions with it via\n   * the grpc stream API. Committer objects are used by the {@link Client} objects to broadcast\n   * requests for creating and updating channels. They are also used by the {@link Channel}\n   * objects to broadcast requests for ordering transactions.\n   *\n   * @param {string} name - The name of this peer\n   * @param {Client} client - The client instance\n   * @param {string} mspid - The mspid (organization) of this peer\n   * @returns {Committer} The Committer instance.\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('name');\n    let client = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkParameter('client');\n    let mspid = arguments.length > 2 ? arguments[2] : undefined;\n    logger.debug(`${TYPE}.constructor[${name}] - start `);\n    super(name, client);\n    this.mspid = mspid;\n    this.type = TYPE;\n    this.serviceClass = fabproto6.services.orderer.AtomicBroadcast;\n  }\n\n  /**\n   * @typedef {Object} BroadcastResponse\n   * @property {string} status - Value is 'SUCCESS' or a descriptive error string\n   * @property {string} info - Optional. Additional information about the status\n   */\n\n  /**\n   * Send a Broadcast message to the committer service.\n   *\n   * @param {byte[]} envelope - Byte data to be included in the broadcast.\n   *  This must be a protobuf encoded byte array of the\n   *  [common.Envelope]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/common/common.proto#L132}\n   *  that contains either a [ConfigUpdateEnvelope]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/common/configtx.proto#L70}\n   *  or a [Transaction]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/peer/transaction.proto#L70}\n   *  in the <code>payload.data</code> property of the envelope.\n   * @param {Number} timeout - A number indicating milliseconds to wait on the\n   *  response before rejecting the promise with a timeout error. This\n   *  overrides the request-timeout config connection setting of this instance.\n   * @returns {Promise} A Promise for a {@link BroadcastResponse} object\n   * @throws {Error}\n   */\n  sendBroadcast(envelope, timeout) {\n    const method = 'sendBroadcast';\n    logger.debug(`${method} - start`);\n\n    // Send the envelope to the committer via grpc\n    return new Promise((resolve, reject) => {\n      if (!envelope) {\n        checkParameter('envelope');\n      }\n      if (this.connected === false) {\n        throw Error(`Broadcast Client ${this.name} ${this.endpoint.url} is not connected`);\n      }\n      let rto = this.options.requestTimeout;\n      if (typeof timeout === 'number') {\n        rto = timeout;\n      }\n      const broadcast = this.service.broadcast();\n      // if it timeouts before the send of the envelope completes\n      // we will get a SYSTEM TIMEOUT\n      let error_msg = 'SYSTEM TIMEOUT';\n      const broadcast_timeout = setTimeout(() => {\n        logger.error(`${this.name} - ${method} timed out after:${rto}`);\n        return reject(new Error(error_msg));\n      }, rto);\n      broadcast.on('data', response => {\n        logger.debug('%s - on data response: %j', method, response);\n        clearTimeout(broadcast_timeout);\n        if (response && response.info) {\n          logger.debug(`${method} - response info :: ${response.info}`);\n        }\n        if (response && response.status) {\n          logger.debug(`${method} - response status ${response.status}`);\n          // convert to string enum (depending on how the protobuf code has been gennerated)\n          if (typeof response.status === 'number') {\n            response.status = fabproto6.common.Status[response.status];\n          }\n          logger.debug('%s - on data response: %j', method, response);\n          return resolve(response);\n        } else {\n          logger.error(`${this.name} ERROR - ${method} reject with invalid response from the committer`);\n          return reject(new Error('SYSTEM ERROR'));\n        }\n      });\n      broadcast.on('end', () => {\n        logger.debug(`${method} - on end:`);\n        clearTimeout(broadcast_timeout);\n        broadcast.cancel();\n      });\n      broadcast.on('error', err => {\n        clearTimeout(broadcast_timeout);\n        if (err && err.code) {\n          if (err.code === 14) {\n            logger.error(`${method} - ${this.name} SERVICE UNAVAILABLE on error code: ${err.code}`);\n            return reject(new Error('SERVICE UNAVAILABLE'));\n          }\n        }\n        logger.error(`${method} - ${this.name} on error: ${JSON.stringify(err.stack ? err.stack : err)}`);\n        return reject(err);\n      });\n      broadcast.write(envelope);\n      broadcast.end();\n      // the send of envelope has completed\n      // if it timeouts after this point we will get a REQUEST TIMEOUT\n      error_msg = 'REQUEST TIMEOUT';\n      logger.debug(`${method} - sent message`);\n    });\n  }\n}\nmodule.exports = Committer;","map":{"version":3,"names":["TYPE","checkParameter","getLogger","require","ServiceEndpoint","fabproto6","logger","Committer","constructor","name","arguments","length","undefined","client","mspid","debug","type","serviceClass","services","orderer","AtomicBroadcast","sendBroadcast","envelope","timeout","method","Promise","resolve","reject","connected","Error","endpoint","url","rto","options","requestTimeout","broadcast","service","error_msg","broadcast_timeout","setTimeout","error","on","response","clearTimeout","info","status","common","Status","cancel","err","code","JSON","stringify","stack","write","end","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Committer.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Committer';\n\nconst {checkParameter, getLogger} = require('./Utils.js');\nconst ServiceEndpoint = require('./ServiceEndpoint');\n\nconst fabproto6 = require('fabric-protos');\nconst logger = getLogger(TYPE);\n\n/**\n * @typedef {Error} SYSTEM TIMEOUT The Error message string that indicates that\n *  the request operation has timed out due to a system issue. This will\n *  indicate that the issue is local rather than remote. If there is\n *  an issue with the remote node a 'REQUEST TIMEOUT' error message\n *  will be returned.\n *  The operation will only use one timer for both types of timeouts.\n *  The timer will start running as the operation begins. If the timer\n *  expires before the local instance is able to make the outbound\n *  request then 'SYSTEM TIMEOUT' error will be returned. If the local\n *  instance is able to make the outbound request and the timer expires\n *  before the remote node responds then the 'REQUEST TIMEOUT' is\n *  returned. The timer is controlled by the 'requestTimeout' setting\n *  or passed on a call that makes an outbound request\n *  @example 'client.setConfigSetting('requestTimeout', 3000)'\n *  @example 'channel.sendTranaction(request, 3000)'\n */\n\n/**\n * @typedef {Error} REQUEST TIMEOUT The Error message string that indicates that\n *  the request operation has timed out due to a remote node issue.\n *  If there is an issue with the local system a 'SYSTEM TIMEOUT'\n *  error message will be returned.\n *  The operation will only use one timer for both types of timeouts.\n *  The timer will start running as the operation begins. If the timer\n *  expires before the local instance is able to make the outbound\n *  request then 'SYSTEM TIMEOUT' error will be returned. If the local\n *  instance is able to make the outbound request and the timer expires\n *  before the remote node responds then the 'REQUEST TIMEOUT' is\n *  returned. The timer is controlled by the 'requestTimeout' setting\n *  or passed on a call that makes an outbound request\n *  @example 'client.setConfigSetting('requestTimeout', 3000)'\n *  @example 'channel.sendTranaction(request, 3000)'\n */\n\n/**\n * The Committer class encapsulates the client capabilities to interact with\n * an Committer node in the target blockchain network. The committer node exposes\n * two APIs: broadcast() and deliver(). Both are streaming APIs so there's\n * a persistent grpc streaming connection between the client and the committer\n * where messages are exchanged in both directions. The broadcast() API is\n * for sending transactions to the committer for processing. The deliver() API\n * is for asking the committer for information such as channel configurations.\n *\n * @class\n * @extends ServiceEndpoint\n */\nclass Committer extends ServiceEndpoint {\n\n\t/**\n\t * Constructs an Committer object with the given name. An committer object\n\t * encapsulates the properties of an committer node and the interactions with it via\n\t * the grpc stream API. Committer objects are used by the {@link Client} objects to broadcast\n\t * requests for creating and updating channels. They are also used by the {@link Channel}\n\t * objects to broadcast requests for ordering transactions.\n\t *\n\t * @param {string} name - The name of this peer\n\t * @param {Client} client - The client instance\n\t * @param {string} mspid - The mspid (organization) of this peer\n\t * @returns {Committer} The Committer instance.\n\t */\n\tconstructor(name = checkParameter('name'), client = checkParameter('client'), mspid) {\n\t\tlogger.debug(`${TYPE}.constructor[${name}] - start `);\n\t\tsuper(name, client);\n\t\tthis.mspid = mspid;\n\t\tthis.type = TYPE;\n\n\t\tthis.serviceClass = fabproto6.services.orderer.AtomicBroadcast;\n\t}\n\n\t/**\n\t * @typedef {Object} BroadcastResponse\n\t * @property {string} status - Value is 'SUCCESS' or a descriptive error string\n\t * @property {string} info - Optional. Additional information about the status\n\t */\n\n\t/**\n\t * Send a Broadcast message to the committer service.\n\t *\n\t * @param {byte[]} envelope - Byte data to be included in the broadcast.\n\t *  This must be a protobuf encoded byte array of the\n\t *  [common.Envelope]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/common/common.proto#L132}\n\t *  that contains either a [ConfigUpdateEnvelope]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/common/configtx.proto#L70}\n\t *  or a [Transaction]{@link https://github.com/hyperledger/fabric/blob/v1.0.0/protos/peer/transaction.proto#L70}\n\t *  in the <code>payload.data</code> property of the envelope.\n\t * @param {Number} timeout - A number indicating milliseconds to wait on the\n\t *  response before rejecting the promise with a timeout error. This\n\t *  overrides the request-timeout config connection setting of this instance.\n\t * @returns {Promise} A Promise for a {@link BroadcastResponse} object\n\t * @throws {Error}\n\t */\n\tsendBroadcast(envelope, timeout) {\n\t\tconst method = 'sendBroadcast';\n\t\tlogger.debug(`${method} - start`);\n\n\t\t// Send the envelope to the committer via grpc\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!envelope) {\n\t\t\t\tcheckParameter('envelope');\n\t\t\t}\n\t\t\tif (this.connected === false) {\n\t\t\t\tthrow Error(`Broadcast Client ${this.name} ${this.endpoint.url} is not connected`);\n\t\t\t}\n\t\t\tlet rto = this.options.requestTimeout;\n\t\t\tif (typeof timeout === 'number') {\n\t\t\t\trto = timeout;\n\t\t\t}\n\n\t\t\tconst broadcast = this.service.broadcast();\n\t\t\t// if it timeouts before the send of the envelope completes\n\t\t\t// we will get a SYSTEM TIMEOUT\n\t\t\tlet error_msg = 'SYSTEM TIMEOUT';\n\n\t\t\tconst broadcast_timeout = setTimeout(() => {\n\t\t\t\tlogger.error(`${this.name} - ${method} timed out after:${rto}`);\n\t\t\t\treturn reject(new Error(error_msg));\n\t\t\t}, rto);\n\n\t\t\tbroadcast.on('data', (response) => {\n\t\t\t\tlogger.debug('%s - on data response: %j', method, response);\n\t\t\t\tclearTimeout(broadcast_timeout);\n\t\t\t\tif (response && response.info) {\n\t\t\t\t\tlogger.debug(`${method} - response info :: ${response.info}`);\n\t\t\t\t}\n\t\t\t\tif (response && response.status) {\n\t\t\t\t\tlogger.debug(`${method} - response status ${response.status}`);\n\t\t\t\t\t// convert to string enum (depending on how the protobuf code has been gennerated)\n\t\t\t\t\tif (typeof response.status === 'number') {\n\t\t\t\t\t\tresponse.status = fabproto6.common.Status[response.status];\n\t\t\t\t\t}\n\t\t\t\t\tlogger.debug('%s - on data response: %j', method, response);\n\n\t\t\t\t\treturn resolve(response);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(`${this.name} ERROR - ${method} reject with invalid response from the committer`);\n\t\t\t\t\treturn reject(new Error('SYSTEM ERROR'));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tbroadcast.on('end', () => {\n\t\t\t\tlogger.debug(`${method} - on end:`);\n\t\t\t\tclearTimeout(broadcast_timeout);\n\t\t\t\tbroadcast.cancel();\n\t\t\t});\n\n\t\t\tbroadcast.on('error', (err) => {\n\t\t\t\tclearTimeout(broadcast_timeout);\n\t\t\t\tif (err && err.code) {\n\t\t\t\t\tif (err.code === 14) {\n\t\t\t\t\t\tlogger.error(`${method} - ${this.name} SERVICE UNAVAILABLE on error code: ${err.code}`);\n\t\t\t\t\t\treturn reject(new Error('SERVICE UNAVAILABLE'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlogger.error(`${method} - ${this.name} on error: ${JSON.stringify(err.stack ? err.stack : err)}`);\n\t\t\t\treturn reject(err);\n\t\t\t});\n\n\t\t\tbroadcast.write(envelope);\n\t\t\tbroadcast.end();\n\t\t\t// the send of envelope has completed\n\t\t\t// if it timeouts after this point we will get a REQUEST TIMEOUT\n\t\t\terror_msg = 'REQUEST TIMEOUT';\n\t\t\tlogger.debug(`${method} - sent message`);\n\t\t});\n\t}\n}\n\nmodule.exports = Committer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}