{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionEventHandler = void 0;\nconst timeouterror_1 = require(\"../../errors/timeouterror\");\nconst transactionerror_1 = require(\"../../errors/transactionerror\");\nconst Logger = __importStar(require(\"../../logger\"));\nconst logger = Logger.getLogger('TransactionEventHandler');\n/**\n * Handles events for a given transaction. Used to wait for a submitted transaction to be successfully commited to\n * the ledger.\n * Delegates to an event strategy to decide whether events or errors received should be interpreted as success or\n * failure of a transaction.\n * @private\n */\nclass TransactionEventHandler {\n  /**\n   * Constructor.\n   * @private\n   * @param {Transaction} transaction - Transaction object.\n   * @param {Object} strategy - Event strategy implementation.\n   * @param {TransactionOptions} [options] Additional options.\n   */\n  constructor(transactionId, network, strategy) {\n    this.listener = this.eventCallback.bind(this);\n    this.strategySuccessCallback = this.strategySuccess.bind(this);\n    this.strategyFailCallback = this.strategyFail.bind(this);\n    const method = 'constructor';\n    this.transactionId = transactionId;\n    this.network = network;\n    this.strategy = strategy;\n    const defaultOptions = {\n      commitTimeout: 30\n    };\n    this.options = Object.assign(defaultOptions, network.getGateway().getOptions().eventHandlerOptions);\n    logger.debug('%s: transactionId = %s, options = %j', method, this.transactionId, this.options);\n    this.peers = strategy.getPeers();\n    this.unrespondedPeers = new Set(this.peers);\n    this.notificationPromise = new Promise(resolve => {\n      this.resolveNotificationPromise = resolve;\n    });\n  }\n  /**\n   * Called to initiate listening for transaction events.\n   */\n  async startListening() {\n    const method = 'startListening';\n    if (this.peers && this.peers.length > 0) {\n      logger.debug('%s - have eventService list - start monitoring', method);\n      this.setListenTimeout();\n      await this.network.addCommitListener(this.listener, this.peers, this.transactionId);\n    } else {\n      logger.error('%s - No event services', method);\n      // shutdown the monitoring\n      this.resolveNotificationPromise();\n    }\n  }\n  /**\n   * Wait until enough events have been received from the event services to satisfy the event handling strategy.\n   * @throws {Error} if the transaction commit is not successful within the timeout period.\n   */\n  async waitForEvents() {\n    logger.debug('waitForEvents start');\n    const err = await this.notificationPromise;\n    if (err) {\n      throw err;\n    }\n    logger.debug('waitForEvents end');\n  }\n  /**\n   * Cancel listening for events.\n   */\n  cancelListening() {\n    logger.debug('cancelListening called');\n    if (this.timeoutHandler) {\n      clearTimeout(this.timeoutHandler);\n    }\n    this.network.removeCommitListener(this.listener);\n  }\n  eventCallback(error, event) {\n    if (event && !event.isValid) {\n      const message = `Commit of transaction ${this.transactionId} failed on peer ${event.peer.name} with status ${event.status}`;\n      this.strategyFail(new transactionerror_1.TransactionError({\n        message,\n        transactionId: event.transactionId,\n        transactionCode: event.status\n      }));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const peer = (error === null || error === void 0 ? void 0 : error.peer) || event.peer;\n    if (!this.unrespondedPeers.delete(peer)) {\n      // Already seen a response from this peer\n      return;\n    }\n    if (error) {\n      this.strategy.errorReceived(this.strategySuccessCallback, this.strategyFailCallback);\n    } else {\n      this.strategy.eventReceived(this.strategySuccessCallback, this.strategyFailCallback);\n    }\n  }\n  setListenTimeout() {\n    const method = 'setListenTimeout';\n    if (typeof this.options.commitTimeout !== 'number' || this.options.commitTimeout <= 0) {\n      logger.debug('%s - no commit timeout', method);\n      return;\n    }\n    logger.debug('%s setTimeout(%s) in seconds for transaction %s', method, this.options.commitTimeout, this.transactionId);\n    this.timeoutHandler = setTimeout(() => {\n      this.timeoutFail();\n      logger.error('%s - event handler timed out', method);\n    }, this.options.commitTimeout * 1000);\n    logger.debug('%s - end', method);\n  }\n  timeoutFail() {\n    const unrespondedPeerNames = Array.from(this.unrespondedPeers).map(peer => peer.name).join(', ');\n    const errorInfo = {\n      message: `Event strategy not satisfied within the timeout period of ${String(this.options.commitTimeout)} seconds. No response received from peers:  ${unrespondedPeerNames}`,\n      transactionId: this.transactionId\n    };\n    const error = new timeouterror_1.TimeoutError(errorInfo);\n    this.strategyFail(error);\n  }\n  /**\n   * Callback for the strategy to indicate successful commit of the transaction.\n   * @private\n   */\n  strategySuccess() {\n    logger.debug('strategySuccess: commit success for transaction %j', this.transactionId);\n    this.cancelListening();\n    this.resolveNotificationPromise();\n  }\n  /**\n   * Callback for the strategy to indicate failure of the transaction commit.\n   * @private\n   * @param {Error} error Reason for failure.\n   */\n  strategyFail(error) {\n    logger.warn('strategyFail: commit failure for transaction %j: %s', this.transactionId, error);\n    this.cancelListening();\n    this.resolveNotificationPromise(error);\n  }\n}\nexports.TransactionEventHandler = TransactionEventHandler;","map":{"version":3,"names":["timeouterror_1","require","transactionerror_1","Logger","__importStar","logger","getLogger","TransactionEventHandler","constructor","transactionId","network","strategy","listener","eventCallback","bind","strategySuccessCallback","strategySuccess","strategyFailCallback","strategyFail","method","defaultOptions","commitTimeout","options","Object","assign","getGateway","getOptions","eventHandlerOptions","debug","peers","getPeers","unrespondedPeers","Set","notificationPromise","Promise","resolve","resolveNotificationPromise","startListening","length","setListenTimeout","addCommitListener","error","waitForEvents","err","cancelListening","timeoutHandler","clearTimeout","removeCommitListener","event","isValid","message","peer","name","status","TransactionError","transactionCode","delete","errorReceived","eventReceived","setTimeout","timeoutFail","unrespondedPeerNames","Array","from","map","join","errorInfo","String","TimeoutError","warn","exports"],"sources":["../../../src/impl/event/transactioneventhandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}