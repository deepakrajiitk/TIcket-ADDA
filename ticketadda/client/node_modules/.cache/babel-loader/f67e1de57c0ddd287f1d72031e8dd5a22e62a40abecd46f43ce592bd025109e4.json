{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Http2CallStream = exports.InterceptingListenerImpl = exports.isInterceptingListener = void 0;\nconst http2 = require(\"http2\");\nconst os = require(\"os\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst stream_decoder_1 = require(\"./stream-decoder\");\nconst logging = require(\"./logging\");\nconst constants_2 = require(\"./constants\");\nconst TRACER_NAME = 'call_stream';\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n  NGHTTP2_CANCEL\n} = http2.constants;\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */\nfunction getSystemErrorName(errno) {\n  for (const [name, num] of Object.entries(os.constants.errno)) {\n    if (num === errno) {\n      return name;\n    }\n  }\n  return 'Unknown system error ' + errno;\n}\nfunction getMinDeadline(deadlineList) {\n  let minValue = Infinity;\n  for (const deadline of deadlineList) {\n    const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\n    if (deadlineMsecs < minValue) {\n      minValue = deadlineMsecs;\n    }\n  }\n  return minValue;\n}\nfunction isInterceptingListener(listener) {\n  return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\nexports.isInterceptingListener = isInterceptingListener;\nclass InterceptingListenerImpl {\n  constructor(listener, nextListener) {\n    this.listener = listener;\n    this.nextListener = nextListener;\n    this.processingMetadata = false;\n    this.hasPendingMessage = false;\n    this.processingMessage = false;\n    this.pendingStatus = null;\n  }\n  processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n  processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n  onReceiveMetadata(metadata) {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, metadata => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message) {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, msg => {\n      this.processingMessage = false;\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n  onReceiveStatus(status) {\n    this.listener.onReceiveStatus(status, processedStatus => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n}\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\nclass Http2CallStream {\n  constructor(methodName, channel, options, filterStackFactory, channelCallCredentials, callNumber) {\n    this.methodName = methodName;\n    this.channel = channel;\n    this.options = options;\n    this.channelCallCredentials = channelCallCredentials;\n    this.callNumber = callNumber;\n    this.http2Stream = null;\n    this.pendingRead = false;\n    this.isWriteFilterPending = false;\n    this.pendingWrite = null;\n    this.pendingWriteCallback = null;\n    this.writesClosed = false;\n    this.decoder = new stream_decoder_1.StreamDecoder();\n    this.isReadFilterPending = false;\n    this.canPush = false;\n    /**\n     * Indicates that an 'end' event has come from the http2 stream, so there\n     * will be no more data events.\n     */\n    this.readsClosed = false;\n    this.statusOutput = false;\n    this.unpushedReadMessages = [];\n    this.unfilteredReadMessages = [];\n    // Status code mapped from :status. To be used if grpc-status is not received\n    this.mappedStatusCode = constants_1.Status.UNKNOWN;\n    // This is populated (non-null) if and only if the call has ended\n    this.finalStatus = null;\n    this.subchannel = null;\n    this.listener = null;\n    this.internalError = null;\n    this.configDeadline = Infinity;\n    this.statusWatchers = [];\n    this.streamEndWatchers = [];\n    this.callStatsTracker = null;\n    this.filterStack = filterStackFactory.createFilter(this);\n    this.credentials = channelCallCredentials;\n    this.disconnectListener = () => {\n      this.endCall({\n        code: constants_1.Status.UNAVAILABLE,\n        details: 'Connection dropped',\n        metadata: new metadata_1.Metadata()\n      });\n    };\n    if (this.options.parentCall && this.options.flags & constants_1.Propagate.CANCELLATION) {\n      this.options.parentCall.on('cancelled', () => {\n        this.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled by parent call');\n      });\n    }\n  }\n  outputStatus() {\n    var _a;\n    /* Precondition: this.finalStatus !== null */\n    if (this.listener && !this.statusOutput) {\n      this.statusOutput = true;\n      const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);\n      this.trace('ended with status: code=' + filteredStatus.code + ' details=\"' + filteredStatus.details + '\"');\n      this.statusWatchers.forEach(watcher => watcher(filteredStatus));\n      /* We delay the actual action of bubbling up the status to insulate the\n       * cleanup code in this class from any errors that may be thrown in the\n       * upper layers as a result of bubbling up the status. In particular,\n       * if the status is not OK, the \"error\" event may be emitted\n       * synchronously at the top level, which will result in a thrown error if\n       * the user does not handle that event. */\n      process.nextTick(() => {\n        var _a;\n        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\n      });\n      /* Leave the http2 stream in flowing state to drain incoming messages, to\n       * ensure that the stream closure completes. The call stream already does\n       * not push more messages after the status is output, so the messages go\n       * nowhere either way. */\n      (_a = this.http2Stream) === null || _a === void 0 ? void 0 : _a.resume();\n      if (this.subchannel) {\n        this.subchannel.callUnref();\n        this.subchannel.removeDisconnectListener(this.disconnectListener);\n      }\n    }\n  }\n  trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  /**\n   * On first call, emits a 'status' event with the given StatusObject.\n   * Subsequent calls are no-ops.\n   * @param status The status of the call.\n   */\n  endCall(status) {\n    /* If the status is OK and a new status comes in (e.g. from a\n     * deserialization failure), that new status takes priority */\n    if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n      this.finalStatus = status;\n      this.maybeOutputStatus();\n    }\n    this.destroyHttp2Stream();\n  }\n  maybeOutputStatus() {\n    if (this.finalStatus !== null) {\n      /* The combination check of readsClosed and that the two message buffer\n       * arrays are empty checks that there all incoming data has been fully\n       * processed */\n      if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {\n        this.outputStatus();\n      }\n    }\n  }\n  push(message) {\n    this.trace('pushing to reader message of length ' + (message instanceof Buffer ? message.length : null));\n    this.canPush = false;\n    process.nextTick(() => {\n      var _a;\n      /* If we have already output the status any later messages should be\n       * ignored, and can cause out-of-order operation errors higher up in the\n       * stack. Checking as late as possible here to avoid any race conditions.\n       */\n      if (this.statusOutput) {\n        return;\n      }\n      (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMessage(message);\n      this.maybeOutputStatus();\n    });\n  }\n  handleFilterError(error) {\n    this.cancelWithStatus(constants_1.Status.INTERNAL, error.message);\n  }\n  handleFilteredRead(message) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n    this.isReadFilterPending = false;\n    if (this.canPush) {\n      this.http2Stream.pause();\n      this.push(message);\n    } else {\n      this.trace('unpushedReadMessages.push message of length ' + message.length);\n      this.unpushedReadMessages.push(message);\n    }\n    if (this.unfilteredReadMessages.length > 0) {\n      /* nextMessage is guaranteed not to be undefined because\n         unfilteredReadMessages is non-empty */\n      const nextMessage = this.unfilteredReadMessages.shift();\n      this.filterReceivedMessage(nextMessage);\n    }\n  }\n  filterReceivedMessage(framedMessage) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n    this.trace('filterReceivedMessage of length ' + framedMessage.length);\n    this.isReadFilterPending = true;\n    this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));\n  }\n  tryPush(messageBytes) {\n    if (this.isReadFilterPending) {\n      this.trace('unfilteredReadMessages.push message of length ' + (messageBytes && messageBytes.length));\n      this.unfilteredReadMessages.push(messageBytes);\n    } else {\n      this.filterReceivedMessage(messageBytes);\n    }\n  }\n  handleTrailers(headers) {\n    this.streamEndWatchers.forEach(watcher => watcher(true));\n    let headersString = '';\n    for (const header of Object.keys(headers)) {\n      headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n    }\n    this.trace('Received server trailers:\\n' + headersString);\n    let metadata;\n    try {\n      metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n    } catch (e) {\n      metadata = new metadata_1.Metadata();\n    }\n    const metadataMap = metadata.getMap();\n    let code = this.mappedStatusCode;\n    if (code === constants_1.Status.UNKNOWN && typeof metadataMap['grpc-status'] === 'string') {\n      const receivedStatus = Number(metadataMap['grpc-status']);\n      if (receivedStatus in constants_1.Status) {\n        code = receivedStatus;\n        this.trace('received status code ' + receivedStatus + ' from server');\n      }\n      metadata.remove('grpc-status');\n    }\n    let details = '';\n    if (typeof metadataMap['grpc-message'] === 'string') {\n      try {\n        details = decodeURI(metadataMap['grpc-message']);\n      } catch (e) {\n        details = metadataMap['grpc-message'];\n      }\n      metadata.remove('grpc-message');\n      this.trace('received status details string \"' + details + '\" from server');\n    }\n    const status = {\n      code,\n      details,\n      metadata\n    };\n    // This is a no-op if the call was already ended when handling headers.\n    this.endCall(status);\n  }\n  writeMessageToStream(message, callback) {\n    var _a;\n    (_a = this.callStatsTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();\n    this.http2Stream.write(message, callback);\n  }\n  attachHttp2Stream(stream, subchannel, extraFilters, callStatsTracker) {\n    this.filterStack.push(extraFilters);\n    if (this.finalStatus !== null) {\n      stream.close(NGHTTP2_CANCEL);\n    } else {\n      this.trace('attachHttp2Stream from subchannel ' + subchannel.getAddress());\n      this.http2Stream = stream;\n      this.subchannel = subchannel;\n      this.callStatsTracker = callStatsTracker;\n      subchannel.addDisconnectListener(this.disconnectListener);\n      subchannel.callRef();\n      stream.on('response', (headers, flags) => {\n        var _a;\n        let headersString = '';\n        for (const header of Object.keys(headers)) {\n          headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n        this.trace('Received server headers:\\n' + headersString);\n        switch (headers[':status']) {\n          // TODO(murgatroid99): handle 100 and 101\n          case 400:\n            this.mappedStatusCode = constants_1.Status.INTERNAL;\n            break;\n          case 401:\n            this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n            break;\n          case 403:\n            this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n            break;\n          case 404:\n            this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n            break;\n          case 429:\n          case 502:\n          case 503:\n          case 504:\n            this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\n            break;\n          default:\n            this.mappedStatusCode = constants_1.Status.UNKNOWN;\n        }\n        if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n          this.handleTrailers(headers);\n        } else {\n          let metadata;\n          try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n          } catch (error) {\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n            return;\n          }\n          try {\n            const finalMetadata = this.filterStack.receiveMetadata(metadata);\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMetadata(finalMetadata);\n          } catch (error) {\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n          }\n        }\n      });\n      stream.on('trailers', headers => {\n        this.handleTrailers(headers);\n      });\n      stream.on('data', data => {\n        /* If the status has already been output, allow the http2 stream to\n         * drain without processing the data. */\n        if (this.statusOutput) {\n          return;\n        }\n        this.trace('receive HTTP/2 data frame of length ' + data.length);\n        const messages = this.decoder.write(data);\n        for (const message of messages) {\n          this.trace('parsed message of length ' + message.length);\n          this.callStatsTracker.addMessageReceived();\n          this.tryPush(message);\n        }\n      });\n      stream.on('end', () => {\n        this.readsClosed = true;\n        this.maybeOutputStatus();\n      });\n      stream.on('close', () => {\n        /* Use process.next tick to ensure that this code happens after any\n         * \"error\" event that may be emitted at about the same time, so that\n         * we can bubble up the error message from that event. */\n        process.nextTick(() => {\n          var _a;\n          this.trace('HTTP/2 stream closed with code ' + stream.rstCode);\n          /* If we have a final status with an OK status code, that means that\n           * we have received all of the messages and we have processed the\n           * trailers and the call completed successfully, so it doesn't matter\n           * how the stream ends after that */\n          if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n            return;\n          }\n          let code;\n          let details = '';\n          switch (stream.rstCode) {\n            case http2.constants.NGHTTP2_NO_ERROR:\n              /* If we get a NO_ERROR code and we already have a status, the\n               * stream completed properly and we just haven't fully processed\n               * it yet */\n              if (this.finalStatus !== null) {\n                return;\n              }\n              code = constants_1.Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n              break;\n            case http2.constants.NGHTTP2_REFUSED_STREAM:\n              code = constants_1.Status.UNAVAILABLE;\n              details = 'Stream refused by server';\n              break;\n            case http2.constants.NGHTTP2_CANCEL:\n              code = constants_1.Status.CANCELLED;\n              details = 'Call cancelled';\n              break;\n            case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n              code = constants_1.Status.RESOURCE_EXHAUSTED;\n              details = 'Bandwidth exhausted or memory limit exceeded';\n              break;\n            case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n              code = constants_1.Status.PERMISSION_DENIED;\n              details = 'Protocol not secure enough';\n              break;\n            case http2.constants.NGHTTP2_INTERNAL_ERROR:\n              code = constants_1.Status.INTERNAL;\n              if (this.internalError === null) {\n                /* This error code was previously handled in the default case, and\n                 * there are several instances of it online, so I wanted to\n                 * preserve the original error message so that people find existing\n                 * information in searches, but also include the more recognizable\n                 * \"Internal server error\" message. */\n                details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;\n              } else {\n                if (this.internalError.code === 'ECONNRESET' || this.internalError.code === 'ETIMEDOUT') {\n                  code = constants_1.Status.UNAVAILABLE;\n                  details = this.internalError.message;\n                } else {\n                  /* The \"Received RST_STREAM with code ...\" error is preserved\n                   * here for continuity with errors reported online, but the\n                   * error message at the end will probably be more relevant in\n                   * most cases. */\n                  details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                }\n              }\n              break;\n            default:\n              code = constants_1.Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n          }\n          // This is a no-op if trailers were received at all.\n          // This is OK, because status codes emitted here correspond to more\n          // catastrophic issues that prevent us from receiving trailers in the\n          // first place.\n          this.endCall({\n            code,\n            details,\n            metadata: new metadata_1.Metadata()\n          });\n        });\n      });\n      stream.on('error', err => {\n        /* We need an error handler here to stop \"Uncaught Error\" exceptions\n         * from bubbling up. However, errors here should all correspond to\n         * \"close\" events, where we will handle the error more granularly */\n        /* Specifically looking for stream errors that were *not* constructed\n         * from a RST_STREAM response here:\n         * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n         */\n        if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\n          this.trace('Node error event: message=' + err.message + ' code=' + err.code + ' errno=' + getSystemErrorName(err.errno) + ' syscall=' + err.syscall);\n          this.internalError = err;\n        }\n        this.streamEndWatchers.forEach(watcher => watcher(false));\n      });\n      if (this.pendingWrite) {\n        if (!this.pendingWriteCallback) {\n          throw new Error('Invalid state in write handling code');\n        }\n        this.trace('sending data chunk of length ' + this.pendingWrite.length + ' (deferred)');\n        try {\n          this.writeMessageToStream(this.pendingWrite, this.pendingWriteCallback);\n        } catch (error) {\n          this.endCall({\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new metadata_1.Metadata()\n          });\n        }\n      }\n      this.maybeCloseWrites();\n    }\n  }\n  start(metadata, listener) {\n    this.trace('Sending metadata');\n    this.listener = listener;\n    this.channel._startCallStream(this, metadata);\n    this.maybeOutputStatus();\n  }\n  destroyHttp2Stream() {\n    var _a;\n    // The http2 stream could already have been destroyed if cancelWithStatus\n    // is called in response to an internal http2 error.\n    if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n      /* If the call has ended with an OK status, communicate that when closing\n       * the stream, partly to avoid a situation in which we detect an error\n       * RST_STREAM as a result after we have the status */\n      let code;\n      if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n        code = http2.constants.NGHTTP2_NO_ERROR;\n      } else {\n        code = http2.constants.NGHTTP2_CANCEL;\n      }\n      this.trace('close http2 stream with code ' + code);\n      this.http2Stream.close(code);\n    }\n  }\n  cancelWithStatus(status, details) {\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    this.endCall({\n      code: status,\n      details,\n      metadata: new metadata_1.Metadata()\n    });\n  }\n  getDeadline() {\n    const deadlineList = [this.options.deadline];\n    if (this.options.parentCall && this.options.flags & constants_1.Propagate.DEADLINE) {\n      deadlineList.push(this.options.parentCall.getDeadline());\n    }\n    if (this.configDeadline) {\n      deadlineList.push(this.configDeadline);\n    }\n    return getMinDeadline(deadlineList);\n  }\n  getCredentials() {\n    return this.credentials;\n  }\n  setCredentials(credentials) {\n    this.credentials = this.channelCallCredentials.compose(credentials);\n  }\n  getStatus() {\n    return this.finalStatus;\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n  }\n  getMethod() {\n    return this.methodName;\n  }\n  getHost() {\n    return this.options.host;\n  }\n  setConfigDeadline(configDeadline) {\n    this.configDeadline = configDeadline;\n  }\n  addStatusWatcher(watcher) {\n    this.statusWatchers.push(watcher);\n  }\n  addStreamEndWatcher(watcher) {\n    this.streamEndWatchers.push(watcher);\n  }\n  addFilters(extraFilters) {\n    this.filterStack.push(extraFilters);\n  }\n  getCallNumber() {\n    return this.callNumber;\n  }\n  startRead() {\n    /* If the stream has ended with an error, we should not emit any more\n     * messages and we should communicate that the stream has ended */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n      return;\n    }\n    this.canPush = true;\n    if (this.http2Stream === null) {\n      this.pendingRead = true;\n    } else {\n      if (this.unpushedReadMessages.length > 0) {\n        const nextMessage = this.unpushedReadMessages.shift();\n        this.push(nextMessage);\n        return;\n      }\n      /* Only resume reading from the http2Stream if we don't have any pending\n       * messages to emit */\n      this.http2Stream.resume();\n    }\n  }\n  maybeCloseWrites() {\n    if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {\n      this.trace('calling end() on HTTP/2 stream');\n      this.http2Stream.end();\n    }\n  }\n  sendMessageWithContext(context, message) {\n    this.trace('write() called with message of length ' + message.length);\n    const writeObj = {\n      message,\n      flags: context.flags\n    };\n    const cb = error => {\n      var _a, _b;\n      let code = constants_1.Status.UNAVAILABLE;\n      if (((_a = error) === null || _a === void 0 ? void 0 : _a.code) === 'ERR_STREAM_WRITE_AFTER_END') {\n        code = constants_1.Status.INTERNAL;\n      }\n      if (error) {\n        this.cancelWithStatus(code, `Write error: ${error.message}`);\n      }\n      (_b = context.callback) === null || _b === void 0 ? void 0 : _b.call(context);\n    };\n    this.isWriteFilterPending = true;\n    this.filterStack.sendMessage(Promise.resolve(writeObj)).then(message => {\n      this.isWriteFilterPending = false;\n      if (this.http2Stream === null) {\n        this.trace('deferring writing data chunk of length ' + message.message.length);\n        this.pendingWrite = message.message;\n        this.pendingWriteCallback = cb;\n      } else {\n        this.trace('sending data chunk of length ' + message.message.length);\n        try {\n          this.writeMessageToStream(message.message, cb);\n        } catch (error) {\n          this.endCall({\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new metadata_1.Metadata()\n          });\n        }\n        this.maybeCloseWrites();\n      }\n    }, this.handleFilterError.bind(this));\n  }\n  halfClose() {\n    this.trace('end() called');\n    this.writesClosed = true;\n    this.maybeCloseWrites();\n  }\n}\nexports.Http2CallStream = Http2CallStream;","map":{"version":3,"names":["http2","require","os","constants_1","metadata_1","stream_decoder_1","logging","constants_2","TRACER_NAME","HTTP2_HEADER_STATUS","HTTP2_HEADER_CONTENT_TYPE","NGHTTP2_CANCEL","constants","getSystemErrorName","errno","name","num","Object","entries","getMinDeadline","deadlineList","minValue","Infinity","deadline","deadlineMsecs","Date","getTime","isInterceptingListener","listener","onReceiveMetadata","undefined","length","exports","InterceptingListenerImpl","constructor","nextListener","processingMetadata","hasPendingMessage","processingMessage","pendingStatus","processPendingMessage","onReceiveMessage","pendingMessage","processPendingStatus","onReceiveStatus","metadata","message","msg","status","processedStatus","Http2CallStream","methodName","channel","options","filterStackFactory","channelCallCredentials","callNumber","http2Stream","pendingRead","isWriteFilterPending","pendingWrite","pendingWriteCallback","writesClosed","decoder","StreamDecoder","isReadFilterPending","canPush","readsClosed","statusOutput","unpushedReadMessages","unfilteredReadMessages","mappedStatusCode","Status","UNKNOWN","finalStatus","subchannel","internalError","configDeadline","statusWatchers","streamEndWatchers","callStatsTracker","filterStack","createFilter","credentials","disconnectListener","endCall","code","UNAVAILABLE","details","Metadata","parentCall","flags","Propagate","CANCELLATION","on","cancelWithStatus","CANCELLED","outputStatus","filteredStatus","receiveTrailers","trace","forEach","watcher","process","nextTick","_a","resume","callUnref","removeDisconnectListener","text","LogVerbosity","DEBUG","OK","maybeOutputStatus","destroyHttp2Stream","push","Buffer","handleFilterError","error","INTERNAL","handleFilteredRead","pause","nextMessage","shift","filterReceivedMessage","framedMessage","receiveMessage","Promise","resolve","then","bind","tryPush","messageBytes","handleTrailers","headers","headersString","header","keys","fromHttp2Headers","e","metadataMap","getMap","receivedStatus","Number","remove","decodeURI","writeMessageToStream","callback","addMessageSent","write","attachHttp2Stream","stream","extraFilters","close","getAddress","addDisconnectListener","callRef","UNAUTHENTICATED","PERMISSION_DENIED","UNIMPLEMENTED","NGHTTP2_FLAG_END_STREAM","finalMetadata","receiveMetadata","data","messages","addMessageReceived","rstCode","NGHTTP2_NO_ERROR","NGHTTP2_REFUSED_STREAM","NGHTTP2_ENHANCE_YOUR_CALM","RESOURCE_EXHAUSTED","NGHTTP2_INADEQUATE_SECURITY","NGHTTP2_INTERNAL_ERROR","err","syscall","Error","maybeCloseWrites","start","_startCallStream","destroyed","getDeadline","DEADLINE","getCredentials","setCredentials","compose","getStatus","getPeer","_b","getTarget","getMethod","getHost","host","setConfigDeadline","addStatusWatcher","addStreamEndWatcher","addFilters","getCallNumber","startRead","end","sendMessageWithContext","context","writeObj","cb","call","sendMessage","halfClose"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/@grpc/grpc-js/src/call-stream.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as http2 from 'http2';\nimport * as os from 'os';\n\nimport { CallCredentials } from './call-credentials';\nimport { Propagate, Status } from './constants';\nimport { Filter, FilterFactory } from './filter';\nimport { FilterStackFactory, FilterStack } from './filter-stack';\nimport { Metadata } from './metadata';\nimport { StreamDecoder } from './stream-decoder';\nimport { ChannelImplementation } from './channel';\nimport { SubchannelCallStatsTracker, Subchannel } from './subchannel';\nimport * as logging from './logging';\nimport { LogVerbosity } from './constants';\nimport { ServerSurfaceCall } from './server-call';\n\nconst TRACER_NAME = 'call_stream';\n\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n  NGHTTP2_CANCEL,\n} = http2.constants;\n\n/**\n * https://nodejs.org/api/errors.html#errors_class_systemerror\n */\ninterface SystemError extends Error {\n  address?: string;\n  code: string;\n  dest?: string;\n  errno: number;\n  info?: object;\n  message: string;\n  path?: string;\n  port?: number;\n  syscall: string;\n}\n\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */\nfunction getSystemErrorName(errno: number): string {\n  for (const [name, num] of Object.entries(os.constants.errno)) {\n    if (num === errno) {\n      return name;\n    }\n  }\n  return 'Unknown system error ' + errno;\n}\n\nexport type Deadline = Date | number;\n\nfunction getMinDeadline(deadlineList: Deadline[]): Deadline {\n  let minValue = Infinity;\n  for (const deadline of deadlineList) {\n    const deadlineMsecs =\n      deadline instanceof Date ? deadline.getTime() : deadline;\n    if (deadlineMsecs < minValue) {\n      minValue = deadlineMsecs;\n    }\n  }\n  return minValue;\n}\n\nexport interface CallStreamOptions {\n  deadline: Deadline;\n  flags: number;\n  host: string;\n  parentCall: ServerSurfaceCall | null;\n}\n\nexport type PartialCallStreamOptions = Partial<CallStreamOptions>;\n\nexport interface StatusObject {\n  code: Status;\n  details: string;\n  metadata: Metadata;\n}\n\nexport type PartialStatusObject = Pick<StatusObject, 'code' | 'details'> & {\n  metadata: Metadata | null;\n}\n\nexport const enum WriteFlags {\n  BufferHint = 1,\n  NoCompress = 2,\n  WriteThrough = 4,\n}\n\nexport interface WriteObject {\n  message: Buffer;\n  flags?: number;\n}\n\nexport interface MetadataListener {\n  (metadata: Metadata, next: (metadata: Metadata) => void): void;\n}\n\nexport interface MessageListener {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (message: any, next: (message: any) => void): void;\n}\n\nexport interface StatusListener {\n  (status: StatusObject, next: (status: StatusObject) => void): void;\n}\n\nexport interface FullListener {\n  onReceiveMetadata: MetadataListener;\n  onReceiveMessage: MessageListener;\n  onReceiveStatus: StatusListener;\n}\n\nexport type Listener = Partial<FullListener>;\n\n/**\n * An object with methods for handling the responses to a call.\n */\nexport interface InterceptingListener {\n  onReceiveMetadata(metadata: Metadata): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message: any): void;\n  onReceiveStatus(status: StatusObject): void;\n}\n\nexport function isInterceptingListener(\n  listener: Listener | InterceptingListener\n): listener is InterceptingListener {\n  return (\n    listener.onReceiveMetadata !== undefined &&\n    listener.onReceiveMetadata.length === 1\n  );\n}\n\nexport class InterceptingListenerImpl implements InterceptingListener {\n  private processingMetadata = false;\n  private hasPendingMessage = false;\n  private pendingMessage: any;\n  private processingMessage = false;\n  private pendingStatus: StatusObject | null = null;\n  constructor(\n    private listener: FullListener,\n    private nextListener: InterceptingListener\n  ) {}\n\n  private processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n\n  private processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n\n  onReceiveMetadata(metadata: Metadata): void {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, (metadata) => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message: any): void {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, (msg) => {\n      this.processingMessage = false;\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n  onReceiveStatus(status: StatusObject): void {\n    this.listener.onReceiveStatus(status, (processedStatus) => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n}\n\nexport interface WriteCallback {\n  (error?: Error | null): void;\n}\n\nexport interface MessageContext {\n  callback?: WriteCallback;\n  flags?: number;\n}\n\nexport interface Call {\n  cancelWithStatus(status: Status, details: string): void;\n  getPeer(): string;\n  start(metadata: Metadata, listener: InterceptingListener): void;\n  sendMessageWithContext(context: MessageContext, message: Buffer): void;\n  startRead(): void;\n  halfClose(): void;\n\n  getDeadline(): Deadline;\n  getCredentials(): CallCredentials;\n  setCredentials(credentials: CallCredentials): void;\n  getMethod(): string;\n  getHost(): string;\n}\n\nexport class Http2CallStream implements Call {\n  credentials: CallCredentials;\n  filterStack: FilterStack;\n  private http2Stream: http2.ClientHttp2Stream | null = null;\n  private pendingRead = false;\n  private isWriteFilterPending = false;\n  private pendingWrite: Buffer | null = null;\n  private pendingWriteCallback: WriteCallback | null = null;\n  private writesClosed = false;\n\n  private decoder = new StreamDecoder();\n\n  private isReadFilterPending = false;\n  private canPush = false;\n  /**\n   * Indicates that an 'end' event has come from the http2 stream, so there\n   * will be no more data events.\n   */\n  private readsClosed = false;\n\n  private statusOutput = false;\n\n  private unpushedReadMessages: Buffer[] = [];\n  private unfilteredReadMessages: Buffer[] = [];\n\n  // Status code mapped from :status. To be used if grpc-status is not received\n  private mappedStatusCode: Status = Status.UNKNOWN;\n\n  // This is populated (non-null) if and only if the call has ended\n  private finalStatus: StatusObject | null = null;\n\n  private subchannel: Subchannel | null = null;\n  private disconnectListener: () => void;\n\n  private listener: InterceptingListener | null = null;\n\n  private internalError: SystemError | null = null;\n\n  private configDeadline: Deadline = Infinity;\n\n  private statusWatchers: ((status: StatusObject) => void)[] = [];\n  private streamEndWatchers: ((success: boolean) => void)[] = [];\n\n  private callStatsTracker: SubchannelCallStatsTracker | null = null;\n\n  constructor(\n    private readonly methodName: string,\n    private readonly channel: ChannelImplementation,\n    private readonly options: CallStreamOptions,\n    filterStackFactory: FilterStackFactory,\n    private readonly channelCallCredentials: CallCredentials,\n    private readonly callNumber: number\n  ) {\n    this.filterStack = filterStackFactory.createFilter(this);\n    this.credentials = channelCallCredentials;\n    this.disconnectListener = () => {\n      this.endCall({\n        code: Status.UNAVAILABLE,\n        details: 'Connection dropped',\n        metadata: new Metadata(),\n      });\n    };\n    if (\n      this.options.parentCall &&\n      this.options.flags & Propagate.CANCELLATION\n    ) {\n      this.options.parentCall.on('cancelled', () => {\n        this.cancelWithStatus(Status.CANCELLED, 'Cancelled by parent call');\n      });\n    }\n  }\n\n  private outputStatus() {\n    /* Precondition: this.finalStatus !== null */\n    if (this.listener && !this.statusOutput) {\n      this.statusOutput = true;\n      const filteredStatus = this.filterStack.receiveTrailers(\n        this.finalStatus!\n      );\n      this.trace(\n        'ended with status: code=' +\n          filteredStatus.code +\n          ' details=\"' +\n          filteredStatus.details +\n          '\"'\n      );\n      this.statusWatchers.forEach(watcher => watcher(filteredStatus));\n      /* We delay the actual action of bubbling up the status to insulate the\n       * cleanup code in this class from any errors that may be thrown in the\n       * upper layers as a result of bubbling up the status. In particular,\n       * if the status is not OK, the \"error\" event may be emitted\n       * synchronously at the top level, which will result in a thrown error if\n       * the user does not handle that event. */\n      process.nextTick(() => {\n        this.listener?.onReceiveStatus(filteredStatus);\n      });\n      /* Leave the http2 stream in flowing state to drain incoming messages, to\n       * ensure that the stream closure completes. The call stream already does\n       * not push more messages after the status is output, so the messages go\n       * nowhere either way. */\n      this.http2Stream?.resume();\n      if (this.subchannel) {\n        this.subchannel.callUnref();\n        this.subchannel.removeDisconnectListener(this.disconnectListener);\n      }\n    }\n  }\n\n  private trace(text: string): void {\n    logging.trace(\n      LogVerbosity.DEBUG,\n      TRACER_NAME,\n      '[' + this.callNumber + '] ' + text\n    );\n  }\n\n  /**\n   * On first call, emits a 'status' event with the given StatusObject.\n   * Subsequent calls are no-ops.\n   * @param status The status of the call.\n   */\n  private endCall(status: StatusObject): void {\n    /* If the status is OK and a new status comes in (e.g. from a\n     * deserialization failure), that new status takes priority */\n    if (this.finalStatus === null || this.finalStatus.code === Status.OK) {\n      this.finalStatus = status;\n      this.maybeOutputStatus();\n    }\n    this.destroyHttp2Stream();\n  }\n\n  private maybeOutputStatus() {\n    if (this.finalStatus !== null) {\n      /* The combination check of readsClosed and that the two message buffer\n       * arrays are empty checks that there all incoming data has been fully\n       * processed */\n      if (\n        this.finalStatus.code !== Status.OK ||\n        (this.readsClosed &&\n          this.unpushedReadMessages.length === 0 &&\n          this.unfilteredReadMessages.length === 0 &&\n          !this.isReadFilterPending)\n      ) {\n        this.outputStatus();\n      }\n    }\n  }\n\n  private push(message: Buffer): void {\n    this.trace(\n      'pushing to reader message of length ' +\n        (message instanceof Buffer ? message.length : null)\n    );\n    this.canPush = false;\n    process.nextTick(() => {\n      /* If we have already output the status any later messages should be\n       * ignored, and can cause out-of-order operation errors higher up in the\n       * stack. Checking as late as possible here to avoid any race conditions.\n       */\n      if (this.statusOutput) {\n        return;\n      }\n      this.listener?.onReceiveMessage(message);\n      this.maybeOutputStatus();\n    });\n  }\n\n  private handleFilterError(error: Error) {\n    this.cancelWithStatus(Status.INTERNAL, error.message);\n  }\n\n  private handleFilteredRead(message: Buffer) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n    this.isReadFilterPending = false;\n    if (this.canPush) {\n      this.http2Stream!.pause();\n      this.push(message);\n    } else {\n      this.trace(\n        'unpushedReadMessages.push message of length ' + message.length\n      );\n      this.unpushedReadMessages.push(message);\n    }\n    if (this.unfilteredReadMessages.length > 0) {\n      /* nextMessage is guaranteed not to be undefined because\n         unfilteredReadMessages is non-empty */\n      const nextMessage = this.unfilteredReadMessages.shift()!;\n      this.filterReceivedMessage(nextMessage);\n    }\n  }\n\n  private filterReceivedMessage(framedMessage: Buffer) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n    this.trace('filterReceivedMessage of length ' + framedMessage.length);\n    this.isReadFilterPending = true;\n    this.filterStack\n      .receiveMessage(Promise.resolve(framedMessage))\n      .then(\n        this.handleFilteredRead.bind(this),\n        this.handleFilterError.bind(this)\n      );\n  }\n\n  private tryPush(messageBytes: Buffer): void {\n    if (this.isReadFilterPending) {\n      this.trace(\n        'unfilteredReadMessages.push message of length ' +\n          (messageBytes && messageBytes.length)\n      );\n      this.unfilteredReadMessages.push(messageBytes);\n    } else {\n      this.filterReceivedMessage(messageBytes);\n    }\n  }\n\n  private handleTrailers(headers: http2.IncomingHttpHeaders) {\n    this.streamEndWatchers.forEach(watcher => watcher(true));\n    let headersString = '';\n    for (const header of Object.keys(headers)) {\n      headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n    }\n    this.trace('Received server trailers:\\n' + headersString);\n    let metadata: Metadata;\n    try {\n      metadata = Metadata.fromHttp2Headers(headers);\n    } catch (e) {\n      metadata = new Metadata();\n    }\n    const metadataMap = metadata.getMap();\n    let code: Status = this.mappedStatusCode;\n    if (\n      code === Status.UNKNOWN &&\n      typeof metadataMap['grpc-status'] === 'string'\n    ) {\n      const receivedStatus = Number(metadataMap['grpc-status']);\n      if (receivedStatus in Status) {\n        code = receivedStatus;\n        this.trace('received status code ' + receivedStatus + ' from server');\n      }\n      metadata.remove('grpc-status');\n    }\n    let details = '';\n    if (typeof metadataMap['grpc-message'] === 'string') {\n      try {\n        details = decodeURI(metadataMap['grpc-message']);\n      } catch (e) {\n        details = metadataMap['grpc-message'];\n      }\n      metadata.remove('grpc-message');\n      this.trace(\n        'received status details string \"' + details + '\" from server'\n      );\n    }\n    const status: StatusObject = { code, details, metadata };\n    // This is a no-op if the call was already ended when handling headers.\n    this.endCall(status);\n  }\n\n  private writeMessageToStream(message: Buffer, callback: WriteCallback) {\n    this.callStatsTracker?.addMessageSent();\n    this.http2Stream!.write(message, callback);\n  }\n\n  attachHttp2Stream(\n    stream: http2.ClientHttp2Stream,\n    subchannel: Subchannel,\n    extraFilters: Filter[],\n    callStatsTracker: SubchannelCallStatsTracker\n  ): void {\n    this.filterStack.push(extraFilters);\n    if (this.finalStatus !== null) {\n      stream.close(NGHTTP2_CANCEL);\n    } else {\n      this.trace(\n        'attachHttp2Stream from subchannel ' + subchannel.getAddress()\n      );\n      this.http2Stream = stream;\n      this.subchannel = subchannel;\n      this.callStatsTracker = callStatsTracker;\n      subchannel.addDisconnectListener(this.disconnectListener);\n      subchannel.callRef();\n      stream.on('response', (headers, flags) => {\n        let headersString = '';\n        for (const header of Object.keys(headers)) {\n          headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n        this.trace('Received server headers:\\n' + headersString);\n        switch (headers[':status']) {\n          // TODO(murgatroid99): handle 100 and 101\n          case 400:\n            this.mappedStatusCode = Status.INTERNAL;\n            break;\n          case 401:\n            this.mappedStatusCode = Status.UNAUTHENTICATED;\n            break;\n          case 403:\n            this.mappedStatusCode = Status.PERMISSION_DENIED;\n            break;\n          case 404:\n            this.mappedStatusCode = Status.UNIMPLEMENTED;\n            break;\n          case 429:\n          case 502:\n          case 503:\n          case 504:\n            this.mappedStatusCode = Status.UNAVAILABLE;\n            break;\n          default:\n            this.mappedStatusCode = Status.UNKNOWN;\n        }\n\n        if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n          this.handleTrailers(headers);\n        } else {\n          let metadata: Metadata;\n          try {\n            metadata = Metadata.fromHttp2Headers(headers);\n          } catch (error) {\n            this.endCall({\n              code: Status.UNKNOWN,\n              details: error.message,\n              metadata: new Metadata(),\n            });\n            return;\n          }\n          try {\n            const finalMetadata = this.filterStack.receiveMetadata(metadata);\n            this.listener?.onReceiveMetadata(finalMetadata);\n          } catch (error) {\n            this.endCall({\n              code: Status.UNKNOWN,\n              details: error.message,\n              metadata: new Metadata(),\n            });\n          }\n        }\n      });\n      stream.on('trailers', (headers: http2.IncomingHttpHeaders) => {\n        this.handleTrailers(headers);\n      });\n      stream.on('data', (data: Buffer) => {\n        /* If the status has already been output, allow the http2 stream to\n         * drain without processing the data. */\n        if (this.statusOutput) {\n          return;\n        }\n        this.trace('receive HTTP/2 data frame of length ' + data.length);\n        const messages = this.decoder.write(data);\n\n        for (const message of messages) {\n          this.trace('parsed message of length ' + message.length);\n          this.callStatsTracker!.addMessageReceived();\n          this.tryPush(message);\n        }\n      });\n      stream.on('end', () => {\n        this.readsClosed = true;\n        this.maybeOutputStatus();\n      });\n      stream.on('close', () => {\n        /* Use process.next tick to ensure that this code happens after any\n         * \"error\" event that may be emitted at about the same time, so that\n         * we can bubble up the error message from that event. */\n        process.nextTick(() => {\n          this.trace('HTTP/2 stream closed with code ' + stream.rstCode);\n          /* If we have a final status with an OK status code, that means that\n           * we have received all of the messages and we have processed the\n           * trailers and the call completed successfully, so it doesn't matter\n           * how the stream ends after that */\n          if (this.finalStatus?.code === Status.OK) {\n            return;\n          }\n          let code: Status;\n          let details = '';\n          switch (stream.rstCode) {\n            case http2.constants.NGHTTP2_NO_ERROR:\n              /* If we get a NO_ERROR code and we already have a status, the\n               * stream completed properly and we just haven't fully processed\n               * it yet */\n              if (this.finalStatus !== null) {\n                return;\n              }\n              code = Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n              break;\n            case http2.constants.NGHTTP2_REFUSED_STREAM:\n              code = Status.UNAVAILABLE;\n              details = 'Stream refused by server';\n              break;\n            case http2.constants.NGHTTP2_CANCEL:\n              code = Status.CANCELLED;\n              details = 'Call cancelled';\n              break;\n            case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n              code = Status.RESOURCE_EXHAUSTED;\n              details = 'Bandwidth exhausted or memory limit exceeded';\n              break;\n            case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n              code = Status.PERMISSION_DENIED;\n              details = 'Protocol not secure enough';\n              break;\n            case http2.constants.NGHTTP2_INTERNAL_ERROR:\n              code = Status.INTERNAL;\n              if (this.internalError === null) {\n                /* This error code was previously handled in the default case, and\n                 * there are several instances of it online, so I wanted to\n                 * preserve the original error message so that people find existing\n                 * information in searches, but also include the more recognizable\n                 * \"Internal server error\" message. */\n                details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;\n              } else {\n                if (this.internalError.code === 'ECONNRESET' || this.internalError.code === 'ETIMEDOUT') {\n                  code = Status.UNAVAILABLE;\n                  details = this.internalError.message;\n                } else {\n                  /* The \"Received RST_STREAM with code ...\" error is preserved\n                   * here for continuity with errors reported online, but the\n                   * error message at the end will probably be more relevant in\n                   * most cases. */\n                  details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                }\n              }\n              break;\n            default:\n              code = Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n          }\n          // This is a no-op if trailers were received at all.\n          // This is OK, because status codes emitted here correspond to more\n          // catastrophic issues that prevent us from receiving trailers in the\n          // first place.\n          this.endCall({ code, details, metadata: new Metadata() });\n        });\n      });\n      stream.on('error', (err: SystemError) => {\n        /* We need an error handler here to stop \"Uncaught Error\" exceptions\n         * from bubbling up. However, errors here should all correspond to\n         * \"close\" events, where we will handle the error more granularly */\n        /* Specifically looking for stream errors that were *not* constructed\n         * from a RST_STREAM response here:\n         * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n         */\n        if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\n          this.trace(\n            'Node error event: message=' +\n              err.message +\n              ' code=' +\n              err.code +\n              ' errno=' +\n              getSystemErrorName(err.errno) +\n              ' syscall=' +\n              err.syscall\n          );\n          this.internalError = err;\n        }\n        this.streamEndWatchers.forEach(watcher => watcher(false));\n      });\n      if (this.pendingWrite) {\n        if (!this.pendingWriteCallback) {\n          throw new Error('Invalid state in write handling code');\n        }\n        this.trace(\n          'sending data chunk of length ' +\n            this.pendingWrite.length +\n            ' (deferred)'\n        );\n        try {\n          this.writeMessageToStream(this.pendingWrite, this.pendingWriteCallback);\n        } catch (error) {\n          this.endCall({\n            code: Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new Metadata()\n          });\n        }\n      }\n      this.maybeCloseWrites();\n    }\n  }\n\n  start(metadata: Metadata, listener: InterceptingListener) {\n    this.trace('Sending metadata');\n    this.listener = listener;\n    this.channel._startCallStream(this, metadata);\n    this.maybeOutputStatus();\n  }\n\n  private destroyHttp2Stream() {\n    // The http2 stream could already have been destroyed if cancelWithStatus\n    // is called in response to an internal http2 error.\n    if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n      /* If the call has ended with an OK status, communicate that when closing\n       * the stream, partly to avoid a situation in which we detect an error\n       * RST_STREAM as a result after we have the status */\n      let code: number;\n      if (this.finalStatus?.code === Status.OK) {\n        code = http2.constants.NGHTTP2_NO_ERROR;\n      } else {\n        code = http2.constants.NGHTTP2_CANCEL;\n      }\n      this.trace('close http2 stream with code ' + code);\n      this.http2Stream.close(code);\n    }\n  }\n\n  cancelWithStatus(status: Status, details: string): void {\n    this.trace(\n      'cancelWithStatus code: ' + status + ' details: \"' + details + '\"'\n    );\n    this.endCall({ code: status, details, metadata: new Metadata() });\n  }\n\n  getDeadline(): Deadline {\n    const deadlineList = [this.options.deadline];\n    if (this.options.parentCall && this.options.flags & Propagate.DEADLINE) {\n      deadlineList.push(this.options.parentCall.getDeadline());\n    }\n    if (this.configDeadline) {\n      deadlineList.push(this.configDeadline);\n    }\n    return getMinDeadline(deadlineList);\n  }\n\n  getCredentials(): CallCredentials {\n    return this.credentials;\n  }\n\n  setCredentials(credentials: CallCredentials): void {\n    this.credentials = this.channelCallCredentials.compose(credentials);\n  }\n\n  getStatus(): StatusObject | null {\n    return this.finalStatus;\n  }\n\n  getPeer(): string {\n    return this.subchannel?.getAddress() ?? this.channel.getTarget();\n  }\n\n  getMethod(): string {\n    return this.methodName;\n  }\n\n  getHost(): string {\n    return this.options.host;\n  }\n\n  setConfigDeadline(configDeadline: Deadline) {\n    this.configDeadline = configDeadline;\n  }\n\n  addStatusWatcher(watcher: (status: StatusObject) => void) {\n    this.statusWatchers.push(watcher);\n  }\n\n  addStreamEndWatcher(watcher: (success: boolean) => void) {\n    this.streamEndWatchers.push(watcher);\n  }\n\n  addFilters(extraFilters: Filter[]) {\n    this.filterStack.push(extraFilters);\n  }\n\n  getCallNumber() {\n    return this.callNumber;\n  }\n\n  startRead() {\n    /* If the stream has ended with an error, we should not emit any more\n     * messages and we should communicate that the stream has ended */\n    if (this.finalStatus !== null && this.finalStatus.code !== Status.OK) {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n      return;\n    }\n    this.canPush = true;\n    if (this.http2Stream === null) {\n      this.pendingRead = true;\n    } else {\n      if (this.unpushedReadMessages.length > 0) {\n        const nextMessage: Buffer = this.unpushedReadMessages.shift()!;\n        this.push(nextMessage);\n        return;\n      }\n      /* Only resume reading from the http2Stream if we don't have any pending\n       * messages to emit */\n      this.http2Stream.resume();\n    }\n  }\n\n  private maybeCloseWrites() {\n    if (\n      this.writesClosed &&\n      !this.isWriteFilterPending &&\n      this.http2Stream !== null\n    ) {\n      this.trace('calling end() on HTTP/2 stream');\n      this.http2Stream.end();\n    }\n  }\n\n  sendMessageWithContext(context: MessageContext, message: Buffer) {\n    this.trace('write() called with message of length ' + message.length);\n    const writeObj: WriteObject = {\n      message,\n      flags: context.flags,\n    };\n    const cb: WriteCallback = (error?: Error | null) => {\n      let code: Status = Status.UNAVAILABLE;\n      if ((error as NodeJS.ErrnoException)?.code === 'ERR_STREAM_WRITE_AFTER_END') {\n        code = Status.INTERNAL;\n      }\n      if (error) {\n        this.cancelWithStatus(code, `Write error: ${error.message}`);\n      }\n      context.callback?.();\n    };\n    this.isWriteFilterPending = true;\n    this.filterStack.sendMessage(Promise.resolve(writeObj)).then((message) => {\n      this.isWriteFilterPending = false;\n      if (this.http2Stream === null) {\n        this.trace(\n          'deferring writing data chunk of length ' + message.message.length\n        );\n        this.pendingWrite = message.message;\n        this.pendingWriteCallback = cb;\n      } else {\n        this.trace('sending data chunk of length ' + message.message.length);\n        try {\n        this.writeMessageToStream(message.message, cb);\n        }  catch (error) {\n          this.endCall({\n            code: Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new Metadata()\n          });\n        }\n        this.maybeCloseWrites();\n      }\n    }, this.handleFilterError.bind(this));\n  }\n\n  halfClose() {\n    this.trace('end() called');\n    this.writesClosed = true;\n    this.maybeCloseWrites();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}