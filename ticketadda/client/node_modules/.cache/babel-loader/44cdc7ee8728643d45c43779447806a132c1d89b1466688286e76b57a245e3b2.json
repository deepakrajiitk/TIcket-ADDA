{"ast":null,"code":"/*\n Copyright 2016, 2018 IBM All Rights Reserved.\n\n SPDX-License-Identifier: Apache-2.0\n\n*/\n\n'use strict';\n\nconst jsrsasign = require('jsrsasign');\nconst KEYUTIL = jsrsasign.KEYUTIL;\nconst ECDSAKey = require('./ecdsa/key.js');\nconst KeyValueStore = require('../KeyValueStore');\nconst _getPrivateKeyIndex = ski => {\n  return ski + '-priv';\n};\nconst _getPublicKeyIndex = ski => {\n  return ski + '-pub';\n};\n\n/**\n * A CryptoKeyStore uses an underlying instance of {@link module:api.KeyValueStore} implementation\n * to persist crypto keys.\n *\n * This class enforces the special indexing mechanism with private and public\n * keys on top of a standard implementation of the KeyValueStore interface\n * with the getKey() and putKey() methods\n *\n * @class\n */\nclass CryptoKeyStore extends KeyValueStore {\n  /**\n   * @param {KeyValueStore} keyValueStore\n   */\n  constructor(keyValueStore) {\n    super();\n    this.keyValueStore = keyValueStore;\n  }\n  async initialize() {\n    await this.keyValueStore.initialize();\n  }\n  async getValue(name) {\n    return await this.keyValueStore.getValue(name);\n  }\n  async setValue(name, value) {\n    await this.keyValueStore.setValue(name, value);\n  }\n  async getKey(ski) {\n    // first try the private key entry, since it encapsulates both\n    // the private key and public key\n    const raw = await this.getValue(_getPrivateKeyIndex(ski));\n    if (raw !== null) {\n      const privKey = KEYUTIL.getKeyFromPlainPrivatePKCS8PEM(raw);\n      // TODO: for now assuming ECDSA keys only, need to add support for RSA keys\n      return new ECDSAKey(privKey);\n    }\n\n    // didn't find the private key entry matching the SKI\n    // next try the public key entry\n    const key = await this.getValue(_getPublicKeyIndex(ski));\n    if (key instanceof ECDSAKey) {\n      return key;\n    }\n    if (key !== null) {\n      const pubKey = KEYUTIL.getKey(key);\n      return new ECDSAKey(pubKey);\n    }\n  }\n  async putKey(key) {\n    const idx = key.isPrivate() ? _getPrivateKeyIndex(key.getSKI()) : _getPublicKeyIndex(key.getSKI());\n    const pem = key.toBytes();\n    await this.setValue(idx, pem);\n    return key;\n  }\n}\nmodule.exports = CryptoKeyStore;","map":{"version":3,"names":["jsrsasign","require","KEYUTIL","ECDSAKey","KeyValueStore","_getPrivateKeyIndex","ski","_getPublicKeyIndex","CryptoKeyStore","constructor","keyValueStore","initialize","getValue","name","setValue","value","getKey","raw","privKey","getKeyFromPlainPrivatePKCS8PEM","key","pubKey","putKey","idx","isPrivate","getSKI","pem","toBytes","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/impl/CryptoKeyStore.js"],"sourcesContent":["/*\n Copyright 2016, 2018 IBM All Rights Reserved.\n\n SPDX-License-Identifier: Apache-2.0\n\n*/\n\n'use strict';\nconst jsrsasign = require('jsrsasign');\nconst KEYUTIL = jsrsasign.KEYUTIL;\n\nconst ECDSAKey = require('./ecdsa/key.js');\nconst KeyValueStore = require('../KeyValueStore');\n\nconst _getPrivateKeyIndex = (ski) => {\n\treturn ski + '-priv';\n};\n\nconst _getPublicKeyIndex = (ski) => {\n\treturn ski + '-pub';\n};\n\n/**\n * A CryptoKeyStore uses an underlying instance of {@link module:api.KeyValueStore} implementation\n * to persist crypto keys.\n *\n * This class enforces the special indexing mechanism with private and public\n * keys on top of a standard implementation of the KeyValueStore interface\n * with the getKey() and putKey() methods\n *\n * @class\n */\nclass CryptoKeyStore extends KeyValueStore {\n\t/**\n\t * @param {KeyValueStore} keyValueStore\n\t */\n\tconstructor(keyValueStore) {\n\t\tsuper();\n\t\tthis.keyValueStore = keyValueStore;\n\t}\n\n\tasync initialize() {\n\t\tawait this.keyValueStore.initialize();\n\t}\n\n\tasync getValue(name) {\n\t\treturn await this.keyValueStore.getValue(name);\n\t}\n\n\tasync setValue(name, value) {\n\t\tawait this.keyValueStore.setValue(name, value);\n\t}\n\n\tasync getKey(ski) {\n\t\t// first try the private key entry, since it encapsulates both\n\t\t// the private key and public key\n\t\tconst raw = await this.getValue(_getPrivateKeyIndex(ski));\n\n\t\tif (raw !== null) {\n\t\t\tconst privKey = KEYUTIL.getKeyFromPlainPrivatePKCS8PEM(raw);\n\t\t\t// TODO: for now assuming ECDSA keys only, need to add support for RSA keys\n\t\t\treturn new ECDSAKey(privKey);\n\t\t}\n\n\t\t// didn't find the private key entry matching the SKI\n\t\t// next try the public key entry\n\t\tconst key = await this.getValue(_getPublicKeyIndex(ski));\n\t\tif (key instanceof ECDSAKey) {\n\t\t\treturn key;\n\t\t}\n\t\tif (key !== null) {\n\t\t\tconst pubKey = KEYUTIL.getKey(key);\n\t\t\treturn new ECDSAKey(pubKey);\n\t\t}\n\n\t}\n\n\tasync putKey(key) {\n\t\tconst idx = key.isPrivate() ? _getPrivateKeyIndex(key.getSKI()) : _getPublicKeyIndex(key.getSKI());\n\t\tconst pem = key.toBytes();\n\t\tawait this.setValue(idx, pem);\n\t\treturn key;\n\t}\n}\n\nmodule.exports = CryptoKeyStore;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AACZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMC,OAAO,GAAGF,SAAS,CAACE,OAAO;AAEjC,MAAMC,QAAQ,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC1C,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAEjD,MAAMI,mBAAmB,GAAIC,GAAG,IAAK;EACpC,OAAOA,GAAG,GAAG,OAAO;AACrB,CAAC;AAED,MAAMC,kBAAkB,GAAID,GAAG,IAAK;EACnC,OAAOA,GAAG,GAAG,MAAM;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,cAAc,SAASJ,aAAa,CAAC;EAC1C;AACD;AACA;EACCK,WAAWA,CAACC,aAAa,EAAE;IAC1B,KAAK,EAAE;IACP,IAAI,CAACA,aAAa,GAAGA,aAAa;EACnC;EAEA,MAAMC,UAAUA,CAAA,EAAG;IAClB,MAAM,IAAI,CAACD,aAAa,CAACC,UAAU,EAAE;EACtC;EAEA,MAAMC,QAAQA,CAACC,IAAI,EAAE;IACpB,OAAO,MAAM,IAAI,CAACH,aAAa,CAACE,QAAQ,CAACC,IAAI,CAAC;EAC/C;EAEA,MAAMC,QAAQA,CAACD,IAAI,EAAEE,KAAK,EAAE;IAC3B,MAAM,IAAI,CAACL,aAAa,CAACI,QAAQ,CAACD,IAAI,EAAEE,KAAK,CAAC;EAC/C;EAEA,MAAMC,MAAMA,CAACV,GAAG,EAAE;IACjB;IACA;IACA,MAAMW,GAAG,GAAG,MAAM,IAAI,CAACL,QAAQ,CAACP,mBAAmB,CAACC,GAAG,CAAC,CAAC;IAEzD,IAAIW,GAAG,KAAK,IAAI,EAAE;MACjB,MAAMC,OAAO,GAAGhB,OAAO,CAACiB,8BAA8B,CAACF,GAAG,CAAC;MAC3D;MACA,OAAO,IAAId,QAAQ,CAACe,OAAO,CAAC;IAC7B;;IAEA;IACA;IACA,MAAME,GAAG,GAAG,MAAM,IAAI,CAACR,QAAQ,CAACL,kBAAkB,CAACD,GAAG,CAAC,CAAC;IACxD,IAAIc,GAAG,YAAYjB,QAAQ,EAAE;MAC5B,OAAOiB,GAAG;IACX;IACA,IAAIA,GAAG,KAAK,IAAI,EAAE;MACjB,MAAMC,MAAM,GAAGnB,OAAO,CAACc,MAAM,CAACI,GAAG,CAAC;MAClC,OAAO,IAAIjB,QAAQ,CAACkB,MAAM,CAAC;IAC5B;EAED;EAEA,MAAMC,MAAMA,CAACF,GAAG,EAAE;IACjB,MAAMG,GAAG,GAAGH,GAAG,CAACI,SAAS,EAAE,GAAGnB,mBAAmB,CAACe,GAAG,CAACK,MAAM,EAAE,CAAC,GAAGlB,kBAAkB,CAACa,GAAG,CAACK,MAAM,EAAE,CAAC;IAClG,MAAMC,GAAG,GAAGN,GAAG,CAACO,OAAO,EAAE;IACzB,MAAM,IAAI,CAACb,QAAQ,CAACS,GAAG,EAAEG,GAAG,CAAC;IAC7B,OAAON,GAAG;EACX;AACD;AAEAQ,MAAM,CAACC,OAAO,GAAGrB,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}