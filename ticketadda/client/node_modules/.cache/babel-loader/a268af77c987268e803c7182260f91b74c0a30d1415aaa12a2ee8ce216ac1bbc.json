{"ast":null,"code":"/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\n/**\n * Signer is an interface for an opaque private key that can be used for signing operations\n *\n * @class\n */\nclass Signer {\n  /**\n   * @param {module:api.CryptoSuite} cryptoSuite The underlying {@link CryptoSuite} implementation for the digital\n   * signature algorithm\n   * @param {module:api.Key} key The private key\n   */\n  constructor(cryptoSuite, key) {\n    if (!cryptoSuite) {\n      throw new Error('Missing required parameter \"cryptoSuite\"');\n    }\n    if (!key) {\n      throw new Error('Missing required parameter \"key\" for private key');\n    }\n    this._cryptoSuite = cryptoSuite;\n    this._key = key;\n  }\n\n  /**\n   * Returns the public key corresponding to the opaque, private key\n   *\n   * @returns {module:api.Key} The public key corresponding to the private key\n   */\n  getPublicKey() {\n    return this._key.getPublicKey();\n  }\n\n  /**\n   * Signs digest with the private key.\n      *\n      * Hash implements the SignerOpts interface and, in most cases, one can\n      * simply pass in the hash function used as opts. Sign may also attempt\n      * to type assert opts to other types in order to obtain algorithm\n      * specific values.\n      *\n      * Note that when a signature of a hash of a larger message is needed,\n      * the caller is responsible for hashing the larger message and passing\n      * the hash (as digest) and the hash function (as opts) to Sign.\n   *\n   * @param {byte[]} digest The message to sign\n   * @param {Object} opts\n   *      hashingFunction: the function to use to hash\n   */\n  sign(digest, opts) {\n    return this._cryptoSuite.sign(this._key, digest, opts);\n  }\n}\nmodule.exports = Signer;","map":{"version":3,"names":["Signer","constructor","cryptoSuite","key","Error","_cryptoSuite","_key","getPublicKey","sign","digest","opts","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Signer.js"],"sourcesContent":["/*\n * Copyright IBM Corp. All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n'use strict';\n\n/**\n * Signer is an interface for an opaque private key that can be used for signing operations\n *\n * @class\n */\nclass Signer {\n\t/**\n\t * @param {module:api.CryptoSuite} cryptoSuite The underlying {@link CryptoSuite} implementation for the digital\n\t * signature algorithm\n\t * @param {module:api.Key} key The private key\n\t */\n\tconstructor(cryptoSuite, key) {\n\t\tif (!cryptoSuite) {\n\t\t\tthrow new Error('Missing required parameter \"cryptoSuite\"');\n\t\t}\n\n\t\tif (!key) {\n\t\t\tthrow new Error('Missing required parameter \"key\" for private key');\n\t\t}\n\n\t\tthis._cryptoSuite = cryptoSuite;\n\t\tthis._key = key;\n\t}\n\n\t/**\n\t * Returns the public key corresponding to the opaque, private key\n\t *\n\t * @returns {module:api.Key} The public key corresponding to the private key\n\t */\n\tgetPublicKey() {\n\t\treturn this._key.getPublicKey();\n\t}\n\n\t/**\n\t * Signs digest with the private key.\n     *\n     * Hash implements the SignerOpts interface and, in most cases, one can\n     * simply pass in the hash function used as opts. Sign may also attempt\n     * to type assert opts to other types in order to obtain algorithm\n     * specific values.\n     *\n     * Note that when a signature of a hash of a larger message is needed,\n     * the caller is responsible for hashing the larger message and passing\n     * the hash (as digest) and the hash function (as opts) to Sign.\n\t *\n\t * @param {byte[]} digest The message to sign\n\t * @param {Object} opts\n\t *      hashingFunction: the function to use to hash\n\t */\n\tsign(digest, opts) {\n\t\treturn this._cryptoSuite.sign(this._key, digest, opts);\n\t}\n}\n\nmodule.exports = Signer;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,CAAC;EACZ;AACD;AACA;AACA;AACA;EACCC,WAAWA,CAACC,WAAW,EAAEC,GAAG,EAAE;IAC7B,IAAI,CAACD,WAAW,EAAE;MACjB,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;IAC5D;IAEA,IAAI,CAACD,GAAG,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;IACpE;IAEA,IAAI,CAACC,YAAY,GAAGH,WAAW;IAC/B,IAAI,CAACI,IAAI,GAAGH,GAAG;EAChB;;EAEA;AACD;AACA;AACA;AACA;EACCI,YAAYA,CAAA,EAAG;IACd,OAAO,IAAI,CAACD,IAAI,CAACC,YAAY,EAAE;EAChC;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,IAAIA,CAACC,MAAM,EAAEC,IAAI,EAAE;IAClB,OAAO,IAAI,CAACL,YAAY,CAACG,IAAI,CAAC,IAAI,CAACF,IAAI,EAAEG,MAAM,EAAEC,IAAI,CAAC;EACvD;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGZ,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}