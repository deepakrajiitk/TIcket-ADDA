{"ast":null,"code":"/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Endpoint';\nconst grpc = require('fabric-protos/grpc');\nconst urlParser = require('url');\nconst {\n  checkParameter,\n  getLogger\n} = require('./Utils.js');\nconst logger = getLogger(TYPE);\n\n/**\n * The Endpoint class represents a remote grpc or grpcs target\n * @class\n */\nclass Endpoint {\n  /**\n   *\n   * @param {object} options - All the necessary connection options.\n   *  Must include the url of the endpoint. If the protocol is grpcs\n   *  then it must also include the pem certificate for the TLS\n   *  connection.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : checkParameter('options');\n    logger.debug(`${TYPE}.constructor - start `);\n    this.type = TYPE;\n    if (!options.url) {\n      checkParameter('url');\n    }\n    this.options = options;\n    const {\n      url,\n      pem,\n      clientCert,\n      clientKey\n    } = options;\n    this.url = url;\n    const purl = urlParser.parse(url, true);\n    if (purl.protocol) {\n      this.protocol = purl.protocol.toLowerCase().slice(0, -1);\n    }\n    if (this.protocol === 'grpc') {\n      this.addr = purl.host;\n      this.creds = grpc.credentials.createInsecure();\n    } else if (this.protocol === 'grpcs') {\n      if (!(typeof pem === 'string')) {\n        throw new Error('PEM encoded certificate is required.');\n      }\n      const pembuf = Buffer.concat([Buffer.from(pem), Buffer.from('\\0')]);\n      if (clientKey || clientCert) {\n        // must have both clientKey and clientCert if either is defined\n        if (clientKey && clientCert) {\n          if (typeof clientKey === 'string' && typeof clientCert === 'string') {\n            const clientKeyBuf = Buffer.from(clientKey);\n            const clientCertBuf = Buffer.concat([Buffer.from(clientCert), Buffer.from('\\0')]);\n            this.creds = grpc.credentials.createSsl(pembuf, clientKeyBuf, clientCertBuf);\n          } else {\n            throw new Error('PEM encoded clientKey and clientCert are required.');\n          }\n        } else {\n          throw new Error('clientKey and clientCert are both required.');\n        }\n      } else {\n        this.creds = grpc.credentials.createSsl(pembuf);\n      }\n      this.addr = purl.host;\n    } else {\n      throw Error('Invalid protocol: Protocol must be grpc or grpcs');\n    }\n  }\n\n  /**\n   * Determine whether or not this endpoint uses TLS.\n   * @returns {boolean} True if this endpoint uses TLS, false otherwise.\n   */\n  isTLS() {\n    return this.protocol === 'grpcs';\n  }\n  toString() {\n    return `Endpoint: {url: ${this.url}}`;\n  }\n}\nmodule.exports = Endpoint;","map":{"version":3,"names":["TYPE","grpc","require","urlParser","checkParameter","getLogger","logger","Endpoint","constructor","options","arguments","length","undefined","debug","type","url","pem","clientCert","clientKey","purl","parse","protocol","toLowerCase","slice","addr","host","creds","credentials","createInsecure","Error","pembuf","Buffer","concat","from","clientKeyBuf","clientCertBuf","createSsl","isTLS","toString","module","exports"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/fabric-common/lib/Endpoint.js"],"sourcesContent":["/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst TYPE = 'Endpoint';\n\nconst grpc = require('fabric-protos/grpc');\nconst urlParser = require('url');\n\nconst {checkParameter, getLogger} = require('./Utils.js');\nconst logger = getLogger(TYPE);\n\n/**\n * The Endpoint class represents a remote grpc or grpcs target\n * @class\n */\nclass Endpoint {\n\t/**\n\t *\n\t * @param {object} options - All the necessary connection options.\n\t *  Must include the url of the endpoint. If the protocol is grpcs\n\t *  then it must also include the pem certificate for the TLS\n\t *  connection.\n\t */\n\tconstructor(options = checkParameter('options')) {\n\t\tlogger.debug(`${TYPE}.constructor - start `);\n\t\tthis.type = TYPE;\n\n\t\tif (!options.url) {\n\t\t\tcheckParameter('url');\n\t\t}\n\t\tthis.options = options;\n\t\tconst {url, pem, clientCert, clientKey} = options;\n\t\tthis.url = url;\n\t\tconst purl = urlParser.parse(url, true);\n\t\tif (purl.protocol) {\n\t\t\tthis.protocol = purl.protocol.toLowerCase().slice(0, -1);\n\t\t}\n\t\tif (this.protocol === 'grpc') {\n\t\t\tthis.addr = purl.host;\n\t\t\tthis.creds = grpc.credentials.createInsecure();\n\t\t} else if (this.protocol === 'grpcs') {\n\t\t\tif (!(typeof pem === 'string')) {\n\t\t\t\tthrow new Error('PEM encoded certificate is required.');\n\t\t\t}\n\t\t\tconst pembuf = Buffer.concat([Buffer.from(pem), Buffer.from('\\0')]);\n\t\t\tif (clientKey || clientCert) {\n\t\t\t\t// must have both clientKey and clientCert if either is defined\n\t\t\t\tif (clientKey && clientCert) {\n\t\t\t\t\tif ((typeof clientKey === 'string') && (typeof clientCert === 'string')) {\n\t\t\t\t\t\tconst clientKeyBuf = Buffer.from(clientKey);\n\t\t\t\t\t\tconst clientCertBuf = Buffer.concat([Buffer.from(clientCert), Buffer.from('\\0')]);\n\t\t\t\t\t\tthis.creds = grpc.credentials.createSsl(pembuf, clientKeyBuf, clientCertBuf);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('PEM encoded clientKey and clientCert are required.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('clientKey and clientCert are both required.');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.creds = grpc.credentials.createSsl(pembuf);\n\t\t\t}\n\t\t\tthis.addr = purl.host;\n\t\t} else {\n\t\t\tthrow Error('Invalid protocol: Protocol must be grpc or grpcs');\n\t\t}\n\t}\n\n\t/**\n\t * Determine whether or not this endpoint uses TLS.\n\t * @returns {boolean} True if this endpoint uses TLS, false otherwise.\n\t */\n\tisTLS() {\n\t\treturn this.protocol === 'grpcs';\n\t}\n\n\ttoString() {\n\t\treturn `Endpoint: {url: ${this.url}}`;\n\t}\n\n}\n\nmodule.exports = Endpoint;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}