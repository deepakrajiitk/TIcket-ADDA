{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2018, 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\nconst util = __importStar(require(\"util\"));\nconst EventHandlers = __importStar(require(\"./impl/event/defaulteventhandlerstrategies\"));\nconst gatewayutils_1 = require(\"./impl/gatewayutils\");\nconst query_1 = require(\"./impl/query/query\");\nconst Logger = __importStar(require(\"./logger\"));\nconst logger = Logger.getLogger('Transaction');\nfunction getResponsePayload(proposalResponse) {\n  const validEndorsementResponse = getValidEndorsementResponse(proposalResponse.responses);\n  if (!validEndorsementResponse) {\n    const error = newEndorsementError(proposalResponse);\n    logger.error('%s', error);\n    throw error;\n  }\n  const payload = (0, gatewayutils_1.getTransactionResponse)(validEndorsementResponse).payload;\n  return (0, gatewayutils_1.asBuffer)(payload);\n}\nfunction getValidEndorsementResponse(endorsementResponses) {\n  return endorsementResponses.find(endorsementResponse => endorsementResponse.endorsement);\n}\nfunction newEndorsementError(proposalResponse) {\n  var _a, _b;\n  const errorInfos = [];\n  for (const error of proposalResponse.errors) {\n    const errorInfo = {\n      peer: (_a = error === null || error === void 0 ? void 0 : error.connection) === null || _a === void 0 ? void 0 : _a.name,\n      status: 'grpc',\n      message: error.message\n    };\n    errorInfos.push(errorInfo);\n  }\n  for (const endorsement of proposalResponse.responses) {\n    const errorInfo = {\n      peer: (_b = endorsement === null || endorsement === void 0 ? void 0 : endorsement.connection) === null || _b === void 0 ? void 0 : _b.name,\n      status: endorsement.response.status,\n      message: endorsement.response.message\n    };\n    errorInfos.push(errorInfo);\n  }\n  const messages = ['No valid responses from any peers. Errors:'];\n  for (const errorInfo of errorInfos) {\n    messages.push(util.format('peer=%s, status=%s, message=%s', errorInfo.peer, errorInfo.status, errorInfo.message));\n  }\n  return new Error(messages.join('\\n    '));\n}\nfunction isInteger(value) {\n  return Number.isInteger(value);\n}\n/**\n * Represents a specific invocation of a transaction function, and provides\n * flexibility over how that transaction is invoked. Applications should\n * obtain instances of this class by calling\n * [Contract#createTransaction()]{@link module:fabric-network.Contract#createTransaction}.\n * <br><br>\n * Instances of this class are stateful. A new instance <strong>must</strong>\n * be created for each transaction invocation.\n * @memberof module:fabric-network\n * @hideconstructor\n */\nclass Transaction {\n  /**\n   * Transaction instances should be obtained only by calling\n   * [Contract.createTransaction()]{@link module:fabric-network.Contract#createTransaction}. This constructor should\n   * not be used directly.\n   */\n  constructor(contract, name, state) {\n    var _a;\n    const method = `constructor[${name}]`;\n    logger.debug('%s - start', method);\n    this.name = name;\n    this.contract = contract;\n    this.gatewayOptions = contract.gateway.getOptions();\n    this.eventHandlerStrategyFactory = this.gatewayOptions.eventHandlerOptions.strategy || EventHandlers.NONE;\n    this.queryHandler = contract.network.queryHandler;\n    if (!state) {\n      // Store the returned copy to prevent state being modified by other code before it is used to send proposals\n      this.identityContext = contract.gateway.identityContext.calculateTransactionId();\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.identityContext = contract.gateway.identityContext.clone({\n        nonce: Buffer.from(state.nonce, 'base64'),\n        transactionId: state.transactionId\n      });\n      this.endorsingOrgs = state.endorsingOrgs;\n      this.endorsingPeers = (_a = state.endorsingPeers) === null || _a === void 0 ? void 0 : _a.map(peerName => contract.network.getChannel().getEndorser(peerName)).filter(endorser => endorser !== undefined);\n      if (state.transientData) {\n        this.transientMap = {};\n        for (const [key, value] of Object.entries(state.transientData)) {\n          this.transientMap[key] = Buffer.from(value, 'base64');\n        }\n      }\n    }\n  }\n  /**\n   * Get the fully qualified name of the transaction function.\n   * @returns {string} Transaction name.\n   */\n  getName() {\n    return this.name;\n  }\n  /**\n   * Set transient data that will be passed to the transaction function\n   * but will not be stored on the ledger. This can be used to pass\n   * private data to a transaction function.\n   * @param {Object} transientMap Object with String property names and\n   * Buffer property values.\n   * @returns {module:fabric-network.Transaction} This object, to allow function chaining.\n   */\n  setTransient(transientMap) {\n    const method = `setTransient[${this.name}]`;\n    logger.debug('%s - start', method);\n    this.transientMap = transientMap;\n    return this;\n  }\n  /**\n   * Get the ID that will be used for this transaction invocation.\n   * @returns {string} A transaction ID.\n   */\n  getTransactionId() {\n    return this.identityContext.transactionId;\n  }\n  /**\n   * Set the peers that should be used for endorsement when this transaction\n   * is submitted to the ledger.\n   * Setting the peers will override the use of discovery and the submit will\n   * send the proposal to these peers.\n   * This will override the setEndorsingOrganizations if previously called.\n   * @param {Endorser[]} peers - Endorsing peers.\n   * @returns {module:fabric-network.Transaction} This object, to allow function chaining.\n   */\n  setEndorsingPeers(peers) {\n    const method = `setEndorsingPeers[${this.name}]`;\n    logger.debug('%s - start', method);\n    this.endorsingPeers = peers;\n    this.endorsingOrgs = undefined;\n    return this;\n  }\n  /**\n   * Set the organizations that should be used for endorsement when this\n   * transaction is submitted to the ledger.\n   * Peers that are in the organizations will be used for the endorsement.\n   * This will override the setEndorsingPeers if previously called. Setting\n   * the endorsing organizations will not override discovery, however it will\n   * filter the peers provided by discovery to be those in these organizatons.\n   * @param {string[]} orgs - Endorsing organizations.\n   * @returns {module:fabric-network.Transaction} This object, to allow function chaining.\n   */\n  setEndorsingOrganizations() {\n    const method = `setEndorsingOrganizations[${this.name}]`;\n    logger.debug('%s - start', method);\n    for (var _len = arguments.length, orgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      orgs[_key] = arguments[_key];\n    }\n    this.endorsingOrgs = orgs;\n    this.endorsingPeers = undefined;\n    return this;\n  }\n  /**\n   * Set an event handling strategy to use for this transaction instead of the default configured on the gateway.\n   * @param strategy An event handling strategy.\n   * @returns {module:fabric-network.Transaction} This object, to allow function chaining.\n   */\n  setEventHandler(strategy) {\n    this.eventHandlerStrategyFactory = strategy;\n    return this;\n  }\n  /**\n   * Submit a transaction to the ledger. The transaction function <code>name</code>\n   * will be evaluated on the endorsing peers and then submitted to the ordering service\n   * for committing to the ledger.\n   * @async\n   * @param {...string} [args] Transaction function arguments.\n   * @returns {Buffer} Payload response from the transaction function.\n   * @throws {module:fabric-network.TimeoutError} If the transaction was successfully submitted to the orderer but\n   * timed out before a commit event was received from peers.\n   * @throws {module:fabric-network.TransactionError} If the transaction committed with an unsuccessful transaction\n   * validation code, and so did not update the ledger.\n   */\n  async submit() {\n    const method = `submit[${this.name}]`;\n    logger.debug('%s - start', method);\n    const channel = this.contract.network.getChannel();\n    const transactionOptions = this.gatewayOptions.eventHandlerOptions;\n    // This is the object that will centralize this endorsement activities\n    // with the fabric network\n    const endorsement = channel.newEndorsement(this.contract.chaincodeId);\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    const proposalBuildRequest = this.newBuildProposalRequest(args);\n    logger.debug('%s - build and send the endorsement', method);\n    // build the outbound request along with getting a new transactionId\n    // from the identity context\n    endorsement.build(this.identityContext, proposalBuildRequest);\n    endorsement.sign(this.identityContext);\n    // ------- S E N D   P R O P O S A L\n    // This is where the request gets sent to the peers\n    const proposalSendRequest = {};\n    if (isInteger(transactionOptions.endorseTimeout)) {\n      proposalSendRequest.requestTimeout = transactionOptions.endorseTimeout * 1000; // in ms;\n    }\n\n    if (this.endorsingPeers) {\n      logger.debug('%s - user has assigned targets', method);\n      proposalSendRequest.targets = this.endorsingPeers;\n    } else if (this.contract.network.discoveryService) {\n      logger.debug('%s - discovery handler will be used for endorsing', method);\n      proposalSendRequest.handler = await this.contract.getDiscoveryHandler();\n      if (this.endorsingOrgs) {\n        logger.debug('%s - using discovery and user has assigned endorsing orgs %s', method, this.endorsingOrgs);\n        proposalSendRequest.requiredOrgs = this.endorsingOrgs;\n      }\n    } else if (this.endorsingOrgs) {\n      logger.debug('%s - user has assigned endorsing orgs %s', method, this.endorsingOrgs);\n      const flatten = (accumulator, value) => {\n        accumulator.push(...value);\n        return accumulator;\n      };\n      proposalSendRequest.targets = this.endorsingOrgs.map(mspid => channel.getEndorsers(mspid)).reduce(flatten, []);\n    } else {\n      logger.debug('%s - targets will default to all that are assigned to this channel', method);\n      proposalSendRequest.targets = channel.getEndorsers();\n    }\n    // by now we should have targets or a discovery handler to be used\n    // by the send() of the proposal instance\n    const proposalResponse = await endorsement.send(proposalSendRequest);\n    try {\n      const result = getResponsePayload(proposalResponse);\n      // ------- E V E N T   M O N I T O R\n      const eventHandler = this.eventHandlerStrategyFactory(endorsement.getTransactionId(), this.contract.network);\n      await eventHandler.startListening();\n      const commit = endorsement.newCommit();\n      commit.build(this.identityContext);\n      commit.sign(this.identityContext);\n      // -----  C O M M I T   E N D O R S E M E N T\n      // this is where the endorsement results are sent to the orderer\n      const commitSendRequest = {};\n      if (isInteger(transactionOptions.commitTimeout)) {\n        commitSendRequest.requestTimeout = transactionOptions.commitTimeout * 1000; // in ms;\n      }\n\n      if (proposalSendRequest.handler) {\n        logger.debug('%s - use discovery to commit', method);\n        commitSendRequest.handler = proposalSendRequest.handler;\n      } else {\n        logger.debug('%s - use the orderers assigned to the channel', method);\n        commitSendRequest.targets = channel.getCommitters();\n      }\n      // by now we should have a discovery handler or use the target orderers\n      // that have been assigned from the channel to perform the commit\n      const commitResponse = await commit.send(commitSendRequest);\n      logger.debug('%s - commit response %j', method, commitResponse);\n      if (commitResponse.status !== 'SUCCESS') {\n        const msg = `Failed to commit transaction %${endorsement.getTransactionId()}, orderer response status: ${commitResponse.status}`;\n        logger.error('%s - %s', method, msg);\n        eventHandler.cancelListening();\n        throw new Error(msg);\n      } else {\n        logger.debug('%s - successful commit', method);\n      }\n      logger.debug('%s - wait for the transaction to be committed on the peer', method);\n      await eventHandler.waitForEvents();\n      return result;\n    } catch (err) {\n      err.responses = proposalResponse.responses;\n      err.errors = proposalResponse.errors;\n      throw err;\n    }\n  }\n  /**\n   * Evaluate a transaction function and return its results.\n   * The transaction function will be evaluated on the endorsing peers but\n   * the responses will not be sent to the ordering service and hence will\n   * not be committed to the ledger.\n   * This is used for querying the world state.\n   * @async\n   * @param {...string} [args] Transaction function arguments.\n   * @returns {Promise<Buffer>} Payload response from the transaction function.\n   */\n  async evaluate() {\n    const method = `evaluate[${this.name}]`;\n    logger.debug('%s - start', method);\n    const queryProposal = this.contract.network.getChannel().newQuery(this.contract.chaincodeId);\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    const request = this.newBuildProposalRequest(args);\n    logger.debug('%s - build and sign the query', method);\n    queryProposal.build(this.identityContext, request);\n    queryProposal.sign(this.identityContext);\n    const query = new query_1.QueryImpl(queryProposal, this.gatewayOptions.queryHandlerOptions);\n    logger.debug('%s - handler will send', method);\n    const results = await this.queryHandler.evaluate(query);\n    logger.debug('%s - queryHandler completed', method);\n    return results;\n  }\n  /**\n   * Extract the state of this transaction in a form that can be reconstructed using\n   * [Contract#deserializeTransaction()]{@link module:fabric-network.Contract#deserializeTransaction}. This allows a\n   * transaction to persisted, and then reconstructed and resubmitted following a client application restart. There is\n   * no guarantee of compatibility for the serialized data between different versions of this package.\n   * @returns {Buffer} A serialized transaction.\n   */\n  serialize() {\n    var _a;\n    const state = {\n      name: this.name,\n      nonce: this.identityContext.nonce.toString('base64'),\n      transactionId: this.identityContext.transactionId,\n      endorsingOrgs: this.endorsingOrgs,\n      endorsingPeers: (_a = this.endorsingPeers) === null || _a === void 0 ? void 0 : _a.map(endorser => endorser.name)\n    };\n    if (this.transientMap) {\n      state.transientData = {};\n      for (const [key, value] of Object.entries(this.transientMap)) {\n        state.transientData[key] = value.toString('base64');\n      }\n    }\n    const json = JSON.stringify(state);\n    return Buffer.from(json);\n  }\n  newBuildProposalRequest(args) {\n    const request = {\n      fcn: this.name,\n      args: args,\n      generateTransactionId: false\n    };\n    if (this.transientMap) {\n      request.transientMap = this.transientMap;\n    }\n    return request;\n  }\n}\nexports.Transaction = Transaction;","map":{"version":3,"names":["util","__importStar","require","EventHandlers","gatewayutils_1","query_1","Logger","logger","getLogger","getResponsePayload","proposalResponse","validEndorsementResponse","getValidEndorsementResponse","responses","error","newEndorsementError","payload","getTransactionResponse","asBuffer","endorsementResponses","find","endorsementResponse","endorsement","errorInfos","errors","errorInfo","peer","_a","connection","name","status","message","push","_b","response","messages","format","Error","join","isInteger","value","Number","Transaction","constructor","contract","state","method","debug","gatewayOptions","gateway","getOptions","eventHandlerStrategyFactory","eventHandlerOptions","strategy","NONE","queryHandler","network","identityContext","calculateTransactionId","clone","nonce","Buffer","from","transactionId","endorsingOrgs","endorsingPeers","map","peerName","getChannel","getEndorser","filter","endorser","undefined","transientData","transientMap","key","Object","entries","getName","setTransient","getTransactionId","setEndorsingPeers","peers","setEndorsingOrganizations","_len","arguments","length","orgs","Array","_key","setEventHandler","submit","channel","transactionOptions","newEndorsement","chaincodeId","_len2","args","_key2","proposalBuildRequest","newBuildProposalRequest","build","sign","proposalSendRequest","endorseTimeout","requestTimeout","targets","discoveryService","handler","getDiscoveryHandler","requiredOrgs","flatten","accumulator","mspid","getEndorsers","reduce","send","result","eventHandler","startListening","commit","newCommit","commitSendRequest","commitTimeout","getCommitters","commitResponse","msg","cancelListening","waitForEvents","err","evaluate","queryProposal","newQuery","_len3","_key3","request","query","QueryImpl","queryHandlerOptions","results","serialize","toString","json","JSON","stringify","fcn","generateTransactionId","exports"],"sources":["../src/transaction.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}