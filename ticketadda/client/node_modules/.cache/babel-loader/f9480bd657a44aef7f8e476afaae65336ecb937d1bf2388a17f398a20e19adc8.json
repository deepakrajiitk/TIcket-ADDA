{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2018, 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Gateway = exports.mergeOptions = void 0;\nconst network_1 = require(\"./network\");\nconst NetworkConfig = __importStar(require(\"./impl/ccp/networkconfig\"));\nconst fabric_common_1 = require(\"fabric-common\");\nconst EventStrategies = __importStar(require(\"./impl/event/defaulteventhandlerstrategies\"));\nconst QueryStrategies = __importStar(require(\"./impl/query/defaultqueryhandlerstrategies\"));\nconst IdentityProviderRegistry = __importStar(require(\"./impl/wallet/identityproviderregistry\"));\nconst Logger = __importStar(require(\"./logger\"));\nconst logger = Logger.getLogger('Gateway');\nfunction mergeOptions(currentOptions, additionalOptions) {\n  const result = currentOptions;\n  for (const prop in additionalOptions) {\n    if (typeof additionalOptions[prop] === 'object' && additionalOptions[prop] !== null) {\n      if (result[prop] === undefined) {\n        result[prop] = additionalOptions[prop];\n      } else {\n        mergeOptions(result[prop], additionalOptions[prop]);\n      }\n    } else {\n      result[prop] = additionalOptions[prop];\n    }\n  }\n  return result;\n}\nexports.mergeOptions = mergeOptions;\n/**\n * @interface GatewayOptions\n * @memberof module:fabric-network\n * @property {(string|module:fabric-network.Identity)} identity The identity used for all interactions on this Gateway\n * instance. This can be either:\n * <ul>\n *   <li>a label matching an identity within the supplied wallet.</li>\n *   <li>an identity object.</li>\n * </ul\n * @property {module:fabric-network.Wallet} [wallet] The identity wallet implementation for use with this Gateway\n * instance. Required if a label is specified as the <code>identity</code>, or <code>clientTlsIdentity</code> is specified.\n * @property {module:fabric-network.IdentityProvider} [identityProvider] An identity provider for the supplied identity\n * object. Required if an identity object is not one of the default supported types.\n * @property {string} [clientTlsIdentity] The identity within the wallet to use as the client TLS identity.\n * @property {object} [tlsInfo] Credentials to use as the client TLS identity.\n * @property {string} tlsInfo.certificate Certificate PEM.\n * @property {string} tlsInfo.key Private key PEM.\n * @property {module:fabric-network.DefaultEventHandlerOptions} [eventHandlerOptions]\n * Options for event handling when submitting transactions.\n * @property {module:fabric-network.DefaultQueryHandlerOptions} [queryHandlerOptions]\n * Options for query handling when evaluating transactions.\n * @property {module:fabric-network.DiscoveryOptions} [discovery] Discovery options.\n */\n/**\n * @interface DefaultEventHandlerOptions\n * @memberof module:fabric-network\n * @property {number} [commitTimeout = 300] The timeout period in seconds to wait\n * for commit notification to complete.\n * @property {number} [endorseTimeout = 30] The timeout period in seconds to wait\n * for the endorsement to complete.\n * @property {?module:fabric-network.TxEventHandlerFactory} [strategy=PREFER_MSPID_SCOPE_ALLFORTX]\n * Event handling strategy to identify successful transaction commits. A <code>null</code> value indicates that no\n * event handling is desired. The default is\n * [PREFER_MSPID_SCOPE_ALLFORTX]{@link module:fabric-network.DefaultEventHandlerStrategies}.\n */\n/**\n * @interface DefaultQueryHandlerOptions\n * @memberof module:fabric-network\n * @property {number} [timeout = 30] The timeout period in seconds to wait for the query to\n * complete.\n * @property {module:fabric-network.QueryHandlerFactory} [strategy=PREFER_MSPID_SCOPE_SINGLE]\n * Query handling strategy used to evaluate queries. The default is\n * [PREFER_MSPID_SCOPE_SINGLE]{@link module:fabric-network.DefaultQueryHandlerStrategies}.\n */\n/**\n * @interface DiscoveryOptions\n * @memberof module:fabric-network\n * @property {boolean} [enabled=true] True if discovery should be used; otherwise false.\n * @property {boolean} [asLocalhost=true] Convert discovered host addresses to be 'localhost'.\n * Will be needed when running a docker composed fabric network on the local system;\n * otherwise should be disabled.\n */\n/**\n * Factory function to obtain transaction event handler instances. Called on every transaction submit.\n * @typedef {function} TxEventHandlerFactory\n * @memberof module:fabric-network\n * @param {string} transactionId The ID of the transaction being submitted.\n * @param {module:fabric-network.Network} network The network on which this transaction is being submitted.\n * @returns {module:fabric-network.TxEventHandler} A transaction event handler.\n * @see module:fabric-network.DefaultEventHandlerStrategies\n */\n/**\n * Handler used to wait for commit events when a transaction is submitted.\n * @interface TxEventHandler\n * @memberof module:fabric-network\n */\n/**\n * Resolves when the handler has started listening for transaction commit events. Called after the transaction proposal\n * has been accepted and prior to submission of the transaction to the orderer.\n * @function module:fabric-network.TxEventHandler#startListening\n * @async\n * @returns {Promise<void>}\n */\n/**\n * Resolves (or rejects) when suitable transaction commit events have been received. Called after submission of the\n * transaction to the orderer.\n * @function module:fabric-network.TxEventHandler#waitForEvents\n * @async\n * @returns {Promise<void>}\n */\n/**\n * Called if submission of the transaction to the orderer fails.\n * @function module:fabric-network.TxEventHandler#cancelListening\n * @returns {void}\n */\n/**\n * Factory function to obtain query handler instances. Called on every network creation.\n * @typedef {Function} QueryHandlerFactory\n * @memberof module:fabric-network\n * @param {module:fabric-network.Network} network The network on which queries are being evaluated.\n * @returns {module:fabric-network.QueryHandler} A query handler.\n * @see module:fabric-network.DefaultQueryHandlerStrategies\n */\n/**\n * Handler used to obtain query results from peers when a transaction is evaluated.\n * @interface QueryHandler\n * @memberof module:fabric-network\n */\n/**\n * Called when a transaction is evaluated to obtain query results from suitable network peers.\n * @function module:fabric-network.QueryHandler#evaluate\n * @async\n * @param {module:fabric-network.Query} query Query object that can be used by the handler to send the query to\n * specific peers.\n * @returns {Promise<Buffer>}\n */\n/**\n * Used by query handler implementations to evaluate transactions on peers of their choosing.\n * @interface Query\n * @memberof module:fabric-network\n */\n/**\n * Get query results from specified peers.\n * @function module:fabric-network.Query#evaluate\n * @async\n * @param {Endorser[]} peers\n * @returns {Promise<Array<module:fabric-network.Query~QueryResponse | Error>>}\n */\n/**\n * @typedef {Object} Query~QueryResponse\n * @memberof module:fabric-network\n * @property {boolean} isEndorsed True if the proposal was endorsed by the peer.\n * @property {number} status The status value from the endorsement. This attribute will be set by the chaincode.\n * @property {Buffer} payload The payload value from the endorsement. This attribute may be considered the query value\n * if the proposal was endorsed by the peer.\n * @property {string} message The message value from the endorsement. This property contains the error message from\n * the peer if it did not endorse the proposal.\n */\n/**\n * The gateway peer provides the connection point for an application to access the Fabric network.\n * It is instantiated using the default constructor.\n * It can then be connected to a fabric network using the [connect]{@link #connect} method by\n * passing either a common connection profile definition or an existing {@link Client} object.\n * Once connected, it can then access individual Network instances (channels) using the\n * [getNetwork]{@link #getNetwork} method which in turn can access the\n * [smart contracts]{@link Contract} installed on a network and\n * [submit transactions]{@link Contract#submitTransaction} to the ledger.\n * @memberof module:fabric-network\n */\nclass Gateway {\n  constructor() {\n    this.networks = new Map();\n    logger.debug('in Gateway constructor');\n  }\n  /**\n   * Connect to the Gateway with a connection profile or a prebuilt Client instance.\n   * @async\n   * @param {(object|Client)} config The configuration for this Gateway which can be:\n   * <ul>\n   *   <li>A common connection profile JSON (Object)</li>\n   *   <li>A pre-configured client instance</li>\n   * </ul>\n   * @param {module:fabric-network.GatewayOptions} options - specific options\n   * for creating this Gateway instance\n   * @example\n   * const gateway = new Gateway();\n   * const wallet = await Wallets.newFileSystemWallet('./WALLETS/wallet');\n   * const connectionProfileJson = (await fs.promises.readFile('network.json')).toString();\n   * const connectionProfile = JSON.parse(connectionProfileJson);\n   * await gateway.connect(connectionProfile, {\n   *     identity: 'admin',\n   *     wallet: wallet\n   * });\n   */\n  async connect(config, options) {\n    const method = 'connect';\n    logger.debug('%s - start', method);\n    const defaultOptions = {\n      queryHandlerOptions: {\n        timeout: 30,\n        strategy: QueryStrategies.PREFER_MSPID_SCOPE_SINGLE\n      },\n      eventHandlerOptions: {\n        endorseTimeout: 30,\n        commitTimeout: 300,\n        strategy: EventStrategies.PREFER_MSPID_SCOPE_ALLFORTX\n      },\n      discovery: {\n        enabled: true,\n        asLocalhost: true\n      }\n    };\n    this.options = mergeOptions(defaultOptions, options);\n    logger.debug('gateway options: %j', options);\n    let loadCcp = false;\n    if (config instanceof fabric_common_1.Client) {\n      // initialize from an existing Client object instance\n      logger.debug('%s - using existing client object', method);\n      this.client = config;\n    } else if (typeof config === 'object') {\n      this.client = new fabric_common_1.Client('gateway client');\n      loadCcp = true;\n    } else {\n      throw new Error('Configuration must be a connection profile object or Client object');\n    }\n    // setup an initial identity for the Gateway\n    if (typeof options.identity === 'string') {\n      logger.debug('%s - setting identity from wallet', method);\n      this.identity = await this._getWalletIdentity(options.identity);\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const provider = options.wallet.getProviderRegistry().getProvider(this.identity.type);\n      const user = await provider.getUserContext(this.identity, options.identity);\n      this.identityContext = this.client.newIdentityContext(user);\n    } else if (typeof options.identity === 'object') {\n      logger.debug('%s - setting identity using identity object', method);\n      this.identity = options.identity;\n      const provider = options.identityProvider || IdentityProviderRegistry.newDefaultProviderRegistry().getProvider(this.identity.type);\n      const user = await provider.getUserContext(this.identity, 'gateway identity');\n      this.identityContext = this.client.newIdentityContext(user);\n    } else {\n      logger.error('%s - An identity must be assigned to a Gateway instance', method);\n      throw new Error('An identity must be assigned to a Gateway instance');\n    }\n    if (options.clientTlsIdentity) {\n      logger.debug('%s - setting tlsIdentity', method);\n      const tlsIdentity = await this._getWalletIdentity(options.clientTlsIdentity);\n      if (tlsIdentity.type !== 'X.509') {\n        throw new Error('Unsupported TLS identity type: ' + tlsIdentity.type);\n      }\n      const tlsCredentials = tlsIdentity.credentials;\n      this.client.setTlsClientCertAndKey(tlsCredentials.certificate, tlsCredentials.privateKey);\n    } else if (options.tlsInfo) {\n      logger.debug('%s - setting tlsInfo', method);\n      this.client.setTlsClientCertAndKey(options.tlsInfo.certificate, options.tlsInfo.key);\n    } else {\n      logger.debug('%s - using self signed setting for tls', method);\n      this.client.setTlsClientCertAndKey();\n    }\n    // apply any connection options to the client instance for use\n    // internally by the client instance when building a complete set\n    // of connection options for an endpoint\n    // these will be merged with those from the config (default.json)\n    if (options['connection-options']) {\n      this.client.setCentralizedConnectionOptions(options['connection-options']);\n      logger.debug('%s - assigned connection options');\n    }\n    // Load connection profile after client configuration has been completed\n    if (loadCcp) {\n      logger.debug('%s - NetworkConfig loading client from ccp', method);\n      await NetworkConfig.loadFromConfig(this.client, config);\n    }\n    logger.debug('%s - end', method);\n  }\n  /**\n   * Get the identity associated with the gateway connection.\n   * @returns {module:fabric-network.Identity} An identity.\n   */\n  getIdentity() {\n    if (!this.identity) {\n      throw new Error('Gateway is not connected');\n    }\n    return this.identity;\n  }\n  /**\n   * Returns the set of options associated with the Gateway connection\n   * @returns {module:fabric-network.Gateway~GatewayOptions} The Gateway connection options\n   */\n  getOptions() {\n    if (!this.options) {\n      throw new Error('Gateway is not connected');\n    }\n    return this.options;\n  }\n  /**\n   * Clean up and disconnect this Gateway connection in preparation for it to be discarded and garbage collected\n   */\n  disconnect() {\n    var _a;\n    logger.debug('in disconnect');\n    this.networks.forEach(network => network._dispose());\n    this.networks.clear();\n    (_a = this.client) === null || _a === void 0 ? void 0 : _a.close();\n  }\n  /**\n   * Returns an object representing a network\n   * @param {string} networkName The name of the network (channel name)\n   * @returns {module:fabric-network.Network}\n   */\n  async getNetwork(networkName) {\n    const method = 'getNetwork';\n    logger.debug('%s - start', method);\n    if (!this.client || !this.options) {\n      throw new Error('Gateway is not connected');\n    }\n    const existingNetwork = this.networks.get(networkName);\n    if (existingNetwork) {\n      logger.debug('%s - returning existing network:%s', method, networkName);\n      return existingNetwork;\n    }\n    logger.debug('%s - create network object and initialize', method);\n    const channel = this.client.getChannel(networkName);\n    const newNetwork = new network_1.NetworkImpl(this, channel);\n    await newNetwork._initialize(this.options.discovery);\n    this.networks.set(networkName, newNetwork);\n    return newNetwork;\n  }\n  async _getWalletIdentity(label) {\n    var _a;\n    if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.wallet)) {\n      throw new Error('No wallet supplied from which to retrieve identity label');\n    }\n    const identity = await this.options.wallet.get(label);\n    if (!identity) {\n      throw new Error(`Identity not found in wallet: ${label}`);\n    }\n    return identity;\n  }\n}\nexports.Gateway = Gateway;","map":{"version":3,"names":["network_1","require","NetworkConfig","__importStar","fabric_common_1","EventStrategies","QueryStrategies","IdentityProviderRegistry","Logger","logger","getLogger","mergeOptions","currentOptions","additionalOptions","result","prop","undefined","exports","Gateway","constructor","networks","Map","debug","connect","config","options","method","defaultOptions","queryHandlerOptions","timeout","strategy","PREFER_MSPID_SCOPE_SINGLE","eventHandlerOptions","endorseTimeout","commitTimeout","PREFER_MSPID_SCOPE_ALLFORTX","discovery","enabled","asLocalhost","loadCcp","Client","client","Error","identity","_getWalletIdentity","provider","wallet","getProviderRegistry","getProvider","type","user","getUserContext","identityContext","newIdentityContext","identityProvider","newDefaultProviderRegistry","error","clientTlsIdentity","tlsIdentity","tlsCredentials","credentials","setTlsClientCertAndKey","certificate","privateKey","tlsInfo","key","setCentralizedConnectionOptions","loadFromConfig","getIdentity","getOptions","disconnect","forEach","network","_dispose","clear","_a","close","getNetwork","networkName","existingNetwork","get","channel","getChannel","newNetwork","NetworkImpl","_initialize","set","label"],"sources":["../src/gateway.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}