{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallets = void 0;\nconst couchdbwalletstore_1 = require(\"./couchdbwalletstore\");\nconst filesystemwalletstore_1 = require(\"./filesystemwalletstore\");\nconst inmemorywalletstore_1 = require(\"./inmemorywalletstore\");\nconst wallet_1 = require(\"./wallet\");\n/**\n * Factory for creating wallets backed by default store implementations.\n * @memberof module:fabric-network\n */\nclass Wallets {\n  /**\n   * Create a wallet backed by an in-memory (non-persistent) store. Each wallet instance created will have its own\n   * private in-memory store.\n   * @returns {Promise<module:fabric-network.Wallet>} A wallet.\n   */\n  static newInMemoryWallet() {\n    const store = new inmemorywalletstore_1.InMemoryWalletStore();\n    return Promise.resolve(new wallet_1.Wallet(store));\n  }\n  /**\n   * Create a wallet backed by the provided file system directory.\n   * @param {string} directory A directory path.\n   * @returns {Promise<module:fabric-network.Wallet>} A wallet.\n   */\n  static async newFileSystemWallet(directory) {\n    const store = await filesystemwalletstore_1.FileSystemWalletStore.newInstance(directory);\n    return new wallet_1.Wallet(store);\n  }\n  /**\n   * Create a wallet backed by a CouchDB database.\n   * @param {string | nano.Configuration} config URL string or configuration for a CouchDB server.\n   * @param {string} [dbName=wallet] Name of a database hosted on the CouchDB server.\n   * @returns {Promise<module:fabric-network.Wallet>} A wallet.\n   */\n  static async newCouchDBWallet(config) {\n    let dbName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'wallet';\n    const store = await couchdbwalletstore_1.CouchDBWalletStore.newInstance(config, dbName);\n    return new wallet_1.Wallet(store);\n  }\n}\nexports.Wallets = Wallets;","map":{"version":3,"names":["couchdbwalletstore_1","require","filesystemwalletstore_1","inmemorywalletstore_1","wallet_1","Wallets","newInMemoryWallet","store","InMemoryWalletStore","Promise","resolve","Wallet","newFileSystemWallet","directory","FileSystemWalletStore","newInstance","newCouchDBWallet","config","dbName","arguments","length","undefined","CouchDBWalletStore","exports"],"sources":["../../../src/impl/wallet/wallets.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;AAMA,MAAAA,oBAAA,GAAAC,OAAA;AACA,MAAAC,uBAAA,GAAAD,OAAA;AACA,MAAAE,qBAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAH,OAAA;AAIA;;;;AAIA,MAAaI,OAAO;EACnB;;;;;EAKO,OAAQC,iBAAiBA,CAAA;IAC/B,MAAMC,KAAK,GAAG,IAAIJ,qBAAA,CAAAK,mBAAmB,EAAE;IACvC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAIN,QAAA,CAAAO,MAAM,CAACJ,KAAK,CAAC,CAAC;EAC1C;EAEA;;;;;EAKO,aAAaK,mBAAmBA,CAACC,SAAiB;IACxD,MAAMN,KAAK,GAAG,MAAML,uBAAA,CAAAY,qBAAqB,CAACC,WAAW,CAACF,SAAS,CAAC;IAChE,OAAO,IAAIT,QAAA,CAAAO,MAAM,CAACJ,KAAK,CAAC;EACzB;EAEA;;;;;;EAMO,aAAaS,gBAAgBA,CAACC,MAAmC,EAAmB;IAAA,IAAjBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;IAC1F,MAAMZ,KAAK,GAAG,MAAMP,oBAAA,CAAAsB,kBAAkB,CAACP,WAAW,CAACE,MAAM,EAAEC,MAAM,CAAC;IAClE,OAAO,IAAId,QAAA,CAAAO,MAAM,CAACJ,KAAK,CAAC;EACzB;;AA9BDgB,OAAA,CAAAlB,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}