{"ast":null,"code":"/*\n * file.js: Simple file storage engine for nconf files\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar fs = require('fs'),\n  path = require('path'),\n  util = require('util'),\n  Secure = require('secure-keys'),\n  formats = require('../formats'),\n  Memory = require('./memory').Memory;\nvar exists = fs.exists || path.exists,\n  existsSync = fs.existsSync || path.existsSync;\n\n//\n// ### function File (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the File nconf store, a simple abstraction\n// around the Memory store that can persist configuration to disk.\n//\nvar File = exports.File = function (options) {\n  if (!options || !options.file) {\n    throw new Error('Missing required option `file`');\n  }\n  Memory.call(this, options);\n  this.type = 'file';\n  this.file = options.file;\n  this.dir = options.dir || process.cwd();\n  this.format = options.format || formats.json;\n  this.secure = options.secure;\n  this.spacing = options.json_spacing || options.spacing || 2;\n  if (this.secure) {\n    this.secure = Buffer.isBuffer(this.secure) || typeof this.secure === 'string' ? {\n      secret: this.secure.toString()\n    } : this.secure;\n    this.secure.alg = this.secure.alg || 'aes-256-ctr';\n    if (this.secure.secretPath) {\n      this.secure.secret = fs.readFileSync(this.secure.secretPath, 'utf8');\n    }\n    if (!this.secure.secret) {\n      throw new Error('secure.secret option is required');\n    }\n    this.keys = new Secure({\n      secret: this.secure.secret,\n      alg: this.secure.alg,\n      format: this.format\n    });\n  }\n  if (options.search) {\n    this.search(this.dir);\n  }\n};\n\n// Inherit from the Memory store\nutil.inherits(File, Memory);\n\n//\n// ### function save (value, callback)\n// #### @value {Object} _Ignored_ Left here for consistency\n// #### @callback {function} Continuation to respond to when complete.\n// Saves the current configuration object to disk at `this.file`\n// using the format specified by `this.format`.\n//\nFile.prototype.save = function (value, callback) {\n  this.saveToFile(this.file, value, callback);\n};\n\n//\n// ### function saveToFile (path, value, callback)\n// #### @path {string} The path to the file where we save the configuration to  \n// #### @format {Object} Optional formatter, default behing the one of the store\n// #### @callback {function} Continuation to respond to when complete.\n// Saves the current configuration object to disk at `this.file`\n// using the format specified by `this.format`.\n//\nFile.prototype.saveToFile = function (path, format, callback) {\n  if (!callback) {\n    callback = format;\n    format = this.format;\n  }\n  fs.writeFile(path, this.stringify(format), callback);\n};\n\n//\n// ### function saveSync (value, callback)\n// Saves the current configuration object to disk at `this.file`\n// using the format specified by `this.format` synchronously.\n//\nFile.prototype.saveSync = function () {\n  fs.writeFileSync(this.file, this.stringify());\n  return this.store;\n};\n\n//\n// ### function load (callback)\n// #### @callback {function} Continuation to respond to when complete.\n// Responds with an Object representing all keys associated in this instance.\n//\nFile.prototype.load = function (callback) {\n  var self = this;\n  exists(self.file, function (exists) {\n    if (!exists) {\n      return callback(null, {});\n    }\n\n    //\n    // Else, the path exists, read it from disk\n    //\n    fs.readFile(self.file, function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      try {\n        // Deals with string that include BOM\n        var stringData = data.toString();\n        if (stringData.charAt(0) === '\\uFEFF') {\n          stringData = stringData.substr(1);\n        }\n        self.store = self.parse(stringData);\n      } catch (ex) {\n        return callback(new Error(\"Error parsing your configuration file: [\" + self.file + ']: ' + ex.message));\n      }\n      callback(null, self.store);\n    });\n  });\n};\n\n//\n// ### function loadSync (callback)\n// Attempts to load the data stored in `this.file` synchronously\n// and responds appropriately.\n//\nFile.prototype.loadSync = function () {\n  if (!existsSync(this.file)) {\n    this.store = {};\n    return this.store;\n  }\n\n  //\n  // Else, the path exists, read it from disk\n  //\n  try {\n    // Deals with file that include BOM\n    var fileData = fs.readFileSync(this.file, 'utf8');\n    if (fileData.charAt(0) === '\\uFEFF') {\n      fileData = fileData.substr(1);\n    }\n    this.store = this.parse(fileData);\n  } catch (ex) {\n    throw new Error(\"Error parsing your configuration file: [\" + this.file + ']: ' + ex.message);\n  }\n  return this.store;\n};\n\n//\n// ### function stringify ()\n// Returns an encrypted version of the contents IIF\n// `this.secure` is enabled\n//\nFile.prototype.stringify = function (format) {\n  var data = this.store;\n  if (!format) {\n    format = this.format;\n  }\n  if (this.secure) {\n    data = this.keys.encrypt(data);\n  }\n  return format.stringify(data, null, this.spacing);\n};\n\n//\n// ### function parse (contents)\n// Returns a decrypted version of the contents IFF\n// `this.secure` is enabled.\n//\nFile.prototype.parse = function (contents) {\n  var parsed = this.format.parse(contents);\n  if (!this.secure) {\n    return parsed;\n  }\n  return this.keys.decrypt(parsed);\n};\n\n//\n// ### function search (base)\n// #### @base {string} Base directory (or file) to begin searching for the target file.\n// Attempts to find `this.file` by iteratively searching up the\n// directory structure\n//\nFile.prototype.search = function (base) {\n  var looking = true,\n    fullpath,\n    previous,\n    stats;\n  base = base || process.cwd();\n  if (this.file[0] === '/') {\n    //\n    // If filename for this instance is a fully qualified path\n    // (i.e. it starts with a `'/'`) then check if it exists\n    //\n    try {\n      stats = fs.statSync(fs.realpathSync(this.file));\n      if (stats.isFile()) {\n        fullpath = this.file;\n        looking = false;\n      }\n    } catch (ex) {\n      //\n      // Ignore errors\n      //\n    }\n  }\n  if (looking && base) {\n    //\n    // Attempt to stat the realpath located at `base`\n    // if the directory does not exist then return false.\n    //\n    try {\n      var stat = fs.statSync(fs.realpathSync(base));\n      looking = stat.isDirectory();\n    } catch (ex) {\n      return false;\n    }\n  }\n  while (looking) {\n    //\n    // Iteratively look up the directory structure from `base`\n    //\n    try {\n      stats = fs.statSync(fs.realpathSync(fullpath = path.join(base, this.file)));\n      looking = stats.isDirectory();\n    } catch (ex) {\n      previous = base;\n      base = path.dirname(base);\n      if (previous === base) {\n        //\n        // If we've reached the top of the directory structure then simply use\n        // the default file path.\n        //\n        try {\n          stats = fs.statSync(fs.realpathSync(fullpath = path.join(this.dir, this.file)));\n          if (stats.isDirectory()) {\n            fullpath = undefined;\n          }\n        } catch (ex) {\n          //\n          // Ignore errors\n          //\n        }\n        looking = false;\n      }\n    }\n  }\n\n  //\n  // Set the file for this instance to the fullpath\n  // that we have found during the search. In the event that\n  // the search was unsuccessful use the original value for `this.file`.\n  //\n  this.file = fullpath || this.file;\n  return fullpath;\n};","map":{"version":3,"names":["fs","require","path","util","Secure","formats","Memory","exists","existsSync","File","exports","options","file","Error","call","type","dir","process","cwd","format","json","secure","spacing","json_spacing","Buffer","isBuffer","secret","toString","alg","secretPath","readFileSync","keys","search","inherits","prototype","save","value","callback","saveToFile","writeFile","stringify","saveSync","writeFileSync","store","load","self","readFile","err","data","stringData","charAt","substr","parse","ex","message","loadSync","fileData","encrypt","contents","parsed","decrypt","base","looking","fullpath","previous","stats","statSync","realpathSync","isFile","stat","isDirectory","join","dirname","undefined"],"sources":["/home/deepakraj/Desktop/Ticket-ADDA/ticketadda/client/node_modules/nconf/lib/nconf/stores/file.js"],"sourcesContent":["/*\n * file.js: Simple file storage engine for nconf files\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    util = require('util'),\n    Secure = require('secure-keys'),\n    formats = require('../formats'),\n    Memory = require('./memory').Memory;\n\nvar exists = fs.exists || path.exists,\n    existsSync = fs.existsSync || path.existsSync;\n\n//\n// ### function File (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the File nconf store, a simple abstraction\n// around the Memory store that can persist configuration to disk.\n//\nvar File = exports.File = function (options) {\n  if (!options || !options.file) {\n    throw new Error('Missing required option `file`');\n  }\n\n  Memory.call(this, options);\n\n  this.type    = 'file';\n  this.file    = options.file;\n  this.dir     = options.dir    || process.cwd();\n  this.format  = options.format || formats.json;\n  this.secure  = options.secure;\n  this.spacing = options.json_spacing\n    || options.spacing\n    || 2;\n\n  if (this.secure) {\n    this.secure = Buffer.isBuffer(this.secure) || typeof this.secure === 'string'\n      ? { secret: this.secure.toString() }\n      : this.secure;\n\n    this.secure.alg = this.secure.alg || 'aes-256-ctr';\n    if (this.secure.secretPath) {\n      this.secure.secret = fs.readFileSync(this.secure.secretPath, 'utf8');\n    }\n\n    if (!this.secure.secret) {\n      throw new Error('secure.secret option is required');\n    }\n\n    this.keys = new Secure({\n      secret: this.secure.secret,\n      alg: this.secure.alg,\n      format: this.format\n    });\n  }\n\n  if (options.search) {\n    this.search(this.dir);\n  }\n};\n\n// Inherit from the Memory store\nutil.inherits(File, Memory);\n\n//\n// ### function save (value, callback)\n// #### @value {Object} _Ignored_ Left here for consistency\n// #### @callback {function} Continuation to respond to when complete.\n// Saves the current configuration object to disk at `this.file`\n// using the format specified by `this.format`.\n//\nFile.prototype.save = function (value, callback) {\n  this.saveToFile(this.file, value, callback);\n};\n\n//\n// ### function saveToFile (path, value, callback)\n// #### @path {string} The path to the file where we save the configuration to  \n// #### @format {Object} Optional formatter, default behing the one of the store\n// #### @callback {function} Continuation to respond to when complete.\n// Saves the current configuration object to disk at `this.file`\n// using the format specified by `this.format`.\n//\nFile.prototype.saveToFile = function (path, format, callback) {\n  if (!callback) {\n    callback = format;\n    format = this.format;\n  }\n\n  fs.writeFile(path, this.stringify(format), callback);\n};\n\n//\n// ### function saveSync (value, callback)\n// Saves the current configuration object to disk at `this.file`\n// using the format specified by `this.format` synchronously.\n//\nFile.prototype.saveSync = function () {\n  fs.writeFileSync(this.file, this.stringify());\n  return this.store;\n};\n\n//\n// ### function load (callback)\n// #### @callback {function} Continuation to respond to when complete.\n// Responds with an Object representing all keys associated in this instance.\n//\nFile.prototype.load = function (callback) {\n  var self = this;\n\n  exists(self.file, function (exists) {\n    if (!exists) {\n      return callback(null, {});\n    }\n\n    //\n    // Else, the path exists, read it from disk\n    //\n    fs.readFile(self.file, function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n\n      try {\n        // Deals with string that include BOM\n        var stringData = data.toString();\n        if (stringData.charAt(0) === '\\uFEFF') {\n          stringData = stringData.substr(1);\n        }\n\n        self.store = self.parse(stringData);\n      }\n      catch (ex) {\n        return callback(new Error(\"Error parsing your configuration file: [\" + self.file + ']: ' + ex.message));\n      }\n\n      callback(null, self.store);\n    });\n  });\n};\n\n//\n// ### function loadSync (callback)\n// Attempts to load the data stored in `this.file` synchronously\n// and responds appropriately.\n//\nFile.prototype.loadSync = function () {\n  if (!existsSync(this.file)) {\n    this.store = {};\n    return this.store;\n  }\n\n  //\n  // Else, the path exists, read it from disk\n  //\n  try {\n    // Deals with file that include BOM\n    var fileData = fs.readFileSync(this.file, 'utf8');\n    if (fileData.charAt(0) === '\\uFEFF') {\n      fileData = fileData.substr(1);\n    }\n\n    this.store = this.parse(fileData);\n  }\n  catch (ex) {\n    throw new Error(\"Error parsing your configuration file: [\" + this.file + ']: ' + ex.message);\n  }\n\n  return this.store;\n};\n\n//\n// ### function stringify ()\n// Returns an encrypted version of the contents IIF\n// `this.secure` is enabled\n//\nFile.prototype.stringify = function (format) {\n  var data = this.store;\n  if (!format) {\n      format = this.format\n  }\n\n  if (this.secure) {\n    data = this.keys.encrypt(data);\n  }\n\n  return format.stringify(data, null, this.spacing);\n};\n\n//\n// ### function parse (contents)\n// Returns a decrypted version of the contents IFF\n// `this.secure` is enabled.\n//\nFile.prototype.parse = function (contents) {\n  var parsed = this.format.parse(contents);\n\n  if (!this.secure) {\n    return parsed;\n  }\n\n  return this.keys.decrypt(parsed);\n\n};\n\n\n//\n// ### function search (base)\n// #### @base {string} Base directory (or file) to begin searching for the target file.\n// Attempts to find `this.file` by iteratively searching up the\n// directory structure\n//\nFile.prototype.search = function (base) {\n  var looking = true,\n      fullpath,\n      previous,\n      stats;\n\n  base = base || process.cwd();\n\n  if (this.file[0] === '/') {\n    //\n    // If filename for this instance is a fully qualified path\n    // (i.e. it starts with a `'/'`) then check if it exists\n    //\n    try {\n      stats = fs.statSync(fs.realpathSync(this.file));\n      if (stats.isFile()) {\n        fullpath = this.file;\n        looking = false;\n      }\n    }\n    catch (ex) {\n      //\n      // Ignore errors\n      //\n    }\n  }\n\n  if (looking && base) {\n    //\n    // Attempt to stat the realpath located at `base`\n    // if the directory does not exist then return false.\n    //\n    try {\n      var stat = fs.statSync(fs.realpathSync(base));\n      looking = stat.isDirectory();\n    }\n    catch (ex) {\n      return false;\n    }\n  }\n\n  while (looking) {\n    //\n    // Iteratively look up the directory structure from `base`\n    //\n    try {\n      stats = fs.statSync(fs.realpathSync(fullpath = path.join(base, this.file)));\n      looking = stats.isDirectory();\n    }\n    catch (ex) {\n      previous = base;\n      base = path.dirname(base);\n\n      if (previous === base) {\n        //\n        // If we've reached the top of the directory structure then simply use\n        // the default file path.\n        //\n        try {\n          stats = fs.statSync(fs.realpathSync(fullpath = path.join(this.dir, this.file)));\n          if (stats.isDirectory()) {\n            fullpath = undefined;\n          }\n        }\n        catch (ex) {\n          //\n          // Ignore errors\n          //\n        }\n\n        looking = false;\n      }\n    }\n  }\n\n  //\n  // Set the file for this instance to the fullpath\n  // that we have found during the search. In the event that\n  // the search was unsuccessful use the original value for `this.file`.\n  //\n  this.file = fullpath || this.file;\n\n  return fullpath;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}